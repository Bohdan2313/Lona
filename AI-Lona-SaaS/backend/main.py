from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import json
import subprocess
from fastapi.responses import JSONResponse
import psutil
from fastapi import Query 


app = FastAPI()

# –î–æ–∑–≤–æ–ª—è—î–º–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å –¥–æ –±–µ–∫–µ–Ω–¥—É
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –£ –ø—Ä–æ–¥–∞–∫—à–Ω—ñ –≤–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ frontend –∞–¥—Ä–µ—Å—É
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ========== ROOT ==========
@app.get("/")
def root():
    return {"message": "Welcome to AI-Lona SaaS Backend üéØ"}

# ========== –°–¢–ê–¢–£–° –ë–û–¢–ê ==========
@app.get("/status")
def get_status():
    return {
        "bot_status": "active",
        "daily_profit": 12.4,
        "telegram": True
    }

# ========== –ú–û–î–ï–õ–¨ –Ü –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –ö–õ–Æ–ß–Ü–í ==========
class APIKeys(BaseModel):
    api_key: str
    api_secret: str

@app.post("/save_keys")
async def save_keys(keys: APIKeys):
    try:
        save_path = "user_api_keys.json"
        with open(save_path, "w") as f:
            json.dump(keys.dict(), f)
        return {"status": "success", "message": "API –∫–ª—é—á—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ"}
    except Exception as e:
        return {"status": "error", "message": f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"}


@app.get("/keys_status")
def keys_status():
    try:
        with open("user_api_keys.json", "r") as f:
            data = json.load(f)
            if data.get("api_key") and data.get("api_secret"):
                return {"status": "saved"}
    except:
        pass
    return {"status": "not_saved"}



@app.post("/start_bot")
def start_bot():
    try:
        # –ú–æ–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç–∏ —â–æ –∑–∞–≤–≥–æ–¥–Ω–æ: python-—Ñ–∞–π–ª, sh-—Å–∫—Ä–∏–ø—Ç, etc.
        subprocess.Popen(["python", "bot.py"])
        return JSONResponse(content={"status": "success", "message": "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ ‚úÖ"})
    except Exception as e:
        return JSONResponse(status_code=500, content={"status": "error", "message": str(e)})



@app.post("/stop_bot")
def stop_bot():
    try:
        stopped = False
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            if 'bot.py' in proc.info['cmdline']:
                proc.kill()
                stopped = True
        if stopped:
            return JSONResponse(content={"status": "success", "message": "–ë–æ—Ç–∞ –∑—É–ø–∏–Ω–µ–Ω–æ üõë"})
        else:
            return JSONResponse(content={"status": "info", "message": "–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ"})
    except Exception as e:
        return JSONResponse(status_code=500, content={"status": "error", "message": str(e)})


@app.get("/is_bot_running")
def is_bot_running():
    try:
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            if 'bot.py' in proc.info['cmdline']:
                return {"running": True}
        return {"running": False}
    except Exception as e:
        return {"error": str(e)}


@app.get("/open_trades")
def open_trades():
    try:
        with open("ActiveTradesSimple.json", "r") as f:
            trades = json.load(f)
            return {"trades": trades}
    except Exception as e:
        return {"trades": [], "error": str(e)}



@app.post("/close_trade")
def close_trade(symbol: str = Query(...)):
    try:
        # TODO: –¢—É—Ç –≤—Å—Ç–∞–≤ —Å–ø—Ä–∞–≤–∂–Ω—é –ª–æ–≥—ñ–∫—É –∑–∞–∫—Ä–∏—Ç—Ç—è —É–≥–æ–¥–∏
        print(f"[DEBUG] –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —É–≥–æ–¥—É –¥–ª—è: {symbol}")
        return {"status": "success", "message": f"–£–≥–æ–¥—É {symbol} –∑–∞–∫—Ä–∏—Ç–æ ‚úÖ"}
    except Exception as e:
        return {"status": "error", "message": str(e)}


@app.get("/pnl_chart_data")
def pnl_chart_data():
    # –¢–∏–º—á–∞—Å–æ–≤—ñ —Ñ–µ–π–∫–æ–≤—ñ –¥–∞–Ω—ñ
    return {
        "pnl": [
            {"date": "2024-07-01", "pnl": 2.3},
            {"date": "2024-07-02", "pnl": -1.1},
            {"date": "2024-07-03", "pnl": 4.5},
            {"date": "2024-07-04", "pnl": 0.0},
            {"date": "2024-07-05", "pnl": 3.7}
        ]
    }

