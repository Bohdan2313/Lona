import pandas as pd
import numpy as np
import talib
from utils.logger import log_message
from utils.tools import get_current_futures_price
from utils.logger import log_error
import ta
from utils.tools import get_historical_data
from utils.tools import get_klines
from utils.get_klines_bybit import get_klines_clean_bybit
import json


def analyze_macd_atr(symbol):
    """
    üìà MACD + ATR (15m), –ø—ñ–¥–≤–∏—â–µ–Ω–∞ —á—É—Ç–ª–∏–≤—ñ—Å—Ç—å:
    - –¢—Ä–µ–Ω–¥ –∑–∞ rolling-–≤—ñ–∫–Ω–æ–º –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–∏ (5 –±–∞—Ä—ñ–≤)
    - –ù–∞–ø—Ä—è–º –∑–∞ –¥–µ–ª—å—Ç–æ—é –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–∏ –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 3 –±–∞—Ä–∞—Ö
    - "–¢–µ–ø–ª–∏–π" –ø–µ—Ä–µ—Ç–∏–Ω: —è–∫—â–æ —Å—Ç–∞–≤—Å—è –ø—Ä–æ—Ç—è–≥–æ–º –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 3 –±–∞—Ä—ñ–≤ ‚Äî –≤–≤–∞–∂–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–º
    - ATR-—Ñ—ñ–ª—å—Ç—Ä –º‚Äô—è–∫—à–∏–π (–Ω–µ–π—Ç—Ä–∞–ª—ñ–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –¥—É–∂–µ —Ç–∏—Ö–æ–º—É —Ä–∏–Ω–∫—É)
    """
    try:
        df = get_klines_clean_bybit(symbol, interval="15m", limit=200)
        if df is None or df.empty or len(df) < 60:
            return default_macd_atr()

        df = df.dropna(subset=["close", "high", "low"])
        close, high, low = df["close"].astype(float), df["high"].astype(float), df["low"].astype(float)

        macd_raw, signal_raw, hist_raw = talib.MACD(close)
        atr_raw = talib.ATR(high, low, close, timeperiod=14)

        if pd.isna(macd_raw).all() or pd.isna(signal_raw).all() or pd.isna(hist_raw).all() or pd.isna(atr_raw).all():
            return default_macd_atr()

        macd = pd.Series(macd_raw).fillna(0.0)
        signal = pd.Series(signal_raw).fillna(0.0)
        hist = pd.Series(hist_raw).fillna(0.0)
        atr = pd.Series(atr_raw).fillna(0.0)

        macd_now, signal_now, hist_now = macd.iloc[-1], signal.iloc[-1], hist.iloc[-1]
        atr_now = atr.iloc[-1]
        price_now = float(close.iloc[-1])

        # --- –¢—Ä–µ–Ω–¥ –∑–∞ rolling-–≤—ñ–∫–Ω–æ–º –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–∏ (—Å–µ—Ä–µ–¥–Ω—î –∑–∞ 5 –±–∞—Ä—ñ–≤)
        hist_ma5 = hist.tail(5).mean()
        if hist_ma5 > 0:
            macd_trend = "bullish"
        elif hist_ma5 < 0:
            macd_trend = "bearish"
        else:
            macd_trend = "neutral"

        # --- –ù–∞–ø—Ä—è–º –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–∏: –¥–∏–≤–∏–º–æ—Å—å –¥–µ–ª—å—Ç—É –∑–∞ 3 –æ—Å—Ç–∞–Ω–Ω—ñ –±–∞—Ä–∏
        dh = hist.diff().tail(3).sum()
        if dh > 0:
            hist_direction = "up"
        elif dh < 0:
            hist_direction = "down"
        else:
            hist_direction = "flat"

        # --- "–¢–µ–ø–ª–∏–π" –ø–µ—Ä–µ—Ç–∏–Ω: —à—É–∫–∞—î–º–æ –ø–µ—Ä–µ—Ç–∏–Ω –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –±–∞—Ä–∏
        crossed = "none"
        last3 = min(3, len(macd) - 1)
        for i in range(1, last3 + 1):
            m_prev, s_prev = macd.iloc[-1 - i], signal.iloc[-1 - i]
            m_cur, s_cur = macd.iloc[-i], signal.iloc[-i]
            if m_prev < s_prev and m_cur > s_cur:
                crossed = "bullish_cross"
                break
            if m_prev > s_prev and m_cur < s_cur:
                crossed = "bearish_cross"
                break

        # --- ATR —è–∫ % –≤—ñ–¥ —Ü—ñ–Ω–∏: –Ω–µ–π—Ç—Ä–∞–ª—ñ–∑—É—î–º–æ –ª–∏—à–µ –ø—Ä–∏ –¥—É–∂–µ –Ω–∏–∑—å–∫—ñ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
        atr_pct = (atr_now / max(price_now, 1e-8)) * 100
        if atr_pct < 0.2:
            macd_trend = "neutral"
            hist_direction = "flat"
            crossed = "none"

        # --- –û—Ü—ñ–Ω–∫–∞ "—Å–∏–ª–∏" –∑–∞ –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–æ—é + —ñ–Ω–µ—Ä—Ü—ñ—î—é
        score = float(hist_ma5) * 10  # –º–∞—Å—à—Ç–∞–±—É—î–º–æ, —â–æ–± –Ω–µ –±—É–ª–æ –º—ñ–∫—Ä–æ-–æ—Ü—ñ–Ω–æ–∫
        score = round(max(min(score, 10.0), -10.0), 2)

        macd_result = {
            "trend": macd_trend,
            "hist_direction": hist_direction,
            "crossed": crossed,
            "score": score,
            "raw_values": {
                "macd_now": round(float(macd_now), 6),
                "signal_now": round(float(signal_now), 6),
                "hist_now": round(float(hist_now), 6),
                "hist_ma5": round(float(hist_ma5), 6)
            },
            "last_5_values": hist.tail(5).round(4).tolist()
        }

        atr_result = {
            "level": round(float(atr_now), 4),
            "score": round(float(atr_pct), 2),  # ATR —è–∫ –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥ —Ü—ñ–Ω–∏
            "raw_values": {
                "atr_now": round(float(atr_now), 6),
                "atr_pct": round(float(atr_pct), 4)
            },
            "last_5_values": atr.tail(5).round(4).tolist()
        }

        return {
            "macd": macd_result,
            "atr": atr_result
        }

    except Exception as e:
        log_error(f"‚ùå [MACD+ATR] analyze_macd_atr –ø–æ–º–∏–ª–∫–∞: {e}")
        return default_macd_atr()


def default_macd_atr():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è."""
    return {
        "macd": {
            "trend": "neutral",
            "hist_direction": "flat",
            "crossed": "none",
            "score": 0.0,
            "raw_values": {},
            "last_5_values": []
        },
        "atr": {
            "level": 0,
            "score": 0.0,
            "raw_values": {},
            "last_5_values": []
        }
    }


def analyze_cci(symbol):
    """
    üìä –†–æ–∑—à–∏—Ä–µ–Ω–∏–π CCI –∞–Ω–∞–ª—ñ–∑ (15-—Ö–≤) –∑ momentum —Å–∏–≥–Ω–∞–ª–∞–º–∏ –¥–ª—è —Å–∫–∞–ª—å–ø—ñ–Ω–≥—É.
    """
    try:
        df = get_klines_clean_bybit(symbol, interval="15m", limit=150)
        if df is None or df.empty or len(df) < 40:
            return {
                "cci": {
                    "signal": "neutral",
                    "value": None,
                    "score": 0.0,
                    "last_5": [],
                    "slope": "flat"
                }
            }

        df.dropna(subset=["high", "low", "close"], inplace=True)
        high, low, close = df["high"].astype(float), df["low"].astype(float), df["close"].astype(float)
        cci_series = talib.CCI(high, low, close, timeperiod=20)
        cci = pd.Series(cci_series).dropna()

        if cci.empty:
            return {
                "cci": {
                    "signal": "neutral",
                    "value": None,
                    "score": 0.0,
                    "last_5": [],
                    "slope": "flat"
                }
            }

        cci_now = cci.iloc[-1]
        cci_last_5 = cci.tail(5).round(2).tolist()

        # === –ö–ª–∞—Å–∏—á–Ω—ñ —Å–∏–≥–Ω–∞–ª–∏
        signal = "neutral"
        score = 0.0

        if cci_now > 200:
            signal, score = "strong_overbought", -6.0
        elif cci_now > 100:
            signal, score = "overbought", -3.0
        elif cci_now < -200:
            signal, score = "strong_oversold", +6.0
        elif cci_now < -100:
            signal, score = "oversold", +3.0

        # === Momentum —Å–∏–≥–Ω–∞–ª–∏ –¥–ª—è [-100..100]
        if -100 < cci_now < 100:
            slope_check = cci.diff().tail(3).tolist()
            if all(s > 0 for s in slope_check):
                signal, score = "bullish_momentum", +1.5
            elif all(s < 0 for s in slope_check):
                signal, score = "bearish_momentum", -1.5

        # === –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è slope
        slope = "flat"
        if len(cci_last_5) >= 2:
            if cci_last_5[-1] > cci_last_5[-2]:
                slope = "up"
            elif cci_last_5[-1] < cci_last_5[-2]:
                slope = "down"

        log_message(f"üìä CCI {symbol}: {cci_now:.2f} ‚Üí {signal} | Score: {score} | Slope: {slope}")

        return {
            "cci": {
                "signal": signal,
                "value": round(cci_now, 2),
                "score": round(score, 2),
                "last_5": cci_last_5,
                "slope": slope
            }
        }

    except Exception as e:
        return {
            "cci": {
                "signal": "neutral",
                "value": None,
                "score": 0.0,
                "last_5": [],
                "slope": "flat"
            }
        }


def analyze_stochastic(symbol):
    """
    üìâ STOCH (15m) ‚Äî –±—ñ–ª—å—à —á—É—Ç–ª–∏–≤–∏–π:
    - "–¢–µ–ø–ª–∏–π" –∫—Ä–æ—Å (–∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 2 –±–∞—Ä–∏)
    - –ú–æ–º–µ–Ω—Ç—É–º —É —Å–µ—Ä–µ–¥–∏–Ω—ñ –¥—ñ–∞–ø–∞–∑–æ–Ω—É (20..80) –∑–∞ —Å—Ö–∏–ª–æ–º K —ñ D (3 –±–∞—Ä–∏)
    - –ü–æ—Ä–æ–≥–∏ –ø–µ—Ä–µ–∫—É–ø/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω—ñ –∑–∞–ª–∏—à–µ–Ω—ñ 80/20, –∞–ª–µ —Å–∏–≥–Ω–∞–ª—ñ–≤ —Å—Ç–∞–Ω–µ –±—ñ–ª—å—à–µ
    """
    try:
        df = get_klines_clean_bybit(symbol, interval="15m", limit=150)
        if df is None or df.empty or len(df) < 40:
            return {
                "stochastic": {
                    "signal": "neutral",
                    "k": None,
                    "d": None,
                    "score": 0.0,
                    "raw_values": {},
                    "last_5_values": {}
                }
            }

        df["high"] = df["high"].astype(float)
        df["low"] = df["low"].astype(float)
        df["close"] = df["close"].astype(float)

        slowk, slowd = talib.STOCH(
            df['high'], df['low'], df['close'],
            fastk_period=14, slowk_period=3, slowk_matype=0,
            slowd_period=3, slowd_matype=0
        )

        if slowk.isna().all() or slowd.isna().all():
            return {
                "stochastic": {
                    "signal": "neutral",
                    "k": None,
                    "d": None,
                    "score": 0.0,
                    "raw_values": {},
                    "last_5_values": {}
                }
            }

        k, d = float(slowk.iloc[-1]), float(slowd.iloc[-1])
        k_prev, d_prev = float(slowk.iloc[-2]), float(slowd.iloc[-2])

        k_last_5 = slowk.tail(5).round(2).tolist()
        d_last_5 = slowd.tail(5).round(2).tolist()

        signal, score = "neutral", 0.0

        # –¢–µ–ø–ª–∏–π –∫—Ä–æ—Å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 2 –±–∞—Ä–∏
        crossed_up = False
        crossed_down = False
        for i in range(1, min(2, len(slowk) - 1) + 1):
            kp, dp = float(slowk.iloc[-1 - i]), float(slowd.iloc[-1 - i])
            kc, dc = float(slowk.iloc[-i]), float(slowd.iloc[-i])
            if kp < dp and kc > dc:
                crossed_up = True
                break
            if kp > dp and kc < dc:
                crossed_down = True
                break

        if k < 20 and (crossed_up or (k_prev < d_prev and k > d)):
            signal, score = "oversold_cross_up", +8.0
        elif k > 80 and (crossed_down or (k_prev > d_prev and k < d)):
            signal, score = "overbought_cross_down", -8.0
        elif k < 20:
            signal, score = "oversold", +3.0
        elif k > 80:
            signal, score = "overbought", -3.0
        else:
            # Momentum —É —Å–µ—Ä–µ–¥–∏–Ω—ñ –¥—ñ–∞–ø–∞–∑–æ–Ω—É
            slope_k = pd.Series(slowk).diff().tail(3).sum()
            slope_d = pd.Series(slowd).diff().tail(3).sum()
            if slope_k > 0 and slope_d > 0:
                signal, score = "bullish_momentum", +1.5
            elif slope_k < 0 and slope_d < 0:
                signal, score = "bearish_momentum", -1.5

        return {
            "stochastic": {
                "signal": signal,
                "k": round(k, 2),
                "d": round(d, 2),
                "score": round(score, 2),
                "raw_values": {
                    "k_current": round(k, 4),
                    "d_current": round(d, 4),
                    "k_previous": round(k_prev, 4),
                    "d_previous": round(d_prev, 4),
                    "crossed_up_last2": crossed_up,
                    "crossed_down_last2": crossed_down
                },
                "last_5_values": {
                    "k": k_last_5,
                    "d": d_last_5
                }
            }
        }

    except Exception as e:
        log_message(f"‚ùå [STOCH] analyze_stochastic –ø–æ–º–∏–ª–∫–∞: {e}")
        return {
            "stochastic": {
                "signal": "neutral",
                "k": None,
                "d": None,
                "score": 0.0,
                "raw_values": {},
                "last_5_values": {}
            }
        }


def analyze_bollinger_bands(symbol):
    """
    üìä Bollinger Bands (15m, 20 –ø–µ—Ä—ñ–æ–¥—ñ–≤, 2œÉ) ‚Äî —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—à–∞ –≤–µ—Ä—Å—ñ—è:
    - –ü–æ–∑–∏—Ü—ñ—è –≤ –∫–∞–Ω–∞–ª—ñ –∑–∞–≤–∂–¥–∏ 0..100 (–∫–ª–∞–º–ø)
    - Squeeze: —à–∏—Ä–∏–Ω–∞ –Ω–∏–∂—á–µ 25-–≥–æ –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—é –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 40 –±–∞—Ä—ñ–≤
    - Momentum –∑–∞ –ø–æ–∑–∏—Ü—ñ—î—é: >=65 ‚Üí bullish_momentum, <=35 ‚Üí bearish_momentum
    - Breakout-–¥–µ—Ç–µ–∫—Ç: price > upper / price < lower
    –ü–æ–≤–µ—Ä—Ç–∞—î —Ç—É –∂ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —â–æ –π —Ä–∞–Ω—ñ—à–µ (drop-in).
    """
    try:
        import pandas as pd
        import numpy as np
        import talib

        df = get_klines_clean_bybit(symbol, interval="15m", limit=300)
        if df is None or df.empty or len(df) < 40:
            return {
                "bollinger": {
                    "signal": "neutral",
                    "position": 50,
                    "width": 0.0,
                    "status": "neutral",
                    "score": 0.0,
                    "raw_values": {},
                    "last_5_widths": []
                }
            }

        close = pd.to_numeric(df["close"], errors="coerce").astype(float)
        close = close.dropna()
        if close.empty or len(close) < 40:
            return {
                "bollinger": {
                    "signal": "neutral",
                    "position": 50,
                    "width": 0.0,
                    "status": "neutral",
                    "score": 0.0,
                    "raw_values": {},
                    "last_5_widths": []
                }
            }

        arr = close.values
        # –ö–ª–∞—Å–∏—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏: 20 –ø–µ—Ä—ñ–æ–¥—ñ–≤, 2œÉ
        upper, middle, lower = talib.BBANDS(arr, timeperiod=20, nbdevup=2, nbdevdn=2, matype=0)

        last_close = float(arr[-1])
        up = float(upper[-1]) if np.isfinite(upper[-1]) else last_close
        lo = float(lower[-1]) if np.isfinite(lower[-1]) else last_close
        mid = float(middle[-1]) if np.isfinite(middle[-1]) else last_close

        width_now = up - lo
        if not np.isfinite(width_now) or width_now <= 0:
            width_now = 1e-9  # –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –Ω—É–ª—å–æ–≤–æ—ó —à–∏—Ä–∏–Ω–∏

        # –ü–æ–∑–∏—Ü—ñ—è –≤ –∫–∞–Ω–∞–ª—ñ (–∫–ª–∞–º–ø–∏–º–æ 0..100)
        pos_raw = ((last_close - lo) / width_now) * 100.0
        position = round(max(0.0, min(100.0, pos_raw)), 2)

        # –î–∏–Ω–∞–º—ñ—á–Ω–∏–π squeeze: –ø–æ—Ä—ñ–≤–Ω—é—î–º–æ –ø–æ—Ç–æ—á–Ω—É —à–∏—Ä–∏–Ω—É –∑ Q25 –∑–∞ 40 –±–∞—Ä—ñ–≤
        widths_series = pd.Series(upper - lower)
        widths_series = widths_series.replace([np.inf, -np.inf], np.nan).ffill().bfill()
        widths_last40 = widths_series.tail(40)
        q25 = float(widths_last40.quantile(0.25)) if not widths_last40.isna().all() else width_now
        is_squeeze = width_now <= max(q25, 1e-9)

        # –®–∏—Ä–∏–Ω–∞ —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö –¥–æ —Å–µ—Ä–µ–¥–Ω—å–æ—ó —Å–º—É–≥–∏ ‚Äî –∑—Ä—É—á–Ω–æ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        width_pct = float(width_now / mid) if mid > 0 else 0.0

        # –°–∏–≥–Ω–∞–ª–∏
        signal, score = "neutral", 0.0
        if last_close > up:
            signal, score = "breakout_up", +10.0
        elif last_close < lo:
            signal, score = "breakout_down", -10.0
        elif is_squeeze:
            signal, score = "squeeze", +3.0
        elif position >= 65.0:
            signal, score = "bullish_momentum", +1.5
        elif position <= 35.0:
            signal, score = "bearish_momentum", -1.5

        last_5_widths = widths_series.tail(5).round(4).fillna(0.0).tolist()

        return {
            "bollinger": {
                "signal": signal,
                "position": position,                    # 0..100
                "width": round(float(width_now), 4),     # –∞–±—Å–æ–ª—é—Ç–Ω–∞ —à–∏—Ä–∏–Ω–∞
                "status": signal,
                "score": round(float(score), 2),
                "raw_values": {
                    "last_close": round(last_close, 6),
                    "upper_val": round(up, 6),
                    "lower_val": round(lo, 6),
                    "q25_width": round(float(q25), 6),
                    "width_pct": round(float(width_pct), 6)
                },
                "last_5_widths": last_5_widths
            }
        }

    except Exception as e:
        log_error(f"‚ùå analyze_bollinger_bands –ø–æ–º–∏–ª–∫–∞: {e}")
        return {
            "bollinger": {
                "signal": "neutral",
                "position": 50,
                "width": 0.0,
                "status": "neutral",
                "score": 0.0,
                "raw_values": {},
                "last_5_widths": []
            }
        }


def analyze_support_resistance(symbol):
    """
    üõ°Ô∏è –ê–Ω–∞–ª—ñ–∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏/–æ–ø–æ—Ä—É –Ω–∞ 15m:
    - Swing-—Ä—ñ–≤–Ω—ñ + –ª–µ–≥–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è
    - –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥—Å—Ç–∞–Ω—ñ —á–µ—Ä–µ–∑ ATR/BB-width/%
    - –°–∏–º–µ—Ç—Ä–∏—á–Ω—ñ –ø–æ—Ä–æ–≥–∏ "near"
    - –ö–æ—Ä–µ–∫—Ç–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î –ø—Ä–æ–±–æ—ó (—É raw), –∞–ª–µ position -> {near_support|between|near_resistance}
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —Å—É–º—ñ—Å–Ω—É –∑ —ñ—Å–Ω—É—é—á–∏–º –ø–∞–π–ø–ª–∞–π–Ω–æ–º.
    """
    try:
        import math
        import pandas as pd

        df = get_klines_clean_bybit(symbol, interval="15m", limit=200)
        price = get_current_futures_price(symbol)

        if df is None or len(df) < 30 or price is None:
            support = resistance = float(price) if price else 0.0
            return {
                "support_resistance": {
                    "support": support,
                    "resistance": resistance,
                    "position": "unknown",
                    "distance_to_support": 0.0,
                    "distance_to_resistance": 0.0,
                    "score": 0.0,
                    "raw_values": {}
                }
            }

        # -- –í–∏—Ç—è–≥ —á–∏—Å–ª–æ–≤–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
        df = df.copy()
        for c in ("open", "high", "low", "close"):
            df[c] = pd.to_numeric(df[c], errors="coerce")
        df = df.dropna(subset=["high", "low", "close"])
        if df.empty:
            support = resistance = float(price)
            return {
                "support_resistance": {
                    "support": support,
                    "resistance": resistance,
                    "position": "unknown",
                    "distance_to_support": 0.0,
                    "distance_to_resistance": 0.0,
                    "score": 0.0,
                    "raw_values": {}
                }
            }

        # ---------- –î–æ–ø–æ–º—ñ–∂–Ω—ñ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è ----------
        # ATR(14)
        high = df["high"].astype(float)
        low = df["low"].astype(float)
        close = df["close"].astype(float)
        prev_close = close.shift(1)

        tr = pd.concat([
            (high - low).abs(),
            (high - prev_close).abs(),
            (low - prev_close).abs()
        ], axis=1).max(axis=1)

        atr = tr.rolling(14, min_periods=14).mean().iloc[-1]
        atr = float(atr) if pd.notna(atr) else 0.0

        # Bollinger width (20), –∞–±—Å–æ–ª—é—Ç–Ω–∞ (upper-lower)
        sma20 = close.rolling(20, min_periods=20).mean()
        std20 = close.rolling(20, min_periods=20).std()
        bb_width_abs = float((std20.iloc[-1] * 4.0)) if pd.notna(std20.iloc[-1]) else 0.0  # 2œÉ –≤–≥–æ—Ä—É + 2œÉ –≤–Ω–∏–∑
        bb_width_pct = (bb_width_abs / float(sma20.iloc[-1])) if (pd.notna(sma20.iloc[-1]) and sma20.iloc[-1] > 0) else 0.0

        # ---------- Swing-—Ä—ñ–≤–Ω—ñ (—Ñ—Ä–∞–∫—Ç–∞–ª–∏) ----------
        # –õ–æ–∫–∞–ª—å–Ω—ñ –º—ñ–Ω—ñ–º—É–º–∏/–º–∞–∫—Å–∏–º—É–º–∏ —É –≤—ñ–∫–Ω—ñ (left/right = 2)
        def _swing_points(series, is_low=True, left=2, right=2):
            s = series.values
            idxs = []
            for i in range(left, len(s) - right):
                window = s[i-left:i+right+1]
                val = s[i]
                if is_low:
                    if val == window.min() and (window[:left] > val).all() and (window[-right:] > val).all():
                        idxs.append(i)
                else:
                    if val == window.max() and (window[:left] < val).all() and (window[-right:] < val).all():
                        idxs.append(i)
            return idxs

        lookback = 120  # –æ—Å—Ç–∞–Ω–Ω—ñ N –±–∞—Ä—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É —Ñ—Ä–∞–∫—Ç–∞–ª—ñ–≤
        df_look = df.tail(lookback)
        lows_idx = _swing_points(df_look["low"], is_low=True, left=2, right=2)
        highs_idx = _swing_points(df_look["high"], is_low=False, left=2, right=2)

        swing_lows = df_look["low"].iloc[lows_idx].astype(float).tolist()
        swing_highs = df_look["high"].iloc[highs_idx].astype(float).tolist()

        # –Ø–∫—â–æ —Å–≤—ñ–Ω–≥—ñ–≤ –Ω–µ–º–∞ ‚Äî fallback –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 20 –µ–∫—Å—Ç—Ä–µ–º—É–º—ñ–≤ (—è–∫ –±—É–ª–æ)
        if not swing_lows:
            swing_lows = df["low"].tail(20).astype(float).tolist()
        if not swing_highs:
            swing_highs = df["high"].tail(20).astype(float).tolist()

        # ---------- –õ–µ–≥–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü—ñ—è —Ä—ñ–≤–Ω—ñ–≤ ----------
        # –û–±'—î–¥–Ω—É—î–º–æ –¥—É–∂–µ –±–ª–∏–∑—å–∫—ñ —Ä—ñ–≤–Ω—ñ, —â–æ–± –Ω–µ –¥—É–±–ª—é–≤–∞—Ç–∏ —à—É–º (–ø–æ—Ä—ñ–≥ ~0.15 ATR –∞–±–æ 0.1% —Ü—ñ–Ω–∏)
        def _cluster_levels(levels, tol_abs):
            if not levels:
                return []
            levels = sorted(levels)
            clusters = [[levels[0]]]
            for v in levels[1:]:
                if abs(v - clusters[-1][-1]) <= tol_abs:
                    clusters[-1].append(v)
                else:
                    clusters.append([v])
            # –ø—Ä–µ–¥—Å—Ç–∞–≤–Ω–∏–∫ –∫–ª–∞—Å—Ç–µ—Ä–∞ ‚Äî –º–µ–¥—ñ–∞–Ω–∞
            import statistics as _st
            return [float(_st.median(c)) for c in clusters]

        tol_abs = max(0.15 * atr, 0.001 * float(price)) if atr > 0 else 0.0015 * float(price)
        lows_cl = _cluster_levels(swing_lows, tol_abs)
        highs_cl = _cluster_levels(swing_highs, tol_abs)

        # –í–∏–±–∏—Ä–∞—î–º–æ –Ω–∞–π–±–ª–∏–∂—á—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É –Ω–∏–∂—á–µ/‚âà —Ü—ñ–Ω–∏ —Ç–∞ –æ–ø—ñ—Ä –≤–∏—â–µ/‚âà —Ü—ñ–Ω–∏
        p = float(price)
        support_candidates = [lv for lv in lows_cl if lv <= p]
        resistance_candidates = [hv for hv in highs_cl if hv >= p]

        support = max(support_candidates) if support_candidates else (max(lows_cl) if lows_cl else None)
        resistance = min(resistance_candidates) if resistance_candidates else (min(highs_cl) if highs_cl else None)

        # –Ø–∫—â–æ –≤—Å–µ –æ–¥–Ω–æ —â–æ—Å—å –±—Ä–∞–∫—É—î ‚Äî fallback: +/- max(2*ATR, 3% —Ü—ñ–Ω–∏)
        if support is None or math.isnan(support):
            fallback_s = p - max(2.0 * atr, 0.03 * p)
            support = float(fallback_s)
        if resistance is None or math.isnan(resistance):
            fallback_r = p + max(2.0 * atr, 0.03 * p)
            resistance = float(fallback_r)

        # sanity: —è–∫—â–æ –ø–µ—Ä–µ–ø–ª—É—Ç–∞–ª–∏—Å—å
        if support >= resistance:
            # —Ä–æ–∑—Å—É–Ω–µ–º–æ —Ä—ñ–≤–Ω—ñ –Ω–∞–≤–∫–æ–ª–æ —Ü—ñ–Ω–∏
            half_span = max(2.0 * atr, 0.03 * p)
            support = p - half_span
            resistance = p + half_span

        # ---------- –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥—Å—Ç–∞–Ω–µ–π ----------
        dist_s_abs = max(0.0, p - support)
        dist_r_abs = max(0.0, resistance - p)

        # –ø–æ—Ä–æ–≥–∏ "near": –±–µ—Ä–µ–º–æ –∫—Ä–∞—â–∏–π —ñ–∑ 3 –Ω–æ—Ä–º—É–≤–∞–Ω—å
        near_thr_atr = 0.60  # <= 0.60 * ATR
        near_thr_bw  = 0.35  # <= 0.35 * BB width
        near_thr_pct = 0.006 # <= 0.6% –≤—ñ–¥ —Ü—ñ–Ω–∏

        def _is_near(dist_abs):
            votes = []
            if atr > 0:
                votes.append(dist_abs <= near_thr_atr * atr)
            if bb_width_abs > 0:
                votes.append(dist_abs <= near_thr_bw * bb_width_abs)
            votes.append((dist_abs / p) <= near_thr_pct)
            return any(votes)

        near_s = _is_near(dist_s_abs)
        near_r = _is_near(dist_r_abs)

        # Breakout buffer (—â–æ–± –≤—ñ–¥—Ä—ñ–∑–Ω–∏—Ç–∏ —è–≤–Ω–∏–π –ø—Ä–æ–±—ñ–π –≤—ñ–¥ "–º–∞–π–∂–µ –±—ñ–ª—è"):
        breakout_buf = max(0.10 * atr, 0.10 * bb_width_abs, 0.003 * p)
        breakout_state = "none"
        if p < support - breakout_buf:
            breakout_state = "below_support"
        elif p > resistance + breakout_buf:
            breakout_state = "above_resistance"

        # ---------- –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è position (—Å–∏–º–µ—Ç—Ä–∏—á–Ω–∞ —Ç–∞ —Å—Ç–∞–±—ñ–ª—å–Ω–∞) ----------
        # 1) —è–≤–Ω—ñ –ø—Ä–æ–±–æ—ó —É raw (position –ª–∏—à–∞—î–º–æ –≤ –¥–æ–º–µ–Ω—ñ —Ç–≤–æ—î—ó —Å–∏—Å—Ç–µ–º–∏)
        # 2) —è–∫—â–æ –æ–±–∏–¥–≤–∞ "near" -> –±–µ—Ä–µ–º–æ –±–ª–∏–∂—á–∏–π (–∑ –Ω–µ–≤–µ–ª–∏—á–∫–∏–º tie-breaker 0.9)
        # 3) —ñ–Ω–∞–∫—à–µ ‚Äî —Ö—Ç–æ "near", —Ç–æ–π —ñ –ø–µ—Ä–µ–º–∞–≥–∞—î; —ñ–Ω–∞–∫—à–µ ‚Äî between.
        position = "between"
        if near_s and near_r:
            if dist_s_abs <= dist_r_abs * 0.9:
                position = "near_support"
            elif dist_r_abs <= dist_s_abs * 0.9:
                position = "near_resistance"
            else:
                # –ø—Ä–∞–∫—Ç–∏—á–Ω–æ –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–∞–Ω–∞–ª—É
                position = "between"
        elif near_s:
            position = "near_support"
        elif near_r:
            position = "near_resistance"
        else:
            position = "between"

        # ---------- –û—Ü—ñ–Ω–∫–∞ score (–ø–ª–∞–≤–Ω–∞, –∞–ª–µ —É –∑–≤–∏—á–Ω–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ) ----------
        # –±–ª–∏–∑—å–∫–æ –¥–æ —Ä—ñ–≤–Ω—è -> |score| –¥–æ ~6; –º—ñ–∂ —Ä—ñ–≤–Ω—è–º–∏ -> 0
        def _score_from_dist(dist_abs):
            # –Ω–æ—Ä–º—É—î–º–æ –¥–æ –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ –∑ ATR/BB/pct
            parts = []
            if atr > 0:
                parts.append(dist_abs / (near_thr_atr * atr))
            if bb_width_abs > 0:
                parts.append(dist_abs / (near_thr_bw * bb_width_abs))
            parts.append((dist_abs / p) / near_thr_pct)
            x = min(parts)  # <1 ‚Üí –±–ª–∏–∂—á–µ –ø–æ—Ä–æ–≥–∞
            x = max(0.0, min(1.5, x))
            return max(0.0, 1.0 - x)  # 1.0 –ø—Ä–∏ —Å–∞–º–æ–º—É —Ä—ñ–≤–Ω—ñ, ~0 –ø—Ä–∏ –¥–∞–ª–µ–∫—ñ–π –≤—ñ–¥—Å—Ç–∞–Ω—ñ

        score = 0.0
        if position == "near_support":
            score = round(6.0 * _score_from_dist(dist_s_abs), 2)
        elif position == "near_resistance":
            score = round(-6.0 * _score_from_dist(dist_r_abs), 2)
        else:
            score = 0.0

        # ---------- –î–∏—Å—Ç–∞–Ω—Ü—ñ—ó —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö (—è–∫ —É —Ç–≤–æ—ó–π –≤–µ—Ä—Å—ñ—ó) ----------
        distance_to_support = round(((p - support) / support) * 100.0, 2) if support else 0.0
        distance_to_resistance = round(((resistance - p) / resistance) * 100.0, 2) if resistance else 0.0

        log_message(
            f"üõ°Ô∏è {symbol} | Price={p:.6f} | S={support:.6f} R={resistance:.6f} | "
            f"pos={position} | distS={dist_s_abs:.6f} distR={dist_r_abs:.6f} | "
            f"ATR={atr:.6f} BBw={bb_width_abs:.6f} ({bb_width_pct:.4f}%) | "
            f"score={score} | breakout={breakout_state}"
        )

        return {
            "support_resistance": {
                "support": round(float(support), 6),
                "resistance": round(float(resistance), 6),
                "position": position,  # —Ç—ñ–ª—å–∫–∏ near_support/between/near_resistance
                "distance_to_support": distance_to_support,
                "distance_to_resistance": distance_to_resistance,
                "score": float(score),
                "raw_values": {
                    "price": round(float(p), 6),
                    "atr": round(float(atr), 6),
                    "bb_width_abs": round(float(bb_width_abs), 6),
                    "bb_width_pct": round(float(bb_width_pct), 6) if bb_width_pct else 0.0,
                    "swing_lows": [float(x) for x in swing_lows][-50:],
                    "swing_highs": [float(x) for x in swing_highs][-50:],
                    "clustered_lows": [float(x) for x in lows_cl][-20:],
                    "clustered_highs": [float(x) for x in highs_cl][-20:],
                    "breakout_state": breakout_state,
                    "near_support_by": {
                        "abs_dist": round(dist_s_abs, 6),
                        "via_atr": atr > 0 and (dist_s_abs <= near_thr_atr * atr),
                        "via_bbw": bb_width_abs > 0 and (dist_s_abs <= near_thr_bw * bb_width_abs),
                        "via_pct": (dist_s_abs / p) <= near_thr_pct
                    },
                    "near_resistance_by": {
                        "abs_dist": round(dist_r_abs, 6),
                        "via_atr": atr > 0 and (dist_r_abs <= near_thr_atr * atr),
                        "via_bbw": bb_width_abs > 0 and (dist_r_abs <= near_thr_bw * bb_width_abs),
                        "via_pct": (dist_r_abs / p) <= near_thr_pct
                    }
                }
            }
        }

    except Exception as e:
        log_error(f"‚ùå analyze_support_resistance –ø–æ–º–∏–ª–∫–∞: {e}")
        return {
            "support_resistance": {
                "support": 0.0,
                "resistance": 0.0,
                "position": "unknown",
                "distance_to_support": 0.0,
                "distance_to_resistance": 0.0,
                "score": 0.0,
                "raw_values": {}
            }
        }



def get_volatility(symbol):
    """
    üìä –û—Ü—ñ–Ω–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ (15—Ö–≤) —ñ–∑ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é —Ç–∞ score.
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π dict –¥–ª—è SignalStats.
    """
    try:
        df = get_klines_clean_bybit(symbol, interval="15m", limit=150)
        if df is None or df.empty or len(df) < 20:
            result = {
                "volatility": {
                    "percentage": 0.0,
                    "level": "unknown",
                    "score": 0.0,
                    "raw_values": {}
                }
            }
           
            return result

        df["close"] = pd.to_numeric(df["close"], errors="coerce")
        df.dropna(subset=["close"], inplace=True)

        std_dev = df["close"].rolling(window=20).std().iloc[-1]
        avg_price = df["close"].rolling(window=20).mean().iloc[-1]

        if pd.isna(std_dev) or pd.isna(avg_price) or avg_price == 0:
            result = {
                "volatility": {
                    "percentage": 0.0,
                    "level": "unknown",
                    "score": 0.0,
                    "raw_values": {}
                }
            }
          
            return result

        volatility_pct = (std_dev / avg_price) * 100

        # üß† –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—è
        if volatility_pct < 0.5:
            level = "very_low"
            score = -5.0
        elif volatility_pct < 1.0:
            level = "low"
            score = -2.0
        elif volatility_pct < 2.0:
            level = "medium"
            score = 0.0
        elif volatility_pct < 3.5:
            level = "high"
            score = 2.0
        else:
            level = "very_high"
            score = 5.0

        log_message(f"üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å {symbol}: {volatility_pct:.2f}% ‚Üí {level} | Score: {score}")

        result = {
            "volatility": {
                "percentage": round(volatility_pct, 2),
                "level": level,
                "score": round(score, 2),
                "raw_values": {
                    "std_dev": round(std_dev, 6),
                    "avg_price": round(avg_price, 6)
                }
            }
        }
       
        return result

    except Exception as e:
        log_error(f"‚ùå get_volatility –ø–æ–º–∏–ª–∫–∞: {e}")
        result = {
            "volatility": {
                "percentage": 0.0,
                "level": "unknown",
                "score": 0.0,
                "raw_values": {}
            }
        }
      
        return result

    
def detect_candlestick_patterns(symbol, interval="15m", limit=40):
    """
    üïØÔ∏è –ß—É—Ç–ª–∏–≤—ñ—à—ñ —Ç–∞ —á–∏—Å—Ç—ñ—à—ñ —Å–≤—ñ—á–∫–æ–≤—ñ –ø–∞—Ç–µ—Ä–Ω–∏ (TA-Lib + –≤–ª–∞—Å–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ —è–∫–æ—Å—Ç—ñ).
    –ü–æ–≤–µ—Ä—Ç–∞—î:
      {
        "candlestick": {
          "patterns": [{"type": "...", "direction": "...", "index": int, "quality": float}],
          "score": float,
          "raw_values": { ... –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ... }
        }
      }
    """
    try:
        df = get_klines_clean_bybit(symbol, interval=interval, limit=limit)
        if df is None or df.empty or len(df) < 10:
            return {"candlestick": {"patterns": [], "score": 0.0, "raw_values": {}}}

        df = df.dropna(subset=["open", "high", "low", "close"]).copy()
        open_, high, low, close = [df[c].astype(float).values for c in ["open","high","low","close"]]

        # TA-Lib —Å–∏—Ä—ñ —Å–∏–≥–Ω–∞–ª–∏
        eng = talib.CDLENGULFING(open_, high, low, close)
        ham = talib.CDLHAMMER(open_, high, low, close)
        sst = talib.CDLSHOOTINGSTAR(open_, high, low, close)
        evs = talib.CDLEVENINGSTAR(open_, high, low, close)
        mns = talib.CDLMORNINGSTAR(open_, high, low, close)
        dji = talib.CDLDOJI(open_, high, low, close)

        n = len(df)
        last_n = min(12, n)          # –¥–∏–≤–∏–º–æ—Å—å —à–∏—Ä—à–µ –≤ —ñ—Å—Ç–æ—Ä—ñ—é, –∞–ª–µ –∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º ¬´—Å–≤—ñ–∂–∏—Ö¬ª
        look_idxs = list(range(n - last_n, n))

        patterns = []
        raws = {}  # –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ —ñ–Ω–¥–µ–∫—Å–∞—Ö

        def body(i):
            return abs(close[i] - open_[i])

        def range_(i):
            return max(high[i] - low[i], 1e-12)

        def upper_wick(i):
            return high[i] - max(open_[i], close[i])

        def lower_wick(i):
            return min(open_[i], close[i]) - low[i]

        # —è–∫—ñ—Å–Ω—ñ —É–º–æ–≤–∏
        def is_doji(i):   # –¥—É–∂–µ –º–∞–ª–µ —Ç—ñ–ª–æ
            return body(i) / range_(i) <= 0.08

        def is_hammer(i): # –¥–æ–≤–≥–∞ –Ω–∏–∂–Ω—è —Ç—ñ–Ω—å, –∫–æ—Ä–æ—Ç–∫–∏–π –≤–µ—Ä—Ö, –Ω–µ–≤–µ–ª–∏–∫–µ —Ç—ñ–ª–æ
            return (lower_wick(i) >= 2.5 * body(i)) and (upper_wick(i) <= 0.35 * body(i)) and (body(i)/range_(i) <= 0.35)

        def is_shooting_star(i):
            return (upper_wick(i) >= 2.5 * body(i)) and (lower_wick(i) <= 0.35 * body(i)) and (body(i)/range_(i) <= 0.35)

        def is_engulf_bull(i):
            if i == 0: return False
            prev_body_low  = min(open_[i-1], close[i-1])
            prev_body_high = max(open_[i-1], close[i-1])
            cur_body_low   = min(open_[i], close[i])
            cur_body_high  = max(open_[i], close[i])
            # —Ç—ñ–ª–æ bullish —ñ –ø–æ–≤–Ω—ñ—Å—Ç—é –ø–µ—Ä–µ–∫—Ä–∏–≤–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—î —Ç—ñ–ª–æ
            return (close[i] > open_[i]) and (cur_body_low <= prev_body_low) and (cur_body_high >= prev_body_high)

        def is_engulf_bear(i):
            if i == 0: return False
            prev_body_low  = min(open_[i-1], close[i-1])
            prev_body_high = max(open_[i-1], close[i-1])
            cur_body_low   = min(open_[i], close[i])
            cur_body_high  = max(open_[i], close[i])
            return (close[i] < open_[i]) and (cur_body_low <= prev_body_low) and (cur_body_high >= prev_body_high)

        # –≤–∞–≥–∞ –∑–∞ ¬´—Å–≤—ñ–∂—ñ—Å—Ç—å¬ª (–æ—Å—Ç–∞–Ω–Ω—î > –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ)
        def recency_weight(i):
            # i –±–ª–∏–∂—á–µ –¥–æ n-1 ‚Üí –≤–∞–≥–∞ –±–ª–∏–∂—á–∞ –¥–æ 1.0; –≥–ª–∏–±—à–µ ‚Üí –¥–æ 0.4
            pos = (i - (n - last_n)) / max(last_n - 1, 1)
            return 0.4 + 0.6 * pos

        # –±–∞–∑–æ–≤—ñ –≤–∞–≥–∏ —Ç–∏–ø—ñ–≤
        base_w = {
            "engulfing": 8.0,
            "hammer": 6.0,
            "shooting_star": 6.0,
            "evening_star": 10.0,
            "morning_star": 10.0,
            "doji": 2.5
        }

        # –æ–±—Ö—ñ–¥ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Å–≤—ñ—á–æ–∫
        for i in look_idxs:
            r = {
                "idx": int(i),
                "open": float(open_[i]),
                "close": float(close[i]),
                "high": float(high[i]),
                "low": float(low[i]),
                "body": float(body(i)),
                "range": float(range_(i)),
                "u_wick": float(upper_wick(i)),
                "l_wick": float(lower_wick(i)),
                "talib": {
                    "engulfing": int(eng[i]),
                    "hammer": int(ham[i]),
                    "shooting_star": int(sst[i]),
                    "evening_star": int(evs[i]),
                    "morning_star": int(mns[i]),
                    "doji": int(dji[i]),
                }
            }
            raws[i] = r

            cand = []
            # —Å—É–≤–æ—Ä—ñ engulfing
            if is_engulf_bull(i) or eng[i] > 0:
                cand.append(("engulfing", "bullish"))
            if is_engulf_bear(i) or eng[i] < 0:
                cand.append(("engulfing", "bearish"))

            # hammer / shooting star –∑ –º–æ—Ä—Ñ–æ–ª–æ–≥—ñ—î—é
            if is_hammer(i) or ham[i] != 0:
                cand.append(("hammer", "bullish"))
            if is_shooting_star(i) or sst[i] != 0:
                cand.append(("shooting_star", "bearish"))

            # evening/morning star –∑ TA-Lib (–≤–æ–Ω–∏ —Å–∞–º—ñ –≤–∂–µ —Å—Ç—Ä–æ–≥—ñ)
            if evs[i] != 0:
                cand.append(("evening_star", "bearish"))
            if mns[i] != 0:
                cand.append(("morning_star", "bullish"))

            # doji ‚Äî –ª–∏—à–µ ¬´—Ç–æ–Ω–∫—ñ¬ª
            if is_doji(i) or dji[i] != 0 and body(i)/range_(i) <= 0.12:
                cand.append(("doji", "neutral"))

            if not cand:
                continue

            w = recency_weight(i)
            for (ptype, direction) in cand:
                quality = base_w.get(ptype, 3.0) * w
                patterns.append({
                    "type": ptype,
                    "direction": direction,
                    "index": int(i),
                    "quality": round(quality, 2)
                })

        if not patterns:
            log_message(f"üïØÔ∏è –ü–∞—Ç–µ—Ä–Ω—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è {symbol}")
            return {"candlestick": {"patterns": [], "score": 0.0, "raw_values": {}}}

        # 1) —É—Å—É–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤: —è–∫—â–æ —î bull —ñ bear –æ–¥–Ω–æ–≥–æ —Ç–∏–ø—É ‚Äî –±–µ—Ä–µ–º–æ –Ω–∞–π—Å–≤—ñ–∂—ñ—à–∏–π –∑ –≤–∏—â–æ—é —è–∫—ñ—Å—Ç—é
        dedup = {}
        for p in patterns:
            key = (p["type"], p["direction"])
            # –¥–ª—è –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏—Ö –Ω–∞–ø—Ä—è–º–∫—ñ–≤ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø—É –¥–æ–∑–≤–æ–ª–∏–º–æ –ª–∏—à–µ –Ω–∞–π–Ω–æ–≤—ñ—à–∏–π –∑–∞–ø–∏—Å
            existing_same = dedup.get(key)
            if existing_same is None or (p["index"] > existing_same["index"] and p["quality"] >= existing_same["quality"]):
                dedup[key] = p

        # 2) —è–∫—â–æ –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ –ª–∏—à–∏–ª–∏—Å—å —ñ bull, —ñ bear –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∏–ø—É ‚Äî –∑–∞–ª–∏—à–∏–º–æ —Ç–æ–π, —â–æ –±–ª–∏–∂—á–µ –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó —Å–≤—ñ—á–∫–∏
        by_type = {}
        for p in dedup.values():
            by_type.setdefault(p["type"], []).append(p)
        resolved = []
        for t, lst in by_type.items():
            if len({x["direction"] for x in lst}) == 2:
                lst.sort(key=lambda x: (x["index"], x["quality"]), reverse=True)
                resolved.append(lst[0])
            else:
                resolved.extend(lst)

        # –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π —Å–∫–æ—Ä (–æ–±–º–µ–∂–∏–º–æ, —â–æ–± –Ω–µ ¬´–ø–µ—Ä–µ–≥—Ä—ñ–≤–∞—Ç–∏¬ª)
        total_score = round(min(sum(p["quality"] for p in resolved), 25.0), 2)

        # –≤—ñ–¥—Å–æ—Ä—Ç—É—î–º–æ –∑–∞ ¬´—Å–≤—ñ–∂—ñ—Å—Ç—é/—è–∫—ñ—Å—Ç—é¬ª
        resolved.sort(key=lambda x: (x["index"], x["quality"]), reverse=True)

        log_message(f"üïØÔ∏è {symbol}: –∑–Ω–∞–π–¥–µ–Ω–æ {len(resolved)} –ø–∞—Ç–µ—Ä–Ω—ñ–≤ ‚Üí {', '.join(p['type'] for p in resolved)} | score={total_score}")

        return {
            "candlestick": {
                "patterns": resolved,
                "score": total_score,
                "raw_values": raws
            }
        }

    except Exception as e:
        log_error(f"‚ùå detect_candlestick_patterns –ø–æ–º–∏–ª–∫–∞: {e}")
        return {"candlestick": {"patterns": [], "score": 0.0, "raw_values": {}}}


def analyze_rsi(symbol, period=14, interval="15"):
    """
    üìâ RSI (15m) –∑ –ø—ñ–¥–≤–∏—â–µ–Ω–æ—é —á—É—Ç–ª–∏–≤—ñ—Å—Ç—é:
    - –¢—Ä–µ–Ω–¥ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –±–∞—Ä–∏ RSI (—Å—É–º–∞ –¥–µ–ª—å—Ç)
    - –ó–æ–Ω–∏ 40/60 –∑–∞–º—ñ—Å—Ç—å 45/55 –¥–ª—è –º–æ–º–µ–Ω—Ç—É–º—É
    - –†–æ–∑—à–∏—Ä–µ–Ω—ñ –ª–µ–π–±–ª–∏: bullish_momentum / bearish_momentum, –∞–ª–µ –Ω–µ –¥—É—à–∏–º–æ —ñ–Ω—à—ñ —Å–∏–≥–Ω–∞–ª–∏
    """
    df = get_klines_clean_bybit(symbol, interval=interval, limit=120)
    if df is None or df.empty or len(df) < period + 10:
        return {
            "rsi": {
                "signal": "neutral",
                "value": None,
                "trend": "unknown",
                "score": 0.0,
                "raw_values": {},
                "last_5_values": []
            }
        }

    try:
        close = df["close"].astype(float)
        df['rsi'] = ta.momentum.rsi(close, window=period)
        if df['rsi'].isna().all():
            raise ValueError("RSI all NaN")

        latest = float(df['rsi'].iloc[-1])
        prev = float(df['rsi'].iloc[-2])
        last_5 = df['rsi'].tail(5).round(2).tolist()

        # –¢—Ä–µ–Ω–¥ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –¥–µ–ª—å—Ç–∏
        d3 = df['rsi'].diff().tail(3).sum()
        if d3 > 0:
            trend = "up"
        elif d3 < 0:
            trend = "down"
        else:
            trend = "flat"

        # –ë–∞–∑–æ–≤—ñ —Å–∏–≥–Ω–∞–ª–∏ –∑–æ–Ω
        signal = "neutral"
        score = 0.0
        if latest >= 80:
            signal, score = "extremely_overbought", -6.0
        elif latest >= 70:
            signal, score = "overbought", -3.0
        elif latest <= 20:
            signal, score = "extremely_oversold", +6.0
        elif latest <= 30:
            signal, score = "oversold", +3.0

        # –ú–æ–º–µ–Ω—Ç—É–º-–∑–æ–Ω–∏ 40/60
        if 40 < latest < 60:
            # –ª–∏—à–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π signal (–º–æ–∂–µ –±—É—Ç–∏ neutral), –∞–ª–µ –æ—Ü—ñ–Ω—é—î–º–æ –º–æ–º–µ–Ω—Ç—É–º
            pass
        elif latest >= 60 and trend == "up":
            signal, score = "bullish_momentum", max(score, +1.5)
        elif latest <= 40 and trend == "down":
            signal, score = "bearish_momentum", min(score, -1.5)

        return {
            "rsi": {
                "signal": signal,
                "value": round(latest, 2),
                "trend": trend,
                "score": round(score, 2),
                "raw_values": {
                    "latest_rsi": round(latest, 4),
                    "previous_rsi": round(prev, 4),
                    "delta3": round(float(d3), 4)
                },
                "last_5_values": last_5
            }
        }

    except Exception as e:
        log_error(f"‚ùå analyze_rsi –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
        return {
            "rsi": {
                "signal": "neutral",
                "value": None,
                "trend": "unknown",
                "score": 0.0,
                "raw_values": {},
                "last_5_values": []
            }
        }


def get_micro_trend_1m(symbol):
    """
    üîç –ú—ñ–∫—Ä–æ-—Ç—Ä–µ–Ω–¥ –Ω–∞ 1m (—á—É—Ç–ª–∏–≤—ñ—à–∞/—Å—Ç–∞–±—ñ–ª—å–Ω—ñ—à–∞ –≤–µ—Ä—Å—ñ—è):
    - EMA10 (—à–≤–∏–¥–∫–∞) + EMA30 (–ø–æ–≤—ñ–ª—å–Ω–∞)
    - –°–µ—Ä–µ–¥–Ω—è –ø–æ—Ö—ñ–¥–Ω–∞ EMA10 –∑–∞ 3 –±–∞—Ä–∏ (–∑–∞–º—ñ—Å—Ç—å –æ–¥–∏–Ω–æ—á–Ω–æ—ó)
    - ATR(10) —è–∫ –º—ñ—Ä–∞ –º—ñ–∫—Ä–æ–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
    - –ü–æ—Ä–æ–≥–∏ –º‚Äô—è–∫—à—ñ, –∞–ª–µ –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏ –≤—ñ–¥ —à—É–º—É
    –°–•–ï–ú–ê –í–ò–•–û–î–£ –ù–ï –ó–ú–Ü–ù–ï–ù–ê.
    """
    try:
        df = get_klines_clean_bybit(symbol, interval="1m", limit=200)
        if df is None or df.empty or len(df) < 40:
            return {
                "micro_trend_1m": {
                    "direction": "NEUTRAL",
                    "diff_pct": None,
                    "slope": None,
                    "score": 0.0,
                    "strength": "weak",
                    "last_price": None,
                    "ema10_trend": "flat",
                    "volatility": None,
                    "raw_values": {},
                    "last_5_values": {}
                },
                "microtrend_direction": "NEUTRAL"
            }

        # —á–∏—Å–ª–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏
        for col in ("open", "high", "low", "close"):
            df[col] = pd.to_numeric(df.get(col), errors="coerce")
        df = df.dropna(subset=["open", "high", "low", "close"])
        if df.empty:
            raise ValueError("no valid OHLC data")

        # EMA10 / EMA30
        ema_fast = df["close"].ewm(span=10, adjust=False).mean()
        ema_slow = df["close"].ewm(span=30, adjust=False).mean()

        # –ü–æ—Ö—ñ–¥–Ω–∞ EMA10 + –∑–≥–ª–∞–¥–∂–µ–Ω–Ω—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –±–∞—Ä–∏
        ema10_diff = ema_fast.diff()
        ema10_slope_mean3 = ema10_diff.tail(3).mean()

        # ATR(10) —è–∫ –º—ñ–∫—Ä–æ–≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å (–º–∞—Å—à—Ç–∞–± –∑–º—ñ–Ω)
        # ATR‚âà |high-low| –∑ EMA —É—Å–µ—Ä–µ–¥–Ω–µ–Ω–Ω—è–º
        tr = (df["high"] - df["low"]).abs()
        atr10 = tr.ewm(span=10, adjust=False).mean()

        last_close = float(df["close"].iloc[-1])
        last_ema_fast = float(ema_fast.iloc[-1])
        last_atr = float(atr10.iloc[-1]) if pd.notna(atr10.iloc[-1]) else 0.0

        # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å / NaN
        if not np.isfinite(last_ema_fast) or last_ema_fast == 0:
            last_ema_fast = max(last_close, 1e-8)
        if not np.isfinite(last_atr):
            last_atr = 0.0
        if not np.isfinite(ema10_slope_mean3):
            ema10_slope_mean3 = 0.0

        # –ù–∞—Å–∫—ñ–ª—å–∫–∏ —Ü—ñ–Ω–∞ –≤–∏—â–µ/–Ω–∏–∂—á–µ EMA10 —É % (diff_pct)
        diff_pct = ((last_close - last_ema_fast) / last_ema_fast) * 100.0

        # –û—Ü—ñ–Ω–∫–∞ —Å–∏–ª–∏: –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –Ω–∞—Ö–∏–ª –≤—ñ–¥–Ω–æ—Å–Ω–æ —Ü—ñ–Ω–∏ (–≤ %) —ñ –¥–∏–≤–∏–º–æ—Å—å –Ω–∞ ATR
        slope_pct = (ema10_slope_mean3 / last_ema_fast) * 100.0 if last_ema_fast else 0.0

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—è —Å–∏–ª–∏ —Ç—Ä–µ–Ω–¥—É (–º‚Äô—è–∫—à–∞, –∞–ª–µ –Ω–µ —à—É–º)
        # –¥–æ–¥–∞—Ç–∫–æ–≤–æ –≤–∏–º–∞–≥–∞—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å, —è–∫—â–æ ATR –±–ª–∏–∑—å–∫–æ –Ω—É–ª—è ‚Äî —Å–∏–ª–∞=weak
        if abs(slope_pct) > 0.06 and abs(diff_pct) > 0.5 and last_atr > 0:
            strength = "strong"
        elif abs(slope_pct) > 0.03 and abs(diff_pct) > 0.25 and last_atr > 0:
            strength = "moderate"
        else:
            strength = "weak"

        # –ù–∞–ø—Ä—è–º EMA10 –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –±–∞—Ä–∏
        ema_trend = "up" if ema10_slope_mean3 > 0 else "down" if ema10_slope_mean3 < 0 else "flat"

        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–ø—Ä—è–º–∫—É (–ø–æ—Ä–æ–≥–∏ —á—É—Ç–ª–∏–≤—ñ—à—ñ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ)
        trend = "NEUTRAL"
        score = 0.0

        # —Å–∏–ª—å–Ω–∏–π –∞–ø/–¥–∞—É–Ω —è–∫—â–æ —ñ diff_pct, —ñ slope_pct –¥–æ—Å—Ç–∞—Ç–Ω—ñ
        if diff_pct > 0.6 and slope_pct > 0.05:
            trend = "STRONG_BULLISH"
            score = 4.0
        elif diff_pct > 0.25 and slope_pct > 0.0:
            trend = "BULLISH"
            score = 2.0
        elif diff_pct < -0.6 and slope_pct < -0.05:
            trend = "STRONG_BEARISH"
            score = -4.0
        elif diff_pct < -0.25 and slope_pct < 0.0:
            trend = "BEARISH"
            score = -2.0
        else:
            # —è–∫—â–æ –∑–æ–≤—Å—ñ–º –º–∞–ª–æ —Å–∏–≥–Ω–∞–ª—ñ–≤, –ª–∏—à–∞—î–º–æ NEUTRAL;
            # –∞–ª–µ —è–∫—â–æ –Ω–∏–∑—å–∫–∏–π ATR —ñ –º–∞–π–∂–µ –Ω—É–ª—å–æ–≤—ñ –∑—Å—É–≤–∏ ‚Äî UNCERTAIN
            if abs(diff_pct) < 0.15 and abs(slope_pct) < 0.01:
                trend = "UNCERTAIN"
                score = 0.0

        log_message(
            f"üìà [DEBUG] Micro1m {symbol} ‚Üí Close={last_close:.5f}, EMA10={last_ema_fast:.5f}, "
            f"diff={diff_pct:.2f}%, slope%={slope_pct:.3f}%, ATR10={last_atr:.6f} ‚Üí {trend} ({strength})"
        )

        return {
            "micro_trend_1m": {
                "direction": trend,
                "diff_pct": round(diff_pct, 2),
                "slope": round(float(ema10_slope_mean3), 5),
                "score": round(float(score), 2),
                "strength": strength,
                "last_price": round(last_close, 5),
                "ema10_trend": "up" if ema10_slope_mean3 > 0 else "down" if ema10_slope_mean3 < 0 else "flat",
                "volatility": round(float(last_atr), 6),
                "raw_values": {
                    "ema10_last": round(float(last_ema_fast), 6),
                    "slope_mean3": round(float(ema10_slope_mean3), 6),
                    "slope_pct": round(float(slope_pct), 4)
                },
                "last_5_values": {
                    "ema10": [float(x) if np.isfinite(x) else 0.0 for x in ema_fast.tail(5).round(6).tolist()],
                    "ema10_slope": [float(x) if np.isfinite(x) else 0.0 for x in ema10_diff.tail(5).round(6).tolist()],
                    "close": [float(x) if np.isfinite(x) else 0.0 for x in df["close"].tail(5).round(6).tolist()]
                }
            },
            "microtrend_direction": trend
        }

    except Exception as e:
        log_error(f"‚ùå get_micro_trend_1m –ø–æ–º–∏–ª–∫–∞: {e}")
        return {
            "micro_trend_1m": {
                "direction": "NEUTRAL",
                "diff_pct": 0.0,
                "slope": 0.0,
                "score": 0.0,
                "strength": "weak",
                "last_price": 0.0,
                "ema10_trend": "flat",
                "volatility": 0.0,
                "raw_values": {},
                "last_5_values": {
                    "ema10": [],
                    "ema10_slope": [],
                    "close": []
                }
            },
            "microtrend_direction": "NEUTRAL"
        }


def calculate_macd(close_series: pd.Series, fast: int = 12, slow: int = 26, signal: int = 9):
    try:
        ema_fast = close_series.ewm(span=fast, adjust=False).mean()
        ema_slow = close_series.ewm(span=slow, adjust=False).mean()
        macd_line = ema_fast - ema_slow
        signal_line = macd_line.ewm(span=signal, adjust=False).mean()
        histogram = macd_line - signal_line

        return {
            "macd": macd_line.fillna(0),
            "signal": signal_line.fillna(0),
            "histogram": histogram.fillna(0)
        }
    except Exception as e:
        log_error(f"‚ùå [calculate_macd] –ü–æ–º–∏–ª–∫–∞: {e}")
        return {
            "macd": pd.Series([0] * len(close_series)),
            "signal": pd.Series([0] * len(close_series)),
            "histogram": pd.Series([0] * len(close_series))
        }

def calculate_rsi(close_series: pd.Series, period: int = 14):
    try:
        delta = close_series.diff()
        gain = delta.where(delta > 0, 0)
        loss = -delta.where(delta < 0, 0)

        avg_gain = gain.ewm(alpha=1/period, min_periods=period).mean()
        avg_loss = loss.ewm(alpha=1/period, min_periods=period).mean()

        rs = avg_gain / (avg_loss + 1e-6)
        rsi = 100 - (100 / (1 + rs))

        return rsi.fillna(50)
    except Exception as e:
        log_error(f"‚ùå [calculate_rsi] –ü–æ–º–∏–ª–∫–∞: {e}")
        return pd.Series([50] * len(close_series))


def detect_patterns_for_dataframe(df: pd.DataFrame) -> list:
    """
    üîç –í–∏–∑–Ω–∞—á–∞—î –Ω–∞–π—Å–∏–ª—å–Ω—ñ—à–∏–π –ø–∞—Ç–µ—Ä–Ω –Ω–∞ –∫–æ–∂–Ω—ñ–π —Å–≤—ñ—á—Ü—ñ –∑ TA-Lib.
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –ø–∞—Ç–µ—Ä–Ω—ñ–≤ –∞–±–æ 'none', —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.
    """
    try:
        required_cols = ["open", "high", "low", "close"]
        if not all(col in df.columns for col in required_cols):
            raise ValueError("‚õîÔ∏è –í—ñ–¥—Å—É—Ç–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ OHLC –≤ DataFrame.")

        df = df.dropna(subset=required_cols)

        # üî¢ –Ø–≤–Ω–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –ø–∞—Ç–µ—Ä–Ω—ñ–≤
        pattern_funcs = {
            "engulfing": talib.CDLENGULFING,
            "hammer": talib.CDLHAMMER,
            "shooting_star": talib.CDLSHOOTINGSTAR,
            "morning_star": talib.CDLMORNINGSTAR,
            "evening_star": talib.CDLEVENINGSTAR,
            "doji": talib.CDLDOJI,
        }

        results = {
            name: func(df["open"], df["high"], df["low"], df["close"])
            for name, func in pattern_funcs.items()
        }

        patterns = []
        for i in range(len(df)):
            selected_pattern = "none"
            for name in pattern_funcs.keys():  # –î–æ—Ç—Ä–∏–º—É–π—Å—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
                series = results[name]
                if i >= len(series):
                    continue
                value = series.iloc[i]
                if value > 0:
                    selected_pattern = f"{name}_bull"
                    break
                elif value < 0:
                    selected_pattern = f"{name}_bear"
                    break
            patterns.append(selected_pattern)

        return patterns

    except Exception as e:
        log_error(f"‚ùå [detect_patterns_for_dataframe] –ü–æ–º–∏–ª–∫–∞: {e}")
        return ["none"] * len(df)


def calculate_stoch(df, period: int = 14) -> pd.DataFrame:
    try:
        required_cols = ["high", "low", "close"]
        if not all(col in df.columns for col in required_cols):
            raise ValueError("DataFrame –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏: 'high', 'low', 'close'")

        low_min = df["low"].rolling(window=period).min()
        high_max = df["high"].rolling(window=period).max()
        denom = high_max - low_min

        stoch_k = np.where(denom == 0, 0, 100 * (df["close"] - low_min) / denom)
        stoch_k = pd.Series(stoch_k, index=df.index).fillna(0)
        stoch_d = stoch_k.rolling(window=3).mean().fillna(0)

        # üéØ –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª
        signal = []
        for k, d in zip(stoch_k, stoch_d):
            if k > 80 and k < d:
                signal.append("bearish")
            elif k < 20 and k > d:
                signal.append("bullish")
            else:
                signal.append("neutral")

        return pd.DataFrame({
            "stoch_k": stoch_k,
            "stoch_d": stoch_d,
            "signal": signal
        })

    except Exception as e:
        log_error(f"‚ùå [calculate_stoch] –ü–æ–º–∏–ª–∫–∞: {e}")
        return pd.DataFrame({
            "stoch_k": [0]*len(df),
            "stoch_d": [0]*len(df),
            "signal": ["neutral"]*len(df)
        })


def detect_support_status(df: pd.DataFrame, window: int = 20, pct_threshold: float = 0.002) -> pd.Series:
    """
    üìâ –í–∏–∑–Ω–∞—á–∞—î, —á–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Ü—ñ–Ω–∞ –ø–æ–±–ª–∏–∑—É –ø—ñ–¥—Ç—Ä–∏–º–∫–∏/–æ–ø–æ—Ä—É –≤ –º–µ–∂–∞—Ö –∑–∞–¥–∞–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞.
    """
    try:
        if not all(col in df.columns for col in ["close", "low", "high"]):
            raise ValueError("DataFrame –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏ 'close', 'low', 'high'")

        status = ["neutral"] * len(df)

        for i in range(window, len(df)):
            window_df = df.iloc[i - window:i]
            recent_low = window_df["low"].min()
            recent_high = window_df["high"].max()
            current_price = df["close"].iloc[i]

            low_dist = abs(current_price - recent_low) / current_price
            high_dist = abs(current_price - recent_high) / current_price

            if low_dist <= pct_threshold:
                status[i] = "support"
            elif high_dist <= pct_threshold:
                status[i] = "resistance"

        return pd.Series(status, index=df.index)

    except Exception as e:
        log_error(f"‚ùå [detect_support_status] –ü–æ–º–∏–ª–∫–∞: {e}")
        return pd.Series(["neutral"] * len(df), index=df.index)


def add_sparklines(history_log: list, field: str = "price", window: int = 5) -> list:
    try:
        for i in range(len(history_log)):
            spark = []
            for j in range(i - window + 1, i + 1):
                if 0 <= j < len(history_log):
                    val = history_log[j].get(field)
                    if isinstance(val, (int, float)):
                        spark.append(val)
            history_log[i]["sparkline_" + field] = spark
        return history_log

    except Exception as e:
        log_error(f"‚ùå [add_sparklines] –ü–æ–º–∏–ª–∫–∞: {e}")
        return history_log


def get_micro_trend_5m(symbol):
    """
    üìâ –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –º—ñ–∫—Ä–æ—Ç—Ä–µ–Ω–¥—É –Ω–∞ 5m (—á—É—Ç–ª–∏–≤—ñ—à–∞/—Å—Ç—ñ–π–∫—ñ—à–∞ –≤–µ—Ä—Å—ñ—è):
    - EMA20 (—à–≤–∏–¥—à–∞) + EMA50 (–ø–æ–≤—ñ–ª—å–Ω—ñ—à–∞)
    - –°–µ—Ä–µ–¥–Ω—ñ–π –Ω–∞—Ö–∏–ª EMA20 –∑–∞ 3 –±–∞—Ä–∏ (slope_mean3) ‚Üí –º–µ–Ω—à–µ —à—É–º—É
    - ATR(14) —è–∫ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ –º—ñ—Ä–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ (—Ç–∞ —ó—ó % –¥–æ —Ü—ñ–Ω–∏)
    - –ú'—è–∫—à—ñ –ø–æ—Ä–æ–≥–∏ + –ø—Ä–æ—Å—Ç—ñ breakout-—É–º–æ–≤–∏
    –°–•–ï–ú–ê –í–ò–•–û–î–£ –ù–ï –ó–ú–Ü–ù–ï–ù–ê.
    """
    try:
        df = get_klines_clean_bybit(symbol, interval="5m", limit=120)
        if df is None or df.empty or len(df) < 20:
            return {
                "microtrend_direction": "flat",
                "micro_trend_5m": {
                    "direction": "flat",
                    "score": 0.0,
                    "change_pct": 0.0,
                    "volatility": 0.0,
                    "start_price": None,
                    "end_price": None,
                    "raw_values": {},
                    "last_5_values": {}
                }
            }

        # —á–∏—Å–ª–æ–≤—ñ —Å—Ç–æ–≤–ø—Ü—ñ
        for col in ("open", "high", "low", "close"):
            df[col] = pd.to_numeric(df.get(col), errors="coerce")
        df = df.dropna(subset=["open", "high", "low", "close"])
        if df.empty:
            raise ValueError("no valid OHLC data")

        # –í—ñ–∫–Ω–æ –∞–Ω–∞–ª—ñ–∑—É (–æ—Å—Ç–∞–Ω–Ω—ñ ~30 —Ö–≤ = 6 –±–∞—Ä—ñ–≤ –ø–æ 5m)
        lookback_bars = 6
        recent = df.tail(max(lookback_bars, 6))

        start_price = float(recent["close"].iloc[0])
        end_price   = float(recent["close"].iloc[-1])
        if start_price == 0:
            start_price = 1e-8

        change_pct = ((end_price - start_price) / start_price) * 100.0

        # EMA20 / EMA50
        ema_fast = df["close"].ewm(span=20, adjust=False).mean()
        ema_slow = df["close"].ewm(span=50, adjust=False).mean()

        # –ù–∞—Ö–∏–ª EMA20 (—Å–µ—Ä–µ–¥–Ω—ñ–π –∑–∞ 3 –±–∞—Ä–∏)
        ema20_diff = ema_fast.diff()
        slope_mean3 = float(ema20_diff.tail(3).mean() or 0.0)

        last_close = float(df["close"].iloc[-1])
        last_ema20 = float(ema_fast.iloc[-1]) if pd.notna(ema_fast.iloc[-1]) else last_close
        last_ema50 = float(ema_slow.iloc[-1]) if pd.notna(ema_slow.iloc[-1]) else last_close

        if last_ema20 == 0:
            last_ema20 = max(last_close, 1e-8)

        # –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –Ω–∞—Ö–∏–ª —É % –¥–æ —Ü—ñ–Ω–∏
        slope_pct = (slope_mean3 / last_ema20) * 100.0

        # ATR(14) —ñ –π–æ–≥–æ % –¥–æ —Ü—ñ–Ω–∏ —è–∫ ¬´–≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å¬ª
        tr = (df["high"] - df["low"]).abs()
        atr14 = tr.ewm(span=14, adjust=False).mean()
        last_atr = float(atr14.iloc[-1]) if pd.notna(atr14.iloc[-1]) else 0.0
        vol_pct = (last_atr / last_close) * 100.0 if last_close > 0 else 0.0

        # –î—ñ–∞–ø–∞–∑–æ–Ω –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –±–∞—Ä—ñ–≤ (–¥–ª—è breakout)
        hi_recent = float(recent["high"].max())
        lo_recent = float(recent["low"].min())

        # –ë–∞–∑–æ–≤—ñ –ø–æ—Ä–æ–≥–∏ (–º‚Äô—è–∫—à—ñ, –Ω—ñ–∂ —É –≤–µ—Ä—Å—ñ—ó –±–µ–∑ EMA/ATR)
        direction = "flat"
        score = 0.0

        bullish_bias = (last_ema20 > last_ema50)
        bearish_bias = (last_ema20 < last_ema50)

        # Breakout-—Å–∏–≥–Ω–∞–ª–∏ (–Ω–µ –Ω–∞–¥—Ç–æ –∞–≥—Ä–µ—Å–∏–≤–Ω—ñ, –∞–ª–µ —á—É—Ç–ª–∏–≤—ñ—à—ñ)
        breakout_up = (last_close > hi_recent * 0.998) and (change_pct > 0.6)
        breakout_down = (last_close < lo_recent * 1.002) and (change_pct < -0.6)

        if (change_pct >= 1.2 and slope_pct > 0.04 and bullish_bias) or breakout_up:
            direction = "strong_bullish"
            score = 4.0
        elif change_pct >= 0.4 and slope_pct > 0.0:
            direction = "bullish"
            score = 2.0
        elif (change_pct <= -1.2 and slope_pct < -0.04 and bearish_bias) or breakout_down:
            direction = "strong_bearish"
            score = -4.0
        elif change_pct <= -0.4 and slope_pct < 0.0:
            direction = "bearish"
            score = -2.0
        else:
            direction = "flat"
            score = 0.0

        result = {
            "microtrend_direction": direction,
            "micro_trend_5m": {
                "direction": direction,
                "score": round(score, 2),
                "change_pct": round(change_pct, 2),
                # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ ¬´volatility¬ª —è–∫ % (—É–∑–≥–æ–¥–∂–µ–Ω–æ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –ø—ñ–¥—Ö–æ–¥–æ–º)
                "volatility": round(vol_pct, 2),
                "start_price": round(start_price, 6),
                "end_price": round(end_price, 6),
                "raw_values": {
                    "ema20_last": round(last_ema20, 6),
                    "ema50_last": round(last_ema50, 6),
                    "slope_mean3": round(slope_mean3, 6),
                    "slope_pct": round(slope_pct, 4),
                    "atr14": round(last_atr, 6),
                    "hi_recent": round(hi_recent, 6),
                    "lo_recent": round(lo_recent, 6),
                    "bullish_bias": bullish_bias,
                    "bearish_bias": bearish_bias,
                    "breakout_up": breakout_up,
                    "breakout_down": breakout_down
                },
                "last_5_values": {
                    "close": [float(x) for x in df["close"].tail(5).round(6).tolist()],
                    "high":  [float(x) for x in df["high"].tail(5).round(6).tolist()],
                    "low":   [float(x) for x in df["low"].tail(5).round(6).tolist()]
                }
            }
        }

        log_message(
            f"üìä [DEBUG] {symbol} 5m ‚Üí Œî={change_pct:.2f}%, slope%={slope_pct:.3f}%, "
            f"ATR%={vol_pct:.2f} ‚Üí {direction} (ema20{ '>' if bullish_bias else '<' if bearish_bias else '=' }ema50)"
        )
        return result

    except Exception as e:
        log_error(f"‚ùå get_micro_trend_5m –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
        return {
            "microtrend_direction": "flat",
            "micro_trend_5m": {
                "direction": "flat",
                "score": 0.0,
                "change_pct": 0.0,
                "volatility": 0.0,
                "start_price": 0.0,
                "end_price": 0.0,
                "raw_values": {
                    "high": 0.0,
                    "low": 0.0
                },
                "last_5_values": {
                    "close": [],
                    "high": [],
                    "low": []
                }
            }
        }


def get_volume_category(symbol):
    """
    üìä –ß—É—Ç–ª–∏–≤—ñ—à–∏–π –∞–Ω–∞–ª—ñ–∑ –æ–± º—î–º—É –Ω–∞ 5m:
      - EMA(20) —è–∫ –∑–≥–ª–∞–¥–∂–µ–Ω–∏–π baseline
      - median_ratio —è–∫ –±–∞–∑–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
      - z-score —Å–ø–∞–π–∫—ñ–≤ (–∞–Ω–æ–º–∞–ª—ñ–π)
    –ü–æ–≤–µ—Ä—Ç–∞—î {"volume": {...}} —è–∫ —ñ —Ä–∞–Ω—ñ—à–µ.
    """
    try:
        df = get_klines_clean_bybit(symbol, interval="5m", limit=288)
        if df is None or df.empty or "volume" not in df.columns or len(df) < 30:
            return {
                "volume": {
                    "level": "normal",
                    "score": 0.0,
                    "average_volume": 0.0,
                    "recent_volume": 0.0,
                    "raw_values": {"ratio": 0.0, "zscore": 0.0},
                    "last_5_values": []
                }
            }

        v = pd.to_numeric(df["volume"], errors="coerce").fillna(0.0)
        if v.sum() == 0:
            return {
                "volume": {
                    "level": "normal",
                    "score": 0.0,
                    "average_volume": 0.0,
                    "recent_volume": 0.0,
                    "raw_values": {"ratio": 0.0, "zscore": 0.0},
                    "last_5_values": []
                }
            }

        ema20 = v.ewm(span=20, adjust=False).mean()
        recent = float(v.iloc[-1])
        base = float(ema20.iloc[-1]) if pd.notna(ema20.iloc[-1]) else float(v.mean())
        base = max(base, 1e-8)

        ratio = recent / base

        # –º–µ–¥—ñ–∞–Ω–Ω–∏–π baseline –ø–æ ratio ‚Üí –º–µ–Ω—à–µ —á—É—Ç–ª–∏–≤–∏–π –¥–æ –≤–∏–∫–∏–¥—ñ–≤
        ratio_series = (v / (ema20.replace(0, pd.NA))).replace([np.inf, -np.inf], np.nan).fillna(0.0)
        median_ratio = float(ratio_series.rolling(60, min_periods=30).median().iloc[-1] or 1.0)

        # z-score –ø–æ –ª–æ–≥-–æ–± º—î–º—É, —â–æ–± –ª–æ–≤–∏—Ç–∏ —ñ–º–ø—É–ª—å—Å–Ω—ñ —Å–≤—ñ—á–∫–∏
        logv = np.log(np.clip(v, 1e-8, None))
        mean_l = float(logv.rolling(60, min_periods=30).mean().iloc[-1] or logv.mean())
        std_l  = float(logv.rolling(60, min_periods=30).std().iloc[-1] or logv.std() or 1e-8)
        zscore = (float(logv.iloc[-1]) - mean_l) / std_l

        # –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è (—á—É—Ç–ª–∏–≤—ñ –ø–æ—Ä–æ–≥–∏, –∞–ª–µ –Ω–µ ¬´—ñ—Å—Ç–µ—Ä–∏—á–Ω—ñ¬ª)
        # —Å–ø–µ—Ä—à—É ‚Äî –∞–Ω–æ–º–∞–ª—å–Ω—ñ —Å–ø–∞–π–∫–∏ –æ–± º—î–º—É
        if zscore >= 2.5 or ratio >= 2.2:
            level, score = "very_high", 5.0
        elif zscore >= 1.5 or ratio >= 1.6:
            level, score = "high", 2.0
        elif ratio <= 0.25:
            level, score = "very_low", -5.0
        elif ratio <= 0.55:
            level, score = "low", -2.0
        else:
            # —è–∫—â–æ —Ñ–æ–Ω–æ–º –º–µ–¥—ñ–∞–Ω–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –ø—Ä–∏–≥–Ω—ñ—á–µ–Ω–∏–π ‚Äî –ø—Ä–∏—Ç–∏—Å–∫–∞—î–º–æ –¥–æ 'low'
            if median_ratio < 0.6 and ratio < 0.9:
                level, score = "low", -1.0
            else:
                level, score = "normal", 0.0

        return {
            "volume": {
                "level": level,
                "score": round(score, 2),
                "average_volume": round(float(v.mean()), 2),
                "recent_volume": round(recent, 2),
                "raw_values": {
                    "ratio": round(ratio, 4),
                    "median_ratio": round(median_ratio, 4),
                    "zscore": round(zscore, 3),
                    "ema20": round(base, 2)
                },
                "last_5_values": v.tail(5).round(2).tolist()
            }
        }

    except Exception as e:
        log_error(f"‚ùå [get_volume_category] –ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
        return {
            "volume": {
                "level": "normal",
                "score": 0.0,
                "average_volume": 0.0,
                "recent_volume": 0.0,
                "raw_values": {"ratio": 0.0, "zscore": 0.0},
                "last_5_values": []
            }
        }

def analyze_volume(symbol):
    """
    üîÑ –°—É–º—ñ—Å–Ω–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è build_monitor_snapshot:
    –ø–æ–≤–µ—Ä—Ç–∞—î {"volume_analysis": {...}} –Ω–∞ –æ—Å–Ω–æ–≤—ñ get_volume_category(...)
    """
    vol = get_volume_category(symbol)
    # –º–∞–ø–∏–º–æ "volume" -> "volume_analysis" –±–µ–∑ –∑–º—ñ–Ω–∏ –∑–º—ñ—Å—Ç—É
    return {
        "volume_analysis": {
            "level":        vol["volume"]["level"],
            "method":       "ema20_ratio_zscore",
            "raw_values":   vol["volume"]["raw_values"],
        }
    }


def detect_rsi_divergence(symbol, interval="5", limit=60):
    """
    üîç RSI-–¥–∏–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó –∑ –≤—ñ–¥–±–æ—Ä–æ–º –ª–æ–∫–∞–ª—å–Ω–∏—Ö –µ–∫—Å—Ç—Ä–µ–º—É–º—ñ–≤ (swing points):
      - —à—É–∫–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –º—ñ–Ω—ñ–º—É–º–∏/–º–∞–∫—Å–∏–º—É–º–∏ —Ü—ñ–Ω–∏ —Ç–∞ —ó—Ö RSI
      - –≤–∏–º–∞–≥–∞—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ —Ç–æ—á–∫–∞–º–∏ (min_sep)
      - –Ω–µ–≤–µ–ª–∏–∫–∏–π tolerance, —â–æ–± –Ω–µ –ª–æ–≤–∏—Ç–∏ ¬´–ø–∏–ª¬ª
    –ü–æ–≤–µ—Ä—Ç–∞—î:
      {"rsi_divergence": {"type": "bullish"/"bearish"/"none", "score": +/-6.0, "raw_values": {...}}}
    """
    try:
        df = get_klines_clean_bybit(symbol, interval=interval, limit=limit)
        if df is None or df.empty or len(df) < 20:
            return {"rsi_divergence": {"type": "none", "score": 0.0, "raw_values": {}}}

        df = df.copy()
        df["close"] = pd.to_numeric(df["close"], errors="coerce")
        df = df.dropna(subset=["close"])
        if df.empty:
            return {"rsi_divergence": {"type": "none", "score": 0.0, "raw_values": {}}}

        rsi = calculate_rsi(df["close"]).fillna(50)
        df["rsi"] = rsi

        # –ª–æ–∫–∞–ª—å–Ω—ñ –µ–∫—Å—Ç—Ä–µ–º—É–º–∏ (–ø—Ä–æ—Å—Ç–∏–π 3-–±–∞—Ä–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥)
        def local_minima(s: pd.Series):
            return (s.shift(1) > s) & (s.shift(-1) > s)

        def local_maxima(s: pd.Series):
            return (s.shift(1) < s) & (s.shift(-1) < s)

        mins_idx = df.index[local_minima(df["close"]).fillna(False)]
        maxs_idx = df.index[local_maxima(df["close"]).fillna(False)]

        # –≤—ñ–∑—å–º–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 6 –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤ –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É
        mins_idx = mins_idx[-6:]
        maxs_idx = maxs_idx[-6:]

        # –≤–∏–º–∞–≥–∞—î–º–æ —Ä–æ–∑–Ω–µ—Å–µ–Ω–Ω—è —Ç–æ—á–æ–∫ —É —á–∞—Å—ñ (–º—ñ–Ω. 3 –±–∞—Ä–∏)
        min_sep = 3
        def filter_sep(idxs):
            kept = []
            for i in idxs:
                if not kept or (i - kept[-1]) >= min_sep:
                    kept.append(i)
            return kept

        mins_idx = filter_sep(list(mins_idx))
        maxs_idx = filter_sep(list(maxs_idx))

        raw = {}

        # === Bullish: price LL, RSI HL
        if len(mins_idx) >= 2:
            i1, i2 = mins_idx[-2], mins_idx[-1]
            p1, p2 = float(df.loc[i1, "close"]), float(df.loc[i2, "close"])
            r1, r2 = float(df.loc[i1, "rsi"]), float(df.loc[i2, "rsi"])

            raw["bullish"] = {
                "low_1": {"idx": int(i1), "price": round(p1, 6), "rsi": round(r1, 2)},
                "low_2": {"idx": int(i2), "price": round(p2, 6), "rsi": round(r2, 2)}
            }

            price_tol = 0.0005 * max(p1, p2)  # ~0.05% —Ç–æ–ª–µ—Ä–∞–Ω—Å
            rsi_tol = 0.5                      # 0.5 –ø—É–Ω–∫—Ç—É RSI

            if (p2 < p1 - price_tol) and (r2 > r1 + rsi_tol):
                return {"rsi_divergence": {"type": "bullish", "score": 6.0, "raw_values": raw["bullish"]}}

        # === Bearish: price HH, RSI LH
        if len(maxs_idx) >= 2:
            j1, j2 = maxs_idx[-2], maxs_idx[-1]
            p1, p2 = float(df.loc[j1, "close"]), float(df.loc[j2, "close"])
            r1, r2 = float(df.loc[j1, "rsi"]), float(df.loc[j2, "rsi"])

            raw["bearish"] = {
                "high_1": {"idx": int(j1), "price": round(p1, 6), "rsi": round(r1, 2)},
                "high_2": {"idx": int(j2), "price": round(p2, 6), "rsi": round(r2, 2)}
            }

            price_tol = 0.0005 * max(p1, p2)
            rsi_tol = 0.5

            if (p2 > p1 + price_tol) and (r2 < r1 - rsi_tol):
                return {"rsi_divergence": {"type": "bearish", "score": -6.0, "raw_values": raw["bearish"]}}

        return {"rsi_divergence": {"type": "none", "score": 0.0, "raw_values": raw}}

    except Exception as e:
        log_message(f"‚ö†Ô∏è [detect_rsi_divergence] –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑ –≤–∏–Ω—è—Ç–∫–æ–º –¥–ª—è {symbol}: {e}")
        return {"rsi_divergence": {"type": "none", "score": 0.0, "raw_values": {}}}
