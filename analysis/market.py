# analysis/market.py

import os
import requests
import datetime
import pandas as pd
import numpy as np
import talib
from dotenv import load_dotenv
from config import client
from utils.tools import get_current_futures_price
from config import VOLUME_THRESHOLDS
from utils.logger import log_message, log_error
from utils.logger import log_error
from utils.telegram_bot import send_telegram_message
from openai import OpenAI

from analysis.sentiment import get_crypto_news, get_news_sentiment
from analysis.whales import get_whale_data
import json
import os
import time

from utils.get_klines_bybit import get_klines_clean_bybit
import openai
from pybit.unified_trading import HTTP
openai.api_key = os.getenv("OPENAI_API_KEY")


# üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—é—á—ñ–≤ —ñ–∑ .env
load_dotenv()
BYBIT_API_KEY = os.getenv("BYBIT_API_KEY")
BYBIT_API_SECRET = os.getenv("BYBIT_API_SECRET")


def get_order_book_top(symbol, depth=10):
    """
    üìä –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø–æ–≤–∏—Ö bid/ask —ñ–∑ –æ—Ä–¥–µ—Ä–±—É–∫–∞ —Ç–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è DICT –¥–ª—è SignalStats.
    """
    try:
        response = client.get_orderbook(
            category="linear",
            symbol=symbol,
            limit=depth
        )

        if response.get("retCode", 0) != 0:
            msg = f"‚ö†Ô∏è Order book –ø–æ–º–∏–ª–∫–∞: {response.get('retMsg')}"
           
            result = {
                "order_book": {
                    "status": "error",
                    "message": msg,
                    "bids": [],
                    "asks": [],
                    "top_bid": {},
                    "top_ask": {}
                }
            }
          
            return result

        bids = response["result"]["bids"][:depth]
        asks = response["result"]["asks"][:depth]

        top_bid = {
            "price": float(bids[0][0]),
            "volume": float(bids[0][1])
        } if bids else {}

        top_ask = {
            "price": float(asks[0][0]),
            "volume": float(asks[0][1])
        } if asks else {}

        result = {
            "order_book": {
                "status": "ok",
                "bids": [{"price": float(b[0]), "volume": float(b[1])} for b in bids],
                "asks": [{"price": float(a[0]), "volume": float(a[1])} for a in asks],
                "top_bid": top_bid,
                "top_ask": top_ask
            }
        }
       
        return result

    except Exception as e:
        error_msg = f"‚ùå get_order_book_top –ø–æ–º–∏–ª–∫–∞: {e}"
        log_error(error_msg)
        result = {
            "order_book": {
                "status": "error",
                "message": error_msg,
                "bids": [],
                "asks": [],
                "top_bid": {},
                "top_ask": {}
            }
        }
     
        return result


def get_current_price(symbol):
    """üí∞ –û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ –∑ Bybit Unified API"""
    try:
        response = client.get_tickers(category="linear", symbol=symbol)

        if response.get("retCode", 0) != 0:
            log_error(f"‚ö†Ô∏è Bad response for {symbol}: {response.get('retMsg')}")
            return None

        result = response.get("result", {})
        if not result or "list" not in result or not result["list"]:
            log_error(f"‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫ —Ü—ñ–Ω –¥–ª—è {symbol}")
            return None

        price = float(result["list"][0]["lastPrice"])
        log_message(f"üí∞ –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ {symbol}: {price:.2f} USDT")
        return price

    except Exception as e:
        log_error(f"‚ùå [get_current_price] {symbol}: {e}")
        return None



def get_top_symbols(min_volume=1_000_000, limit=60):
    try:
        response = client.get_tickers(category="linear")
        if not response or "result" not in response or "list" not in response["result"]:
            log_error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç —ñ–∑ Bybit")
            return []

        symbols = []
        for item in response["result"]["list"]:
            symbol = item.get("symbol")
            volume = float(item.get("turnover24h", 0))

            if not symbol or not symbol.endswith("USDT"):
                continue

            if volume >= min_volume:
                symbols.append({"symbol": symbol, "volume": volume})

        sorted_symbols = sorted(symbols, key=lambda x: x["volume"], reverse=True)
        top_symbols = [s["symbol"] for s in sorted_symbols[:limit]]
    
        return top_symbols

    except Exception as e:
        log_error(f"‚ùå get_top_symbols –ø–æ–º–∏–ª–∫–∞: {e}")
        return []


import time


TREND_CACHE = {}

def analyze_market(symbol: str, market_type: str = "spot") -> dict | None:
    """
    üì° –ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω—É (–≤–∏–∑–Ω–∞—á–∞—î –ª–∏—à–µ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ç—Ä–µ–Ω–¥ —Ç–æ–∫–µ–Ω—É)
    """
    try:
        log_message(f"üì° –ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É –¥–ª—è {symbol}")

        intervals = ["1h", "15m", "5m"]
        df = None

        # === –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –∫—ñ–ª—å–∫–æ—Ö —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ ===
        for interval in intervals:
            df = get_klines_clean_bybit(symbol, interval=interval, limit=300)
            if df is not None and not df.empty and len(df) >= 50:
                log_message(f"‚úÖ –î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ –¥–ª—è {symbol} –Ω–∞ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ {interval}")
                break

        if df is None or df.empty:
            # üõ° –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–µ—à, —è–∫—â–æ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞
            cached = TREND_CACHE.get(symbol)
            if cached and (time.time() - cached["timestamp"]) < 300:
                return cached["data"]
            else:
                return None

        # === –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ ===
        df["SMA_50"] = talib.SMA(df["close"], timeperiod=50)
        df["SMA_200"] = talib.SMA(df["close"], timeperiod=200)
        df["CCI"] = talib.CCI(df["high"], df["low"], df["close"], timeperiod=14)
        df["MACD"], df["MACD_Signal"], _ = talib.MACD(df["close"], 12, 26, 9)
        df["ATR"] = talib.ATR(df["high"], df["low"], df["close"], 14)
        df["RSI"] = talib.RSI(df["close"], 14)

        df.fillna(method="ffill", inplace=True)
        df.fillna(method="bfill", inplace=True)
        df.dropna(inplace=True)

        # === –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ ===
        votes_bullish, votes_bearish = 0, 0

        sma_50, sma_200 = df["SMA_50"].iloc[-1], df["SMA_200"].iloc[-1]
        sma_diff_pct = ((sma_50 - sma_200) / max(sma_200, 1e-8)) * 100
        if sma_diff_pct > 1.0: votes_bullish += 1
        elif sma_diff_pct < -1.0: votes_bearish += 1

        macd, macd_sig = df["MACD"].iloc[-1], df["MACD_Signal"].iloc[-1]
        if macd > macd_sig: votes_bullish += 1
        elif macd < macd_sig: votes_bearish += 1

        rsi = df["RSI"].iloc[-1]
        if rsi > 55: votes_bullish += 1
        elif rsi < 45: votes_bearish += 1

        cci = df["CCI"].iloc[-1]
        if cci > 50: votes_bullish += 1
        elif cci < -50: votes_bearish += 1

        # === –ü—ñ–¥—Å—É–º–æ–∫ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è ===
        if votes_bullish >= 3:
            trend = "bullish"
        elif votes_bearish >= 3:
            trend = "bearish"
        else:
            trend = "neutral"

        # === –Ü–Ω—à—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ ===
        atr_level = df["ATR"].iloc[-1]
        volatility = round(df["ATR"].mean() / max(df["close"].mean(), 1e-8) * 100, 2)
        volume_category = analyze_volume(symbol)

        log_message(
            f"üìä {symbol} ‚Üí Trend: {trend}, Votes: {votes_bullish}‚Üë/{votes_bearish}‚Üì, "
            f"MACD: {'bullish' if macd > macd_sig else 'bearish'}, "
            f"RSI: {rsi:.2f}, CCI: {cci:.2f}, ATR: {atr_level:.2f}, "
            f"Volatility: {volatility:.2f}%, Volume: {volume_category}"
        )

        result = {
            "trend": trend,
            "macd_trend": "bullish" if macd > macd_sig else "bearish",
            "cci_signal": "overbought" if cci > 100 else "oversold" if cci < -100 else "neutral",
            "atr_level": atr_level,
            "volatility": volatility,
            "rsi": rsi,
            "volume_category": volume_category
        }

        # === –ö–µ—à—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É ===
        TREND_CACHE[symbol] = {
            "timestamp": time.time(),
            "trend": trend,
            "data": result
        }

        return result

    except Exception as e:
        log_error(f"‚ùå analyze_market –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
        return None



import time

# === –ì–ª–æ–±–∞–ª—å–Ω–∏–π –∫–µ—à –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥—É
GLOBAL_TREND_CACHE = {}

# === –ì–ª–æ–±–∞–ª—å–Ω–∏–π –∫–µ—à —Ç—Ä–µ–Ω–¥—É
GLOBAL_TREND_CACHE = {}

def analyze_global_trend():
    """
    üìà –ê–Ω–∞–ª—ñ–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ä–∏–Ω–∫—É (BTC, ETH, –¢–û–ü-–∞–ª—å—Ç–∏) ‚Äî –≤–∏–∑–Ω–∞—á–∞—î –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Ç—Ä–µ–Ω–¥.
    """
    try:
        coins = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "BNBUSDT", "ADAUSDT"]
        weights = {"BTCUSDT": 0.25, "ETHUSDT": 0.25, "SOLUSDT": 0.16, "BNBUSDT": 0.17, "ADAUSDT": 0.17}
        intervals = ["1h", "15m", "5m"]  # –ü–æ—Ä—è–¥–æ–∫ fallback
        changes = {}
        total_score = 0.0

        for coin in coins:
            coin_change = None

            for interval in intervals:
                df = get_klines_clean_bybit(coin, interval=interval, limit=24)
                if df is not None and not df.empty:
                    start_price = df["close"].iloc[0]
                    end_price = df["close"].iloc[-1]
                    pct_change = ((end_price - start_price) / start_price) * 100
                    coin_change = round(pct_change, 2)
                    log_message(f"üìä {coin} [{interval}]: {coin_change:.2f}%")
                    break  # ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ø–µ—Ä—à–∏–π –¥–æ—Å—Ç—É–ø–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –∑ –¥–∞–Ω–∏–º–∏
                else:
                    log_message(f"‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è {coin} –Ω–∞ {interval}")

            if coin_change is not None:
                changes[coin] = coin_change
                total_score += coin_change * weights.get(coin, 0.1)
            else:
                log_message(f"‚ö†Ô∏è {coin} –ø—Ä–æ–ø—É—â–µ–Ω–æ ‚Äî –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –Ω–∞ –≤—Å—ñ—Ö —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∞—Ö.")

        # === –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–ø—Ä—è–º–∫—É
        if total_score > 0.7:
            direction = "bullish"
        elif total_score < -0.7:
            direction = "bearish"
        else:
            direction = "neutral"

        result = {
            "global_trend": {
                "direction": direction,
                "score": round(total_score, 2),
                "raw_values": changes
            }
        }

        log_message(f"üåç –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Ç—Ä–µ–Ω–¥: {direction.upper()} | Score: {round(total_score, 2)} | –ó–º—ñ–Ω–∏: {changes}")

        # === –ö–µ—à—É–≤–∞–Ω–Ω—è
        GLOBAL_TREND_CACHE["last"] = {
            "timestamp": time.time(),
            "data": result
        }

        return result

    except Exception as e:
        log_error(f"‚ùå analyze_global_trend –ø–æ–º–∏–ª–∫–∞: {e}")

        # üõ° –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–µ—à, —è–∫—â–æ —î
        cached = GLOBAL_TREND_CACHE.get("last")
        if cached and (time.time() - cached["timestamp"]) < 300:
            log_message("‚ôªÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∫–µ—à–æ–≤–∞–Ω–∏–π –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Ç—Ä–µ–Ω–¥.")
            return cached["data"]

        # üì¶ –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ neutral —è–∫ fallback
        return {
            "global_trend": {
                "direction": "neutral",
                "score": 0.0,
                "raw_values": {}
            }
        }


def analyze_volume(symbol):
    """
    üìä Safe –∞–Ω–∞–ª—ñ–∑ –æ–±—Å—è–≥—É —Ç–æ—Ä–≥—ñ–≤ —ñ–∑ —Ñ–æ–∫—É—Å–æ–º –Ω–∞ Bybit.
    - –û—Å–Ω–æ–≤–Ω–∏–π —à–ª—è—Ö: –ø–æ —Å–≤—ñ—á–∫–∞—Ö (ratio –ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥–æ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ).
    - Fallback: Bybit tickers ‚Üí turnover24hUsd.
    - –ñ–æ–¥–Ω–∏—Ö min_binance_volume. –ì–Ω—É—á–∫—ñ –¥–µ—Ñ–æ–ª—Ç–∏, —è–∫—â–æ –≤ –∫–æ–Ω—Ñ—ñ–≥—É –Ω–µ–º–∞—î –∫–ª—é—á—ñ–≤.
    –ü–æ–≤–µ—Ä—Ç–∞—î: {"volume_analysis": {"level": "...", "method": "...", "raw_values": {...}}}
    """
    try:
        always_active = ["BTCUSDT", "ETHUSDT", "SOLUSDT"]
        thresholds = VOLUME_THRESHOLDS if 'VOLUME_THRESHOLDS' in globals() else {}

        # --- –¥–µ—Ñ–æ–ª—Ç–∏ –¥–ª—è ratio ---
        very_high_ratio = float(thresholds.get("very_high_ratio", 3.0))
        high_ratio      = float(thresholds.get("high_ratio", 1.8))
        low_ratio       = float(thresholds.get("low_ratio", 0.6))
        very_low_ratio  = float(thresholds.get("very_low_ratio", 0.35))

        # --- –¥–µ—Ñ–æ–ª—Ç–∏ –¥–ª—è fallback turnover (USD, 24h) ---
        # —è–∫—â–æ —Ö–æ—á–µ—à ‚Äî –∑–∞–¥–∞–π —Ü–µ —É –∫–æ–Ω—Ñ—ñ–≥—É —è–∫:
        # VOLUME_THRESHOLDS = {"turnover_usd": {"very_high": 100_000_000, "high": 50_000_000, "normal": 10_000_000, "low": 1_000_000}, ...}
        turnover_cfg = thresholds.get("turnover_usd", {})
        to_vhigh  = float(turnover_cfg.get("very_high", 100_000_000))  # >= 100M
        to_high   = float(turnover_cfg.get("high",       50_000_000))  # >= 50M
        to_norm   = float(turnover_cfg.get("normal",     10_000_000))  # >= 10M
        to_low    = float(turnover_cfg.get("low",         1_000_000))  # < 10M ‚Üí low/very_low

        # --- –æ—Å–Ω–æ–≤–Ω–∏–π —à–ª—è—Ö: –∑–∞ —Å–≤—ñ—á–∫–∞–º–∏ Bybit ---
        df = get_klines_clean_bybit(symbol, interval="1h", limit=50)
        if df is not None and not df.empty and "volume" in df.columns:
            df["volume"] = pd.to_numeric(df["volume"], errors="coerce")
            df.dropna(inplace=True)

            if len(df) >= 5:
                current_volume = float(df["volume"].iloc[-1])
                avg_volume = float(df["volume"].iloc[:-1].rolling(window=20).mean().iloc[-1])

                if not (avg_volume > 0):
                    fallback_level = "normal" if symbol in always_active else "very_low"
                    return {
                        "volume_analysis": {
                            "level": fallback_level,
                            "method": "avg_volume_nan",
                            "raw_values": {}
                        }
                    }

                ratio = current_volume / avg_volume

                if ratio >= very_high_ratio:
                    level = "very_high"
                elif ratio >= high_ratio:
                    level = "high"
                elif ratio <= very_low_ratio:
                    level = "very_low"
                elif ratio <= low_ratio:
                    level = "low"
                else:
                    level = "normal"

                if symbol in always_active and level == "very_low":
                    level = "normal"
                    log_message(f"‚öñÔ∏è {symbol} ‚Äî —Ç–æ–ø –º–æ–Ω–µ—Ç–∞, very_low ‚Üí normal (–ø—Ä–æ—â–µ–Ω–æ)")

                log_message(f"üìä –û–± º—î–º {symbol}: –ü–æ—Ç–æ—á–Ω–∏–π={current_volume:.0f}, "
                            f"–°–µ—Ä–µ–¥–Ω—ñ–π={avg_volume:.0f}, Ratio={ratio:.2f} ‚Üí {level}")
                return {
                    "volume_analysis": {
                        "level": level,
                        "method": "standard",
                        "raw_values": {
                            "current_volume": round(current_volume, 2),
                            "average_volume": round(avg_volume, 2),
                            "ratio": round(ratio, 4)
                        }
                    }
                }

            # –¥–∞–Ω–∏—Ö –∑–∞–º–∞–ª–æ ‚Üí –≤–ø–∞–¥–µ–º–æ —É fallback –Ω–∏–∂—á–µ
        else:
            log_message(f"‚ÑπÔ∏è {symbol}: –Ω–µ–º–∞—î –≤–∞–ª—ñ–¥–Ω–∏—Ö —Å–≤—ñ—á–æ–∫ –¥–ª—è –æ–±—Å—è–≥—É ‚Üí fallback –Ω–∞ tickers")

        # --- Fallback: Bybit tickers (turnover24hUsd) ---
        try:
            response = client.get_tickers(category="linear", symbol=symbol)
            data = response.get("result", {}).get("list", [])
            if not data:
                raise ValueError("Empty API list")

            t = data[0]
            # Bybit —ñ–Ω–∫–æ–ª–∏ –≤—ñ–¥–¥–∞—î 'turnover24h' —É COIN-–¥–µ–Ω–æ–º—ñ–Ω–∞—Ü—ñ—ó; –±–µ—Ä–µ–º–æ USD, —è–∫—â–æ —î
            turnover_usd = float(t.get("turnover24hUsd") or t.get("turnover24h") or 0.0)

            if turnover_usd >= to_vhigh:
                level = "very_high"
            elif turnover_usd >= to_high:
                level = "high"
            elif turnover_usd >= to_norm:
                level = "normal"
            else:
                level = "low" if symbol in always_active else "very_low"

            log_message(f"üìä Fallback {symbol}: turnover24hUsd={turnover_usd:.0f} ‚Üí {level}")
            return {
                "volume_analysis": {
                    "level": level,
                    "method": "fallback_api",
                    "raw_values": {"turnover24hUsd": round(turnover_usd, 2)}
                }
            }

        except Exception as api_error:
            log_error(f"‚ùå Fallback API –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {api_error}")
            return {
                "volume_analysis": {
                    "level": "very_low",
                    "method": "fallback_api_error",
                    "raw_values": {}
                }
            }

    except Exception as e:
        log_error(f"‚ùå analyze_volume() –≥–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
        return {
            "volume_analysis": {
                "level": "very_low",
                "method": "exception",
                "raw_values": {}
            }
        }



def get_market_overview_for_gpt():
    try:
        def get_daily_price_change(symbol):
            df = get_klines_clean_bybit(symbol, interval="1h", limit=24)
            if df is None or df.empty:
                return 0
            open_price = df.iloc[0]["open"]
            close_price = df.iloc[-1]["close"]
            change = ((close_price - open_price) / open_price) * 100
            return round(change, 2)

        btc_price = get_current_futures_price("BTCUSDT")
        eth_price = get_current_futures_price("ETHUSDT")

        btc_change = get_daily_price_change("BTCUSDT")
        eth_change = get_daily_price_change("ETHUSDT")

        global_trend = analyze_global_trend()
        whale_info = get_whale_data()
        sentiment = get_news_sentiment("BTCUSDT")
        news = get_crypto_news(limit=3)

        whale_summary = whale_info.get("summary", "–Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö")
        formatted_news = "\n".join(
            [f"- {n['title']} ({n.get('sentiment', 'neutral')})" for n in news]
        )

        overview_text = (
            f"üìä BTC: {btc_change}% | ETH: {eth_change}% | –¢—Ä–µ–Ω–¥ —Ä–∏–Ω–∫—É: {global_trend}\n"
            f"üêã Whale-–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {whale_summary}\n"
            f"üì∞ –°–µ–Ω—Ç–∏–º–µ–Ω—Ç –Ω–æ–≤–∏–Ω (BTC): {sentiment}\n"
            f"üìö –ù–æ–≤–∏–Ω–∏:\n{formatted_news if formatted_news else '–Ω–µ–º–∞—î –Ω–æ–≤–∏–Ω'}"
        )

        return {
            "btc_change": btc_change,
            "eth_change": eth_change,
            "btc_price": btc_price,
            "eth_price": eth_price,
            "market_trend": global_trend,
            "overview_text": overview_text
        }

    except Exception as e:
        return {
            "btc_change": 0,
            "eth_change": 0,
            "btc_price": "?",
            "eth_price": "?",
            "market_trend": "UNKNOWN",
            "overview_text": f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–≥–ª—è–¥ —Ä–∏–Ω–∫—É: {e}"
        }



NEWS_SIGNAL_PATH = "data/latest_news_signal.json"

def get_news_trend_summary():
    """
    üì∞ –û—Ç—Ä–∏–º—É—î –∫–æ—Ä–æ—Ç–∫–∏–π –ø—ñ–¥—Å—É–º–æ–∫ GPT-–Ω–æ–≤–∏–Ω –¥–ª—è SignalStats.
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π dict.
    """
    try:
        if not os.path.exists(NEWS_SIGNAL_PATH):
            log_message("üì∞ DEBUG: NEWS_SIGNAL_PATH –Ω–µ —ñ—Å–Ω—É—î.")
            result = {
                "news_summary": {
                    "status": "no_data",
                    "trend": "unknown",
                    "reason": "–ù–æ–≤–∏–Ω –Ω–µ–º–∞—î.",
                    "hours_ago": None
                }
            }
         
            return result

        with open(NEWS_SIGNAL_PATH, "r", encoding="utf-8") as f:
            data = json.load(f)

        timestamp = data.get("timestamp", 0)
        hours_ago = round((time.time() - timestamp) / 3600, 2)
        trend = data.get("trend", "UNKNOWN")
        reason = data.get("reason", "–ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è")

        if hours_ago > 3:
            status = "stale"
            summary_text = f"‚ö†Ô∏è –ù–æ–≤–∏–Ω–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ (>{int(hours_ago)} –≥–æ–¥.) | –¢—Ä–µ–Ω–¥: {trend} | –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        else:
            status = "fresh"
            summary_text = f"üì∞ GPT-–Ω–æ–≤–∏–Ω–∏: {trend} | {reason}"

        log_message(f"üì∞ DEBUG get_news_trend_summary() ‚Üí {summary_text}")

        result = {
            "news_summary": {
                "status": status,
                "trend": trend,
                "reason": reason,
                "hours_ago": hours_ago
            }
        }
      
        return result

    except Exception as e:
        error_msg = f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω: {e}"
        log_error(f"‚ùå get_news_trend_summary() –ø–æ–º–∏–ª–∫–∞: {e}")
        result = {
            "news_summary": {
                "status": "error",
                "trend": "unknown",
                "reason": error_msg,
                "hours_ago": 0.0
            }
        }
  
        return result
