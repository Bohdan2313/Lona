# analysis/sentiment.py

import os
import time
import datetime
import requests
from utils.logger import log_message, log_error
# –ó–º—ñ–Ω–Ω—ñ –∫–µ—à—É
last_news_update = 0
cached_news = []


def get_crypto_news(limit=None):
    """
    üì¢ –û—Ç—Ä–∏–º—É—î –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –∑ CryptoPanic API —Ç–∞ –≤–∏–∑–Ω–∞—á–∞—î —Ä–∏–Ω–∫–æ–≤–∏–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç (–∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é limit).
    –ó–∞—Ö–∏—â–µ–Ω–æ –≤—ñ–¥ –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ–≥–æ –∫–µ—à—É.
    """
    global last_news_update, cached_news

    API_KEY = os.getenv("CRYPTOPANIC_API_KEY")
    if not API_KEY:
        log_error("‚ùå API –∫–ª—é—á –¥–ª—è CryptoPanic –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return []

    url = f"https://cryptopanic.com/api/developer/v2/posts/?auth_token={API_KEY}"

    # ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à
    if time.time() - last_news_update < 3600:
        log_message("üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –Ω–æ–≤–∏–Ω–∏.")
        if isinstance(cached_news, list) and all(isinstance(n, dict) for n in cached_news):
            return cached_news[:limit] if limit else cached_news
        else:
            log_error("‚ö†Ô∏è –ö–µ—à–æ–≤–∞–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –ø–æ—à–∫–æ–¥–∂–µ–Ω—ñ –∞–±–æ –º–∞—é—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –û—á–∏—â–∞—î–º–æ.")
            cached_news = []

    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        time.sleep(1)

        data = response.json()
        if "results" not in data or not data["results"]:
            log_message("‚ö™ –ù–æ–≤–∏–Ω–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ.")
            return []

        news_list = []
        bullish_news = 0
        bearish_news = 0

        for news in data["results"]:
            title = news.get("title", "").lower()
            sentiment = "neutral"

            if any(word in title for word in ["bullish", "rally", "breakout", "surge", "record high", "skyrocket", "partnership", "announcement"]):
                sentiment = "bullish"
                bullish_news += 1
            elif any(word in title for word in ["crash", "collapse", "bearish", "sell-off", "hacked", "scam", "exploit"]):
                sentiment = "bearish"
                bearish_news += 1

            news_list.append({"title": title, "sentiment": sentiment})

        log_message(f"üì∞ –û—Ç—Ä–∏–º–∞–Ω–æ {len(news_list)} –Ω–æ–≤–∏–Ω: {bullish_news} bullish / {bearish_news} bearish")

        # üîê –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ª–æ–≥
        with open("crypto_news.log", "a", encoding="utf-8", errors="ignore") as log_file:
            log_file.write(f"{datetime.datetime.now()} | Bullish: {bullish_news} | Bearish: {bearish_news}\n")
            for item in news_list:
                log_file.write(f"{item['sentiment'].upper()} | {item['title']}\n")

        # üß† –û–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
        cached_news = news_list
        last_news_update = time.time()

        return news_list[:limit] if limit else news_list

    except requests.exceptions.RequestException as e:
        log_error(f"‚ùå –ó–∞–ø–∏—Ç –¥–æ CryptoPanic –Ω–µ –≤–¥–∞–≤—Å—è: {e}")
    except ValueError:
        log_error("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ CryptoPanic API.")
    except Exception as e:
        log_error(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ get_crypto_news(): {e}")

    return []



def get_news_sentiment(symbol):
    """üìà –í–∏–∑–Ω–∞—á–∞—î –Ω–∞—Å—Ç—Ä—ñ–π –Ω–æ–≤–∏–Ω –ø–æ —Å–∏–º–≤–æ–ª—É"""
    try:
        if not os.path.exists("crypto_news.log"):
            log_error("‚ùå –§–∞–π–ª –Ω–æ–≤–∏–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return "neutral"

        with open("crypto_news.log", "r", encoding="utf-8", errors="ignore") as f:
            news = f.readlines()

        score = 0
        count = 0

        for line in reversed(news):
            line_lower = line.lower()
            if symbol.lower() in line_lower:
                if "bullish" in line_lower:
                    score += 1
                    count += 1
                elif "bearish" in line_lower:
                    score -= 1
                    count += 1

                if count >= 10:
                    break

        if count == 0:
            return "neutral"

        avg_score = score / count
        if avg_score > 0.3:
            return "positive"
        elif avg_score < -0.3:
            return "negative"
        else:
            return "neutral"

    except Exception as e:
        log_error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –Ω–æ–≤–∏–Ω: {e}")
        return "neutral"

