# analysis/whales.py

import os
import requests
from utils.logger import log_message, log_error
from utils.get_klines_bybit import get_klines_clean_bybit
from dotenv import load_dotenv
from config import bybit


load_dotenv()


def get_whale_alert_data(min_value=100000):
    """
    üìä –û—Ç—Ä–∏–º—É—î –≤–µ–ª–∏–∫—ñ –∫–∏—Ç–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —á–µ—Ä–µ–∑ Whale Alert API.
    """
    API_KEY = os.getenv("WHALE_ALERT_API_KEY")
    url = f"https://api.whale-alert.io/v1/transactions?api_key={API_KEY}&min_value={min_value}"

    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        data = response.json()
        if "transactions" in data and data["transactions"]:
            log_message(f"‚úÖ Whale Alert: {len(data['transactions'])} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return {"status": "ok", "transactions": data["transactions"]}
        else:
            log_message("‚ö†Ô∏è Whale Alert: —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return {"status": "no_transactions", "transactions": []}

    except requests.exceptions.Timeout:
        log_error("‚è≥ Whale Alert API —Ç–∞–π–º–∞—É—Ç.")
    except requests.exceptions.RequestException as e:
        log_error(f"‚ö†Ô∏è Whale Alert API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
    except Exception as e:
        log_error(f"‚ùå Whale Alert –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ
    return {"status": "error", "transactions": []}




def get_whale_score(symbol="BTCUSDT"):
    """
    üìà –ì–µ–Ω–µ—Ä—É—î –∫–∏—Ç–æ–≤–∏–π –±–∞–ª –¥–ª—è —Å–∏–º–≤–æ–ª—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ Whale Alert.
    """
    try:
        data = get_whale_data(symbol)
        alert_count = len(data.get("whale_alert", {}).get("transactions", []))
        total = alert_count

        score = min(round(alert_count * 3), 100)

        if not isinstance(score, (int, float)):
            log_error(f"‚ùå Whale Score –¥–ª—è {symbol} –Ω–µ —á–∏—Å–ª–æ: {score}. –ü—Ä–∏—Å–≤–æ—é—î–º–æ 0.")
            score = 0

        log_message(f"üê≥ Whale Score –¥–ª—è {symbol}: {score} (Alert={alert_count})")

        return {
            "whale_score": {
                "score": score,
                "raw_values": {
                    "whale_alert_count": alert_count,
                    "total_events": total
                }
            }
        }

    except Exception as e:
        log_error(f"‚ùå get_whale_score –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
        return {
            "whale_score": {
                "score": 0,
                "raw_values": {}
            }
        }


def get_whale_data(symbol="BTCUSDT"):
    """
    üîç –û—Ç—Ä–∏–º—É—î –∫–∏—Ç–æ–≤—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –ª–∏—à–µ –∑ Whale Alert.
    """
    try:
        log_message(f"üì° –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∏—Ç–æ–≤–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è {symbol}")
        whale_alert_data = get_whale_alert_data()
        return {
            "whale_alert": whale_alert_data
        }
    except Exception as e:
        log_error(f"‚ùå get_whale_data –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
        return {
            "whale_alert": {"status": "error", "transactions": []}
        }
