import json
import time
import os
from datetime import datetime
from utils.logger import log_message, log_error
from ai.gpt_engine import ask_gpt
from analysis.market import get_market_overview_for_gpt, get_crypto_news

NEWS_SIGNAL_PATH = "data/latest_news_signal.json"
SENTIMENT_PATH = "data/market_sentiment.json"

SYSTEM_PROMPT = """
–¢–∏ ‚Äî AI-–∞–Ω–∞–ª—ñ—Ç–∏–∫ –∫—Ä–∏–ø—Ç–æ—Ä–∏–Ω–∫—É. –ê–Ω–∞–ª—ñ–∑—É–π —Ç—ñ–ª—å–∫–∏ –Ω–æ–≤–∏–Ω–∏ —Ç–∞ –æ—Ü—ñ–Ω—é–π –∑–∞–≥–∞–ª—å–Ω–∏–π –Ω–æ–≤–∏–Ω–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π —Ä–∏–Ω–∫—É.

‚úÖ –§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
trend: BULLISH / BEARISH / NEUTRAL
reason: –¥—É–∂–µ –∫–æ—Ä–æ—Ç–∫–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è (1-2 —Ä–µ—á–µ–Ω–Ω—è), —á–æ–º—É —Å–∞–º–µ —Ç–∞–∫–∏–π —Ç—Ä–µ–Ω–¥.

üìå –í–∞–∂–ª–∏–≤–æ:
- –ù–ï –≤—Ä–∞—Ö–æ–≤—É–π —Ü—ñ–Ω–∏ BTC/ETH, –æ–±—Å—è–≥–∏, —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏.
- –û—Ü—ñ–Ω—é–π —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω (–ø–æ–∑–∏—Ç–∏–≤–Ω—ñ, –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ —á–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ñ).
"""


def analyze_news_with_gpt(news_list):
    try:
        if not isinstance(news_list, list) or not all(isinstance(n, dict) for n in news_list):
            raise ValueError("news_list –º–∞—î –±—É—Ç–∏ —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∑ –ø–æ–ª–µ–º 'title' —Ç–∞ 'sentiment'")

        if not news_list:
            return {"trend": "NEUTRAL", "reason": "–ù–æ–≤–∏–Ω–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ."}

        titles = [f"- {n.get('title', 'No title')} ({n.get('sentiment', 'neutral')})" for n in news_list[:20]]

        prompt = (
            "–û—Å—å –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –∫—Ä–∏–ø—Ç–æ—Ä–∏–Ω–∫—É:\n" +
            "\n".join(titles) +
            "\n\nüîç –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω —Ç–∞ –æ—Ü—ñ–Ω–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π –Ω–æ–≤–∏–Ω–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π —Ä–∏–Ω–∫—É.\n"
            "–§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:\ntrend: BULLISH / BEARISH / NEUTRAL\nreason: –∫–æ—Ä–æ—Ç–∫–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è."
        )

        log_message("üì∞ [GPT-News] –ê–Ω–∞–ª—ñ–∑ –Ω–æ–≤–∏–Ω GPT...")
        response = ask_gpt(prompt, system_prompt=SYSTEM_PROMPT)
        log_message(f"üì¨ –í—ñ–¥–ø–æ–≤—ñ–¥—å GPT: {response}")

        if not response.strip():
            log_message("‚ö†Ô∏è GPT –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ NEUTRAL.")
            response = "trend: NEUTRAL\nreason: GPT –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å."

        result = {"trend": "NEUTRAL", "reason": "GPT –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–≤"}
        for line in response.splitlines():
            if "trend:" in line.lower():
                trend_value = line.split(":", 1)[1].strip().upper()
                if trend_value not in ["BULLISH", "BEARISH", "NEUTRAL"]:
                    trend_value = "NEUTRAL"  # fallback, —è–∫—â–æ GPT –≤–∏–¥–∞–≤ —â–æ—Å—å —ñ–Ω—à–µ
                result["trend"] = trend_value
            elif "reason:" in line.lower():
                reason_text = line.split(":", 1)[1].strip()
                result["reason"] = reason_text

        os.makedirs("data", exist_ok=True)
        with open(NEWS_SIGNAL_PATH, "w", encoding="utf-8") as f:
            json.dump({"timestamp": time.time(), **result}, f, indent=2)

        with open(SENTIMENT_PATH, "w", encoding="utf-8") as f:
            json.dump({"timestamp": time.time(), **result}, f, indent=2)

        return result

    except Exception as e:
        log_error(f"‚ùå GPT –∞–Ω–∞–ª—ñ–∑ –Ω–æ–≤–∏–Ω ‚Äî –ø–æ–º–∏–ª–∫–∞: {e}")
        return {"trend": "NEUTRAL", "reason": "–ü–æ–º–∏–ª–∫–∞ GPT"}


def run_news_analyzer(interval_minutes=5):
    while True:
        try:
            log_message("üîÑ GPT News Analyzer: –Ω–æ–≤–∏–π —Ü–∏–∫–ª")
            news = get_crypto_news()

            result = analyze_news_with_gpt(news)
            log_message(f"üìä –¢—Ä–µ–Ω–¥: {result['trend']} | –ü—Ä–∏—á–∏–Ω–∞: {result['reason']}")

        except Exception as e:
            log_error(f"‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ GPT Analyzer: {e}")

        time.sleep(interval_minutes * 60)

if __name__ == "__main__":
    run_news_analyzer()
