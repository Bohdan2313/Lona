import os
import json
import numpy as np
import joblib
from keras.models import load_model
from utils.get_klines_bybit import get_klines_clean_bybit
from utils.logger import log_message, log_error
from config import SKIP_1000_TOKENS  # ‚úÖ –Ω–æ–≤–∏–π –ø—Ä–∞–ø–æ—Ä

LOOKBACK = 60

def predict_lstm(symbol):
    try:
        model_path = f"models/lstm_{symbol}.keras"  # ‚úÖ –Ω–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç
        scaler_path = f"models/scaler_{symbol}.pkl"

        if not os.path.exists(model_path) or not os.path.exists(scaler_path):
            log_message(f"‚ö†Ô∏è –ù–µ–º–∞—î –º–æ–¥–µ–ª—ñ –∞–±–æ scaler –¥–ª—è {symbol}. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.")
            return None

        model = load_model(model_path)
        scaler = joblib.load(scaler_path)

        df = get_klines_clean_bybit(symbol, interval="1h", limit=150)
        if df is None or len(df) < LOOKBACK + 1:
            log_message(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}")
            return None

        df["hlc_avg"] = (df["high"] + df["low"] + df["close"]) / 3
        df = df[["hlc_avg", "volume"]].copy()
        scaled = scaler.transform(df)

        last_seq = scaled[-LOOKBACK:]
        X_input = np.array(last_seq).reshape(1, LOOKBACK, 2)

        predicted_pct_change = model.predict(X_input)[0][0] * 100

        if abs(predicted_pct_change) > 20:
            log_message(f"‚ö†Ô∏è {symbol}: LSTM –ø—Ä–æ–≥–Ω–æ–∑ ¬±{predicted_pct_change:.2f}% ‚Äî –∑–∞–Ω–∞–¥—Ç–æ –µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∏–π")
            return None

        log_message(f"üìà {symbol}: LSTM –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 1 –≥–æ–¥: {predicted_pct_change:+.2f}%")
        return predicted_pct_change

    except Exception as e:
        log_error(f"‚ùå LSTM –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
        return None

if __name__ == "__main__":
    symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "BNBUSDT"]
    if SKIP_1000_TOKENS:
        symbols = [s for s in symbols if not s.startswith("1000")]
        log_message(f"üßπ –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ç–æ–∫–µ–Ω–∏ –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º 1000*, –∑–∞–ª–∏—à–∏–ª–æ—Å—å {len(symbols)} –º–æ–Ω–µ—Ç")

    results = {}
    for symbol in symbols:
        prediction = predict_lstm(symbol)
        if prediction is not None:
            results[symbol] = prediction

    with open("lstm_predictions.json", "w") as f:
        json.dump(results, f, indent=2)

    log_message("‚úÖ –ü—Ä–æ–≥–Ω–æ–∑–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É lstm_predictions.json")
