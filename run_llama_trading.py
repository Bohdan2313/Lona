# üìÅ –§–∞–π–ª: run_llama_trading.py

import time
from datetime import datetime
from trading.scalping import find_best_scalping_targets

from utils.logger import log_message, log_error
import json
import os
from config import bybit
from config import MAX_ACTIVE_TRADES
from trading.scalping import execute_scalping_trade
from config import TRADING_CYCLE_PAUSE, MANUAL_BALANCE
from utils.tools import get_current_futures_price
from config import ACTIVE_TRADES_FILE
from utils.logger import get_active_trades
import threading
from trading.scalping import monitor_all_open_trades
from analysis.signal_analysis import analyze_signal_stats 
from utils.logger import sanitize_signals
from trading.scalping import monitor_watchlist_candidate
import traceback
import threading


# === –†–µ—î—Å—Ç—Ä–∏ –ø–æ—Ç–æ–∫—ñ–≤ ===
# –ü–æ—Ç–æ–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö —É–≥–æ–¥ (–∫–ª—é—á = trade_id)
active_threads: dict[str, threading.Thread] = {}
# –§–æ–Ω–æ–≤—ñ –¥–µ–º–æ–Ω–∏ (–º–æ–Ω—ñ—Ç–æ—Ä –±—ñ—Ä–∂—ñ, –≤–æ—á–ª—ñ—Å—Ç —Ç–æ—â–æ)
bg_threads: dict[str, threading.Thread] = {}

def run_llama_trading_pipeline():
    """
    üöÄ –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –±–∞–≥–∞—Ç—å–æ—Ö —É–≥–æ–¥:
    –í—ñ–¥–±—ñ—Ä –º–æ–Ω–µ—Ç ‚Üí –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ ‚Üí –¢–æ—Ä–≥—ñ–≤–ª—è
    """
    log_message("üö¶ [DEBUG] –°—Ç–∞—Ä—Ç LLaMA Trading Pipeline")

    # üßµ –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö —É–≥–æ–¥ —É —Ñ–æ–Ω–æ–≤–æ–º—É –ø–æ—Ç–æ—Ü—ñ (–æ–¥–∏–Ω —Ä–∞–∑)
    if "monitor_all_open_trades" not in bg_threads:
        t = threading.Thread(target=monitor_all_open_trades, daemon=True)
        t.start()
        bg_threads["monitor_all_open_trades"] = t
        log_message("üßµ [DEBUG] monitor_all_open_trades –∑–∞–ø—É—â–µ–Ω–æ —É —Ñ–æ–Ω—ñ")
    else:
        log_message("üßµ [DEBUG] monitor_all_open_trades –≤–∂–µ –ø—Ä–∞—Ü—é—î ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å—Ç–∞—Ä—Ç")

    # üëÅ –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –º–æ–Ω–µ—Ç –±—ñ–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∑ Watchlist (–æ–¥–∏–Ω —Ä–∞–∑)
    if "monitor_watchlist_candidate" not in bg_threads:
        log_message("üëÅ [DEBUG] –°—Ç–∞—Ä—Ç monitor_watchlist_candidate —É —Ñ–æ–Ω—ñ")
        t = threading.Thread(target=monitor_watchlist_candidate, daemon=True)
        t.start()
        bg_threads["monitor_watchlist_candidate"] = t
    else:
        log_message("üëÅ [DEBUG] monitor_watchlist_candidate –≤–∂–µ –ø—Ä–∞—Ü—é—î ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å—Ç–∞—Ä—Ç")

    log_message("üîÑ [DEBUG] –í—Ö—ñ–¥ —É –≥–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª while True")
    while True:
        try:
            active_trades = get_active_trades()
            active_count = len(active_trades)
            log_message(f"üì¶ [DEBUG] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö —É–≥–æ–¥: {active_count}")

            if active_count >= MAX_ACTIVE_TRADES:
                log_message(f"üõë –í–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–æ {active_count} —É–≥–æ–¥ (–º–∞–∫—Å={MAX_ACTIVE_TRADES})")
                time.sleep(TRADING_CYCLE_PAUSE)
                continue

            log_message("üîç [DEBUG] –ó–∞–ø—É—Å–∫–∞—î–º–æ find_best_scalping_targets()")
            find_best_scalping_targets()
            log_message("üîÅ [DEBUG] –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑ find_best_scalping_targets()")

        except Exception as e:
            log_error(f"‚ùå –í–∏–Ω—è—Ç–æ–∫ —É run_llama_trading_pipeline: {e}\n{traceback.format_exc()}")

        log_message(f"‚è≥ [DEBUG] –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤–∏–º —Ü–∏–∫–ª–æ–º: {TRADING_CYCLE_PAUSE} —Å–µ–∫")
        time.sleep(TRADING_CYCLE_PAUSE)

# –°—Ç–∞—Ä—Ç—É—î–º–æ –ø–∞–π–ø–ª–∞–π–Ω —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É (–Ω–µ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ)
if __name__ == "__main__":
    log_message("‚úÖ MAIN –ó–ê–ü–£–©–ï–ù–û")
    run_llama_trading_pipeline()
