import time
import json
from datetime import datetime
import os
from utils.logger import log_message, log_error
from utils.tools import get_current_futures_price
from config import bybit
import numpy as np
import pandas as pd
from utils.logger import deep_sanitize
from config import USE_MANUAL_LEVERAGE, MANUAL_LEVERAGE


SIDE_BUY = "BUY"
SIDE_SELL = "SELL"

def json_safe(obj):
    """üõ°Ô∏è –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Ä–æ–±–∏—Ç—å –æ–±'—î–∫—Ç –±–µ–∑–ø–µ—á–Ω–∏–º –¥–ª—è JSON"""
    if isinstance(obj, dict):
        return {str(k): json_safe(v) for k, v in obj.items()}
    elif isinstance(obj, list):
        return [json_safe(v) for v in obj]
    elif isinstance(obj, (np.integer, np.floating)):
        return float(obj)
    elif isinstance(obj, (datetime, pd.Timestamp)):
        return obj.isoformat()
    elif isinstance(obj, (int, float, str, bool)) or obj is None:
        return obj
    else:
        return str(obj)

def write_journal_entry(
    symbol, side, leverage, result, gpt_decision,
    signals=None, notes=None, violated_rules=None,
    pnl_result=None, duration_minutes=None, exit_reason=None, exit_price=None,
    llama_reflection=None
):
    journal_file = "logs/ai_journal.json"
    timestamp = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")

    try:
        # üêû Debug –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        log_message("üêû DEBUG write_journal_entry input:\n" + json.dumps(deep_sanitize({
            'symbol': symbol,
            'side': side,
            'leverage': leverage,
            'result': result,
            'gpt_decision': gpt_decision,
            'signals': signals,
            'notes': notes,
            'violated_rules': violated_rules,
            'pnl_result': pnl_result,
            'duration_minutes': duration_minutes,
            'exit_reason': exit_reason,
            'exit_price': exit_price,
            'llama_reflection': llama_reflection
        }), indent=2, ensure_ascii=False))

        # üìù –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
        new_entry = {
            "timestamp": timestamp,
            "symbol": symbol or "N/A",
            "side": side or "N/A",
            "leverage": leverage or "N/A",
            "result": result if isinstance(result, dict) else {"raw_result": str(result)},
            "signals": signals if isinstance(signals, dict) else {"warning": f"signals –Ω–µ dict ({type(signals)})", "raw": str(signals)},
            "gpt_decision": gpt_decision or "N/A",
            "notes": notes or "",
            "violated_rules": violated_rules or [],
            "reflection_used": bool(llama_reflection),
            "llama_reflection": llama_reflection or "‚ö†Ô∏è Reflection –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.",
            "pnl_result": {
                "pnl_percent": pnl_result.get("pnl_percent") if pnl_result else None,
                "exit_price": exit_price,
                "exit_reason": exit_reason,
                "duration_minutes": duration_minutes
            }
        }
        new_entry = deep_sanitize(new_entry)

        log_message("üêû DEBUG journal entry –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å–æ–º:\n" + json.dumps(new_entry, indent=2, ensure_ascii=False))

        # üìñ –ß–∏—Ç–∞—î–º–æ –∂—É—Ä–Ω–∞–ª –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
        if os.path.exists(journal_file):
            try:
                with open(journal_file, "r", encoding="utf-8") as f:
                    journal = json.load(f)
            except Exception as e_read:
                log_error(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∂—É—Ä–Ω–∞–ª—É: {e_read}. –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π.")
                journal = []
        else:
            journal = []

        journal.append(new_entry)
        journal = journal[-500:]  # üßπ –ú–∞–∫—Å–∏–º—É–º 500 –∑–∞–ø–∏—Å—ñ–≤

        with open(journal_file, "w", encoding="utf-8") as f:
            json.dump(journal, f, ensure_ascii=False, indent=2)

        log_message(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –∂—É—Ä–Ω–∞–ª: {symbol} ({side}) ‚Üí PnL: {pnl_result.get('pnl_percent') if pnl_result else 'N/A'}%")

    except Exception as e:
        log_error(f"‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ –∂—É—Ä–Ω–∞–ª: {e}")


def round_qty_bybit(symbol, qty):
    import math
    try:
        info = bybit.get_instruments_info(category="linear", symbol=symbol)
        qty_step = float(info["result"]["list"][0]["lotSizeFilter"]["qtyStep"])
        rounded_qty = math.floor(qty / qty_step) * qty_step
        return round(rounded_qty, 8)
    except Exception as e:
        log_error(f"‚ùå [round_qty_bybit] –ü–æ–º–∏–ª–∫–∞: {e}")
        return round(qty, 8)

def round_price_bybit(symbol, price):
    import math
    try:
        info = bybit.get_instruments_info(category="linear", symbol=symbol)
        tick_size = float(info["result"]["list"][0]["priceFilter"]["tickSize"])
        precision = abs(round(math.log10(tick_size)))
        return round(price, precision)
    except Exception as e:
        log_error(f"‚ùå [round_price_bybit] –ü–æ–º–∏–ª–∫–∞: {e}")
        return price

log_message("üêû DEBUG executor.py —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è")



class OrderExecutor:
    def __init__(self, symbol, side, amount_to_use, target_price=None, position_side=None, leverage=None,
                 bypass_price_check=False, force_take_profit_pct=None):
        self.symbol = symbol
        self.side = side                      # "Buy" –∞–±–æ "Sell"
        self.amount_to_use = float(amount_to_use or 0.0)
        self.target_price = target_price
        self.position_side = (position_side or "LONG").upper()  # "LONG" | "SHORT"
        self.leverage = int(leverage) if leverage is not None else None
        self.force_take_profit_pct = force_take_profit_pct
        self.price = None
        self.quantity = None
        self.bypass_price_check = bool(bypass_price_check)

        if not self.leverage:
            raise Exception("‚ùå Leverage –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–µ –≤ OrderExecutor!")

    # ---------- helpers ----------
    @staticmethod
    def _symbol_clean(s: str) -> str:
        return str(s).split("_")[0]

    def _get_symbol_info(self):
        resp = bybit.get_instruments_info(category="linear", symbol=self._symbol_clean(self.symbol))
        lst = (resp or {}).get("result", {}).get("list", []) or []
        if not lst:
            raise Exception(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ instruments_info –¥–ª—è {self.symbol}")
        return lst[0]

    def _ensure_min_qty(self, qty: float) -> float:
        """–ü—Ä–∏–ª–∏–ø–Ω—É—Ç–∏ –¥–æ –∫—Ä–æ–∫—É qtyStep —ñ –≥–∞—Ä–∞–Ω—Ç—É–≤–∞—Ç–∏ minOrderQty."""
        import math
        info = self._get_symbol_info()
        lot = info.get("lotSizeFilter", {}) or {}
        step = float(lot.get("qtyStep", "0.001"))
        minq = float(lot.get("minOrderQty", "0.001"))
        # –ø—Ä–∏–ª–∏–ø –¥–æ –∫—Ä–æ–∫—É –≤–Ω–∏–∑
        q = math.floor(float(qty) / step) * step
        # –≥–∞—Ä–∞–Ω—Ç—ñ—è –º—ñ–Ω—ñ–º—É–º—É
        if q < minq:
            q = minq
        return q

    # ---------- core ----------
    def prepare_order(self):
        log_message(f"üêû DEBUG prepare_order() –¥–ª—è {self.symbol}")

        # 1) –æ–±—Ä–∞—Ç–∏ —Ü—ñ–Ω—É –≤—Ö–æ–¥—É
        target_price = self.target_price
        if not isinstance(target_price, (int, float)) or target_price <= 0:
            raise Exception(f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ target_price: {target_price}")

        if self.bypass_price_check:
            current_price = get_current_futures_price(self.symbol)
            if not current_price:
                raise Exception(f"‚ùå –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è {self.symbol}")
            self.price = float(current_price)
            log_message(f"üöÄ [Sniper] –í—Ö—ñ–¥ –±–µ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: —Ü—ñ–Ω–∞ {self.price}")
        else:
            tolerance = 0.002  # 0.2%
            current_price = None
            for _ in range(200):
                cp = get_current_futures_price(self.symbol)
                if cp:
                    if abs(cp - target_price) / target_price <= tolerance:
                        current_price = cp
                        break
                time.sleep(3)
            if current_price is None:
                raise Exception(f"‚ùå –¶—ñ–Ω–∞ {target_price} –Ω–µ –¥–æ—Å—è–≥–Ω—É—Ç–∞.")
            self.price = float(current_price)

        # 2) —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ qty –±–µ–∑ –ø–µ—Ä–µ–¥—á–∞—Å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è
        notional_value = float(self.amount_to_use) * float(self.leverage)
        raw_qty = notional_value / float(self.price)

        # 3) –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±—ñ—Ä–∂–æ–≤—ñ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è
        info = self._get_symbol_info()
        lot = info.get("lotSizeFilter", {}) or {}
        minq = float(lot.get("minOrderQty", "0.0"))
        if minq > 0 and raw_qty < minq:
            # –ø–æ—Ä–∞—Ö—É—î–º–æ, —Å–∫—ñ–ª—å–∫–∏ –º–∞—Ä–∂—ñ —Ç—Ä–µ–±–∞ –¥–ª—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
            min_margin_needed = (minq * float(self.price)) / float(self.leverage)
            msg = (f"üõë –°—É–º–∞ {self.amount_to_use} < –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó {min_margin_needed:.6f} USDT "
                   f"–¥–ª—è {self.symbol} (minQty={minq}) ‚Üí –ø—Ä–æ–ø—É—Å–∫ —É–≥–æ–¥–∏")
            log_message(msg)
            raise Exception("amount_below_min_notional")

        # 4) –ø–æ–∫–∏ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ raw_qty, –æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—ñ–¥–∂–µ–Ω–µ–º–æ —É place_order()
        self.quantity = float(raw_qty)
        if self.quantity <= 0:
            raise Exception("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Å—É–º–∏ –¥–ª—è –æ—Ä–¥–µ—Ä–∞.")

    def place_order(self):
        try:
            symbol_clean = self._symbol_clean(self.symbol)

            # –¥–æ–≤–æ–¥–∏–º–æ –¥–æ –±—ñ—Ä–∂–æ–≤–∏—Ö –ø—Ä–∞–≤–∏–ª
            safe_qty = self._ensure_min_qty(self.quantity)

            # –æ—Å—Ç–∞—Ç–æ—á–Ω–µ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è —Ç–≤–æ—î—é —É—Ç–∏–ª—ñ—Ç–æ—é
            rounded_qty = round_qty_bybit(symbol_clean, safe_qty)

            if not rounded_qty or float(rounded_qty) <= 0.0:
                log_error(f"‚ùå rounded_qty <= 0 –¥–ª—è {symbol_clean}. safe_qty={safe_qty}, raw_qty={self.quantity}")
                return False

            response = bybit.place_order(
                category="linear",
                symbol=symbol_clean,
                side=self.side,                   # "Buy" / "Sell"
                positionSide=self.position_side,  # "LONG" / "SHORT"
                orderType="Market",
                qty=str(rounded_qty),
                reduceOnly=False
            )

            if response.get("retCode") == 0:
                log_message(f"‚úÖ –û—Ä–¥–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ: {response['result'].get('orderId', '?')} qty={rounded_qty}")
                # –æ–Ω–æ–≤–ª—é—î–º–æ –Ω–∞ —Ñ–∞–∫—Ç–∏—á–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ qty
                self.quantity = float(rounded_qty)
                return True
            else:
                log_error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ Bybit: {response}")
                return False
        except Exception as e:
            log_error(f"‚ùå place_order() –≤–∏–Ω—è—Ç–æ–∫: {e}")
            return False

    def execute(self):
        log_message(f"üü¢ –í–∏–∫–æ–Ω–∞–Ω–Ω—è execute() –¥–ª—è {self.symbol}")
        try:
            self.prepare_order()
            log_message(f"üîß –í—Å—Ç–∞–Ω–æ–≤–ª—é—é –ø–ª–µ—á–µ {self.leverage}x –Ω–∞ Bybit –¥–ª—è {self.symbol} ({self.position_side})")
            self.set_safe_leverage()

            if self.place_order():
                result = {
                    "symbol": self._symbol_clean(self.symbol),
                    "side": self.side,
                    "entry_price": float(self.price),
                    "quantity": float(self.quantity),
                    "position_side": self.position_side,
                    "leverage": int(self.leverage)
                }
                log_message("üêû DEBUG execute() —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n" + json.dumps(json_safe(result), indent=2, ensure_ascii=False))
                return result
            else:
                return {"error": "Order not placed"}
        except Exception as e:
            log_error(f"‚ùå execute() –≤–∏–Ω—è—Ç–æ–∫: {e}")
            return {"error": str(e)}

    def close_position(self):
        """
        ‚ùå –ó–∞–∫—Ä–∏–≤–∞—î –ø–æ–∑–∏—Ü—ñ—é –Ω–∞ –±—ñ—Ä–∂—ñ —á–µ—Ä–µ–∑ Market –æ—Ä–¥–µ—Ä –∑ —Ä–µ—Ç—Ä–∞—è–º–∏
        """
        try:
            MAX_RETRIES = 3
            close_side = "Sell" if self.position_side == "LONG" else "Buy"
            symbol_clean = self._symbol_clean(self.symbol)

            for attempt in range(1, MAX_RETRIES + 1):
                log_message(f"üîÅ [close_position] –°–ø—Ä–æ–±–∞ {attempt}/{MAX_RETRIES} –∑–∞–∫—Ä–∏—Ç–∏ {symbol_clean}")

                response = bybit.get_positions(category="linear", symbol=symbol_clean, positionSide=self.position_side)
                positions = response.get("result", {}).get("list", []) or []
                current_qty = 0.0

                for pos in positions:
                    if pos.get("symbol") == symbol_clean:
                        size = float(pos.get("size", 0) or 0.0)
                        if size > 0:
                            current_qty = size
                            break

                if current_qty <= 0:
                    log_message(f"‚ö†Ô∏è [close_position] –ù–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–æ—ó –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è {symbol_clean} (—Å–ø—Ä–æ–±–∞ {attempt})")
                    time.sleep(1)
                    continue

                rounded_qty = round_qty_bybit(symbol_clean, current_qty)

                response = bybit.place_order(
                    category="linear",
                    symbol=symbol_clean,
                    side=close_side,  # "Sell" –¥–ª—è LONG, "Buy" –¥–ª—è SHORT
                    positionSide=self.position_side,
                    orderType="Market",
                    qty=str(rounded_qty),
                    reduceOnly=True,
                    closeOnTrigger=True
                )

                if response.get("retCode") == 0:
                    log_message(f"‚úÖ –ü–æ–∑–∏—Ü—ñ—è {symbol_clean} –∑–∞–∫—Ä–∏—Ç–∞: {response['result'].get('orderId', '?')}")
                    return True
                else:
                    log_error(f"‚ùå [close_position] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥ Bybit: {response}")
                    time.sleep(1)

            log_error(f"‚ùå [close_position] –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–∫—Ä–∏—Ç–∏ {symbol_clean} –ø—ñ—Å–ª—è {MAX_RETRIES} —Å–ø—Ä–æ–±")
            return False

        except Exception as e:
            log_error(f"‚ùå [close_position] –í–∏–Ω—è—Ç–æ–∫: {e}")
            return False

    def set_safe_leverage(self):
        """
        üîß –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –±–µ–∑–ø–µ—á–Ω–µ –ø–ª–µ—á–µ –¥–ª—è —Å–∏–º–≤–æ–ª—É:
        - –ø–µ—Ä–µ–≤—ñ—Ä—è—î –º–µ–∂—ñ –∑ instruments_info
        - —Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω–∞–∫–æ–≤–µ buyLeverage/sellLeverage (v5)
        """
        try:
            symbol_clean = self._symbol_clean(self.symbol)
            response = bybit.get_instruments_info(category="linear", symbol=symbol_clean)
            symbols_info = response.get("result", {}).get("list", []) or []

            if not symbols_info:
                log_error(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ info –¥–ª—è {self.symbol}, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –¥–µ—Ñ–æ–ª—Ç–Ω–µ –ø–ª–µ—á–µ (10x)")
                return

            leverage_filter = symbols_info[0].get("leverageFilter", {}) or {}
            min_leverage = int(float(leverage_filter.get("minLeverage", 1)))
            max_leverage = int(float(leverage_filter.get("maxLeverage", 100)))

            if self.leverage > max_leverage:
                log_message(f"‚ö†Ô∏è –ü–ª–µ—á–µ {self.leverage}x > max {max_leverage}x ‚Üí –≤—Å—Ç–∞–Ω–æ–≤–ª—é—é max")
                safe_leverage = max_leverage
            elif self.leverage < min_leverage:
                log_message(f"‚ö†Ô∏è –ü–ª–µ—á–µ {self.leverage}x < min {min_leverage}x ‚Üí –≤—Å—Ç–∞–Ω–æ–≤–ª—é—é min")
                safe_leverage = min_leverage
            else:
                safe_leverage = self.leverage

            # v5: —Ç—Ä–µ–±–∞ buyLeverage —ñ sellLeverage
            result = bybit.set_leverage(
                category="linear",
                symbol=symbol_clean,
                buyLeverage=str(safe_leverage),
                sellLeverage=str(safe_leverage)
            )

            if result.get("retCode") == 0:
                log_message(f"‚úÖ –ü–ª–µ—á–µ {safe_leverage}x –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {symbol_clean}")
            else:
                log_error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–ª–µ—á–µ: {result}")

        except Exception as e:
            log_error(f"‚ùå set_safe_leverage –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {self.symbol}: {e}")
            log_message("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –ø–ª–µ—á–µ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –±—ñ—Ä–∂—ñ (–π–º–æ–≤—ñ—Ä–Ω–æ 10x)")
