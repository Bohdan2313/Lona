import pandas as pd
import numpy as np

from dotenv import load_dotenv
import os
from utils.get_klines_bybit import get_klines_clean_bybit
from analysis.market import analyze_market
from predict_lstm import predict_lstm
from analysis.indicators import get_volatility
from utils.logger import log_message, log_error

from analysis.whales import get_whale_score


from config import bybit  # –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ —ñ–º–ø–æ—Ä—Ç —î

def risk_management(balance, symbol, market_type="futures", leverage=5):
    """üìä –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–µ –¥–∏–Ω–∞–º—ñ—á–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞–ø—ñ—Ç–∞–ª–æ–º"""
    try:
        df = get_klines_clean_bybit(symbol, limit=50)
        if df is None or df.empty:
            log_message(f"‚ùå {symbol} | –î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ ‚Üí –†–∏–∑–∏–∫ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º (5%)")
            return max(balance * 0.05, 10)

        for col in ["high", "low", "close", "volume"]:
            df[col] = pd.to_numeric(df[col], errors="coerce")
        df.dropna(inplace=True)
        if df.empty:
            log_message(f"‚ùå {symbol} | –î–∞–Ω—ñ NaN –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏ ‚Üí –†–∏–∑–∏–∫ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º (5%)")
            return max(balance * 0.05, 10)

        # –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å —ñ –æ–± º—î–º
        volatility = np.mean(df["high"] - df["low"]) / df["close"].mean() * 100
        avg_volume = df["volume"].mean()
        log_message(f"üìä {symbol} | –í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: {volatility:.2f}%, –û–± º—î–º: {avg_volume:.2f}")

        # –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—É —ñ –ø—Ä–æ–≥–Ω–æ–∑—É
        analysis = analyze_market(symbol) or {}
        trend = analysis.get("trend", "neutral")
        lstm_prediction = predict_lstm(symbol) or 0
        log_message(f"üìà {symbol} | –¢—Ä–µ–Ω–¥: {trend}, LSTM –ø—Ä–æ–≥–Ω–æ–∑: {lstm_prediction:.2f}%")

        # –ë–∞–∑–æ–≤–∏–π —Ä–∏–∑–∏–∫
        risk_percent = 0.1

        # –ê–¥–∞–ø—Ç–∞—Ü—ñ—è –∑–∞ —Ä–∏–Ω–∫–æ–º
        if volatility < 1.0 and avg_volume > 5_000_000:
            risk_percent += 0.05
            log_message("üü¢ –ù–∏–∑—å–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å + –≤–∏—Å–æ–∫–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å ‚Üí —Ä–∏–∑–∏–∫ +5%")
        elif volatility > 3.0 or avg_volume < 500_000:
            risk_percent -= 0.05
            log_message("üî¥ –í–∏—Å–æ–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å –∞–±–æ –Ω–∏–∑—å–∫–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å ‚Üí —Ä–∏–∑–∏–∫ -5%")

        # LSTM –ø—Ä–æ–≥–Ω–æ–∑
        if lstm_prediction > 0.5:
            risk_percent += 0.03
            log_message("üìà LSTM –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π ‚Üí —Ä–∏–∑–∏–∫ +3%")
        elif lstm_prediction < -0.5:
            risk_percent -= 0.03
            log_message("üìâ LSTM –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π ‚Üí —Ä–∏–∑–∏–∫ -3%")

        # –¢—Ä–µ–Ω–¥
        if trend == "bullish":
            risk_percent += 0.03
            log_message("üìà –¢—Ä–µ–Ω–¥ bullish ‚Üí —Ä–∏–∑–∏–∫ +3%")
        elif trend == "bearish":
            risk_percent -= 0.03
            log_message("üìâ –¢—Ä–µ–Ω–¥ bearish ‚Üí —Ä–∏–∑–∏–∫ -3%")

        # üßæ –ê–¥–∞–ø—Ç–∞—Ü—ñ—è –ø—ñ–¥ —Ñ º—é—á–µ—Ä—Å–∏ (Bybit)
        if market_type == "futures":
            try:
                balances = bybit.get_wallet_balance(accountType="UNIFIED")
                usdt_balance = float(balances['result']['list'][0]['coin'][0]['walletBalance'])
                max_allowed = usdt_balance * leverage * 0.05
                adjusted_risk = min(risk_percent, max_allowed / balance)

                if adjusted_risk != risk_percent:
                    log_message(f"‚ö†Ô∏è –û–±–º–µ–∂–µ–Ω–Ω—è –º–∞—Ä–∂—ñ ‚Üí —Ä–∏–∑–∏–∫ –æ–±–º–µ–∂–µ–Ω–æ {adjusted_risk*100:.2f}%")
                risk_percent = adjusted_risk

                if leverage > 5:
                    risk_percent *= 0.85
                    log_message("‚ö†Ô∏è –ü–ª–µ—á–µ > 5 ‚Üí —Ä–∏–∑–∏–∫ * 0.85")
                if leverage > 10:
                    risk_percent *= 0.7
                    log_message("‚ö†Ô∏è –ü–ª–µ—á–µ > 10 ‚Üí —Ä–∏–∑–∏–∫ * 0.7")
            except Exception as e:
                log_message(f"‚ö†Ô∏è {symbol} | –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–∞—Ä–∂—ñ (Bybit): {e}")

        # –ú–µ–∂—ñ —Ä–∏–∑–∏–∫—É
        risk_percent = max(0.02, min(risk_percent, 0.25))
        final_risk = round(balance * risk_percent, 2)

        log_message(f"üí∞ –§—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–∏–∑–∏–∫ –¥–ª—è {symbol}: {risk_percent*100:.2f}% ‚Üí {final_risk:.2f} USDT")
        return final_risk

    except Exception as e:
        log_message(f"‚ùå risk_management(): {e}")
        return max(balance * 0.05, 10)

def calculate_amount_to_use(score, total_balance, leverage=30, risk_cap=0.25):
    """
    üí° –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –ø–æ–∑–∏—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ score, –±–∞–ª–∞–Ω—Å—É —ñ —Ä–∏–∑–∏–∫—ñ–≤.
    - total_balance: –±–∞–ª–∞–Ω—Å, —è–∫–∏–π —Ä–µ–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 20 USDT)
    - leverage: –º–Ω–æ–∂–Ω–∏–∫ –¥–ª—è –ø–æ–∑–∏—Ü—ñ—ó (25x, 30x)
    - risk_cap: —Å–∫—ñ–ª—å–∫–∏ –º–∞–∫—Å–∏–º—É–º –≤—ñ–¥ –±–∞–ª–∞–Ω—Å—É –º–æ–∂–Ω–∞ —Ä–∏–∑–∏–∫–Ω—É—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 25%)
    """

    if score < 30:
        return 0

    # üí° –§–æ—Ä–º—É–ª–∞ ‚Äî —è–∫–∞ —á–∞—Å—Ç–∫–∞ –º–∞—Ä–∂—ñ –¥–æ–∑–≤–æ–ª–µ–Ω–∞
    if score < 50:
        margin_risk = total_balance * 0.01
    elif score < 70:
        margin_risk = total_balance * 0.03
    elif score < 90:
        margin_risk = total_balance * 0.07
    else:
        margin_risk = total_balance * 0.15

    # üõ° –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ —Ä–∏–∑–∏–∫
    max_margin_allowed = total_balance * risk_cap
    final_margin = min(margin_risk, max_margin_allowed)

    # üìà –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–∑–∏—Ü—ñ—ó –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–ª–µ—á–∞
    position_size = round(final_margin * leverage, 2)

    # üßæ –ú—ñ–Ω—ñ–º—É–º Binance ‚Äî 5 USDT (–º–æ–∂–Ω–∞ –≤–∏—Å—Ç–∞–≤–∏—Ç–∏ —Å–≤–æ—é –º–µ–∂—É)
    if position_size < 5:
        log_message(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü—ñ—è ({position_size} USDT) –Ω–∏–∂—á–µ –º—ñ–Ω—ñ–º—É–º—É ‚Äî –ø—ñ–¥–Ω—ñ–º–∞—î–º–æ –¥–æ 5 USDT")
        position_size = 5

    log_message(
        f"‚öñÔ∏è –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó: {position_size} USDT | –ú–∞—Ä–∂–∞: {final_margin:.2f} USDT | "
        f"Score: {score} | Leverage: {leverage}x"
    )
    return position_size



def adjust_leverage_by_score(score):
    """üìà –î–∏–Ω–∞–º—ñ—á–Ω–µ –ø–ª–µ—á–µ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å–∏–ª–∏ —Å–∏–≥–Ω–∞–ª—É"""
    if score < 30:
        return 0
    elif score < 50:
        return 3
    elif score < 70:
        return 10
    elif score < 90:
        return 25
    else:
        return 50


def analyze_liquidity_risk(symbol):
    """
    üõ°Ô∏è –ê–Ω–∞–ª—ñ–∑ —Ä–∏–∑–∏–∫—É —à—Ç—É—á–Ω–æ–≥–æ –ø—Ä–æ–±–∏—Ç—Ç—è —Ä—ñ–≤–Ω—ñ–≤ —ñ –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó.
    """
    try:
        market =get_klines_clean_bybit(symbol)
        whale_score = get_whale_score(symbol)
        volatility = get_volatility(symbol)

        support = market.get("support")
        resistance = market.get("resistance")
        current_price = market.get("price")

        # –ì—Ä—É–±–∞ –ª–æ–≥—ñ–∫–∞: —è–∫—â–æ —Ü—ñ–Ω–∞ –¥—É–∂–µ –±–ª–∏–∑—å–∫–∞ –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏/–æ–ø–æ—Ä—É + whale –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å ‚Üí —Ä–∏–∑–∏–∫ –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó –≤–∏—Å–æ–∫–∏–π
        distance_to_support = abs(current_price - support) / current_price * 100 if support else None
        distance_to_resistance = abs(current_price - resistance) / current_price * 100 if resistance else None

        prompt = (
            f"–ê–Ω–∞–ª—ñ–∑ —Ä–∏–∑–∏–∫—É –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó –ø–æ {symbol}.\n"
            f"–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {current_price}\n"
            f"–ü—ñ–¥—Ç—Ä–∏–º–∫–∞: {support}\n"
            f"–û–ø—ñ—Ä: {resistance}\n"
            f"–í—ñ–¥—Å—Ç–∞–Ω—å –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: {round(distance_to_support, 2) if distance_to_support else 'N/A'}%\n"
            f"–í—ñ–¥—Å—Ç–∞–Ω—å –¥–æ –æ–ø–æ—Ä—É: {round(distance_to_resistance, 2) if distance_to_resistance else 'N/A'}%\n"
            f"–í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: {volatility}\n"
            f"Whale-–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {whale_score}\n\n"
            f"–ß–∏ —î –≤–∏—Å–æ–∫–∏–π —Ä–∏–∑–∏–∫ —à—Ç—É—á–Ω–æ–≥–æ –ø—Ä–æ–±–∏—Ç—Ç—è —Ä—ñ–≤–Ω—ñ–≤ —ñ –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó? –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π: 'yes' –∞–±–æ 'no'."
        )

       
       

    except Exception as e:
        log_message(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É —Ä–∏–∑–∏–∫—É –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó: {e}")
        return False
    


def get_stop_loss(symbol):
    try:
        # –¢–µ—Å—Ç–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∞–±–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
        return -10.0  # -10%
    except Exception as e:
        log_error(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ get_stop_loss –¥–ª—è {symbol}: {e}")
        return None

def get_take_profit(symbol):
    try:
        return 7.0  # +7%
    except Exception as e:
        log_error(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ get_take_profit –¥–ª—è {symbol}: {e}")
        return None

def get_trailing_info(symbol):
    try:
        return {
            "trailing_start": 5.0,  # % –∫–æ–ª–∏ —É–≤—ñ–º–∫–Ω–µ—Ç—å—Å—è —Ç—Ä–µ–π–ª—ñ–Ω–≥
            "trailing_distance": 2.0  # % –≤—ñ–¥—Å—Ç—É–ø—É
        }
    except Exception as e:
        log_error(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ get_trailing_info –¥–ª—è {symbol}: {e}")
        return None