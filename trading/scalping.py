# scalping.py

from trading.executor import round_qty_bybit
import time
from analysis.indicators import get_volatility,analyze_support_resistance
import traceback
from utils.logger import check_position_with_retry
from utils.tools import get_active_trade
from datetime import datetime, timedelta
from trading.executor import get_current_futures_price
from utils.logger import log_message, log_error, log_debug,resolve_trade_id
from trading.executor import OrderExecutor
from trading.risk import calculate_amount_to_use
from config import bybit
is_trade_open = False
import pandas as pd
from analysis.market import analyze_volume
from utils.get_klines_bybit import get_klines_clean_bybit
import json
import re
from datetime import datetime
from analysis.monitor_coin_behavior import build_monitor_snapshot 
import os
from utils.telegram_bot import send_telegram_message
import random  
from config import MAX_ACTIVE_TRADES
from utils.logger import append_active_trade
import threading
from config import  USE_MANUAL_LEVERAGE, MANUAL_LEVERAGE
from utils.tools import get_usdt_balance
from analysis.market import get_top_symbols
from decimal import Decimal, getcontext
getcontext().prec = 10  # –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –±–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω—å
from analysis.monitor_coin_behavior import convert_snapshot_to_conditions
from utils.signal_logger import update_signal_record
from trading.executor import OrderExecutor
from ai.decision import check_trade_conditions_long, check_trade_conditions_short
import random
import numpy as np
from utils.signal_logger import log_final_trade_result
from uuid import uuid4
from utils.logger import mark_trade_closed, remove_active_trade, prune_inactive_trades
from utils.allocator import plan_allocation_for_new_trade
from utils.allocator import  has_open_trade_for,get_open_trades_count


ACTIVE_TRADES_FILE_SIMPLE = "data/ActiveTradesSimple.json"

# === —Ä–µ—î—Å—Ç—Ä–∏ –ø–æ—Ç–æ–∫—ñ–≤ ===
active_threads = {}   # –ø–æ—Ç–æ–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö —É–≥–æ–¥ (–∫–ª—é—á = trade_id)
bg_threads = {}       # —Ñ–æ–Ω–æ–≤—ñ –¥–µ–º–æ–Ω–∏: monitor_all_open_trades, monitor_watchlist_candidate



SIDE_BUY = "Buy"
SIDE_SELL = "Sell"
# üîí –ù–∞–±—ñ—Ä —Å–∏–º–≤–æ–ª—ñ–≤, —è–∫—ñ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑ –≤—ñ–¥–∫—Ä–∏–≤–∞—é—Ç—å—Å—è (–∞–Ω—Ç–∏–¥—É–±–ª—å)
opening_symbols = set()


RECENT_SCALPING_FILE = "data/recent_scalping.json"

# ===================== COMPAT / ADAPTER LAYER =====================
# –í—Å–µ –Ω–∏–∂—á–µ ‚Äî –±–µ–∑–ø–µ—á–Ω—ñ –∞–¥–∞–ø—Ç–µ—Ä–∏ –ø—ñ–¥ —Ç–≤—ñ–π OrderExecutor + Bybit –∫–ª—ñ—î–Ω—Ç.
# –í–æ–Ω–∏ –∑–Ω—ñ–º–∞—é—Ç—å –ø–æ–º–∏–ª–∫–∏ "is not defined" —ñ –ø—Ä–∞—Ü—é—é—Ç—å –∑ —Ç–≤–æ—ó–º API.

# -- helpers
def _symbol_clean(s: str) -> str:
    return str(s).split("_")[0]




def update_active_trade(trade_id: str, patch: dict):
    """
    –ê–∫—É—Ä–∞—Ç–Ω–æ –æ–Ω–æ–≤–ª—é—î –∑–∞–ø–∏—Å —É ActiveTrades: —è–∫—â–æ —î —É—Ç–∏–ª—ñ—Ç–∏ mark/remove/append ‚Äî –∫–æ—Ä–∏—Å—Ç—É—î–º–æ—Å—å –Ω–∏–º–∏.
    –Ü–Ω–∞–∫—à–µ ‚Äî —Ä–æ–±–∏–º–æ —Ä—É—á–Ω–∏–π —Ñ–æ–ª–±–µ–∫ (–≤–∏–¥–∞–ª–∏—Ç–∏ + –¥–æ–¥–∞—Ç–∏ –Ω–∞–∑–∞–¥).
    """
    try:
        current = get_active_trade(trade_id)
        if not current:
            log_message(f"[compat] update_active_trade: {trade_id} not found (noop)")
            return False
        current.update(patch or {})
        # —è–∫—â–æ —î –ø—Ä—è–º–∏–π –∞–ø–¥–µ–π—Ç–µ—Ä —É utils.logger ‚Äî —Å–ø—Ä–æ–±—É—î–º–æ –Ω–∏–º
        try:
            from utils.logger import update_active_trade as _real_upd  # type: ignore
            _real_upd(trade_id, current)
            return True
        except Exception:
            pass
        # —Ñ–æ–ª–±–µ–∫: remove -> append
        if 'remove_active_trade' in globals():
            try: remove_active_trade(trade_id)
            except Exception: pass
        if 'append_active_trade' in globals():
            try: append_active_trade(current)
            except Exception: pass
        return True
    except Exception as e:
        log_error(f"[compat] update_active_trade fallback error: {e}")
        return False

def place_or_update_tp(symbol: str, side: str, quantity: float, avg_entry: float, tp_from_avg_pct: float):
    """
    –Ø–∫—â–æ USE_EXCHANGE_TP=False ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ (bot-only).
    –Ø–∫—â–æ True ‚Äî —Å—Ç–∞–≤–∏–º–æ ReduceOnly Limit (IOC/PostOnly) –∑ –ø—ñ–¥–≥–æ–Ω–∫–æ—é qty.
    """
    try:
        from config import USE_EXCHANGE_TP, TP_USE_IOC
    except Exception:
        USE_EXCHANGE_TP, TP_USE_IOC = False, False

    if not USE_EXCHANGE_TP:
        return None  # bot-only —Ä–µ–∂–∏–º

    # --- –¥–∞–ª—ñ –∫–æ–¥ —è–∫—â–æ –∫–æ–ª–∏—Å—å —É–≤—ñ–º–∫–Ω–µ—à –±—ñ—Ä–∂–æ–≤–∏–π TP ---
    symbol_clean = symbol.split("_")[0]
    side_u = side.upper()
    is_long = side_u in ("LONG","BUY")
    tp_price = float(avg_entry) * (1.0 + tp_from_avg_pct if is_long else 1.0 - tp_from_avg_pct)
    close_side = "Sell" if is_long else "Buy"
    pos_side   = "LONG" if is_long else "SHORT"

    rounded_qty = round_qty_bybit(symbol_clean, float(quantity))
    tif = "IOC" if TP_USE_IOC else "PostOnly"

    resp = bybit.place_order(
        category="linear",
        symbol=symbol_clean,
        side=close_side,
        positionSide=pos_side,
        orderType="Limit",
        qty=str(rounded_qty),
        price=str(tp_price),
        reduceOnly=True,
        timeInForce=tif
    )
    if resp.get("retCode") == 0:
        oid = resp.get("result", {}).get("orderId")
        log_message(f"üéØ [TP] {symbol_clean} {side_u} qty={rounded_qty} @ {tp_price:.6f} (orderId={oid})")
        return oid
    else:
        log_error(f"‚ö†Ô∏è [TP] Bybit error: {resp}")
        return None


# ---- Liq buffer check (–∑ —Å–∏–º—É–ª—è—Ü—ñ—î—é –ø—ñ—Å–ª—è –¥–æ–∫—É–ø–∫–∏ + –≥–∞—Ä–¥-–∫–ª–µ–π–º–∏) -----------------
import math

def has_liq_buffer_after_add(symbol: str, side: str, extra_qty: float, min_buffer: float, leverage: int):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î –±—É—Ñ–µ—Ä –¥–æ –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó. –Ø–∫—â–æ liqPrice —î:
      - —Ä–∞—Ö—É—î –ø–æ—Ç–æ—á–Ω–∏–π –±—É—Ñ–µ—Ä;
      - —è–∫—â–æ –≤—ñ–Ω < –ø–æ—Ä–æ–≥–∞, —Å–∏–º—É–ª—é—î –¥–æ–¥–∞–≤–∞–Ω–Ω—è extra_qty –∑–∞ mark_price,
        –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î —Å–µ—Ä–µ–¥–Ω—é —Ç–∞ –æ—Ü—ñ–Ω—é—î –Ω–æ–≤–∏–π liqPrice ~ –ø–æ—Ç–æ—á–Ω–∏–π_liq * clamp(new_avg/cur_avg).
        –Ø–∫—â–æ —Å–∏–º—É–ª—å–æ–≤–∞–Ω–∏–π –±—É—Ñ–µ—Ä >= –ø–æ—Ä–æ–≥–∞ ‚Äî –¥–æ–∑–≤–æ–ª—è—î –¥–æ–∫—É–ø–∫—É.
    –Ø–∫—â–æ liqPrice –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π/–Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ‚Äî –ø–æ–≤–æ–¥–∏–º–æ—Å—å –ø–æ–±–ª–∞–∂–ª–∏–≤–æ (True).
    –ü—Ä–∏–º—ñ—Ç–∫–∞: –¥–µ—Ñ–æ–ª—Ç ¬´permissive True¬ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ.
    """
    try:
        symbol_clean = _symbol_clean(symbol)

        # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –ø–æ—Ä—ñ–≥: –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —è–∫ 0.40, —Ç–∞–∫ —ñ 40 (%)
        thr = float(min_buffer)
        if not math.isfinite(thr):
            thr = 0.40
        if thr > 1.0:
            thr = thr / 100.0
        thr = min(max(thr, 0.0), 0.95)  # —Ä–æ–∑—É–º–Ω—ñ –º–µ–∂—ñ

        # –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ (mark)
        mark_price = float(get_current_futures_price(symbol_clean) or 0.0)
        if not math.isfinite(mark_price) or mark_price <= 0.0:
            log_message("[liq] invalid mark_price ‚Üí allow add (permissive)")
            return True

        # –ü–æ–∑–∏—Ü—ñ—ó
        resp = bybit.get_positions(category="linear", symbol=symbol_clean)
        lst = (resp.get("result", {}) or {}).get("list", []) or []
        if not lst:
            log_message("[liq] no positions ‚Üí allow add (permissive)")
            return True

        side_u = str(side).upper()
        for pos in lst:
            size = float(pos.get("size", 0) or 0.0)
            if size <= 0:
                continue

            pos_side = str(pos.get("side", "")).upper()  # "BUY" / "SELL"
            if (side_u in ("LONG", "BUY") and pos_side != "BUY") or \
               (side_u in ("SHORT", "SELL") and pos_side != "SELL"):
                continue

            # liqPrice (–±—É–¥—å-—è–∫–∏–π –º–æ–∂–ª–∏–≤–∏–π –∫–ª—é—á)
            liq_raw = pos.get("liqPrice") or pos.get("liq_price") or pos.get("liqPrice_e")
            try:
                liq = float(liq_raw)
            except Exception:
                liq = float("nan")

            if (liq_raw is None) or (not math.isfinite(liq)) or (liq <= 0.0):
                log_message("[liq] liqPrice not available/invalid ‚Üí allow add (permissive)")
                return True

            # –ü–æ—Ç–æ—á–Ω–∞ —Å–µ—Ä–µ–¥–Ω—è (avg)
            avg_keys = ["avgPrice", "avgEntryPrice", "avg_entry_price", "entryPrice"]
            cur_avg = None
            for k in avg_keys:
                if k in pos and pos[k] not in (None, "", 0, "0"):
                    try:
                        cur_avg = float(pos[k])
                        if math.isfinite(cur_avg) and cur_avg > 0.0:
                            break
                    except Exception:
                        pass

            # –ü–æ—Ç–æ—á–Ω–∏–π –±—É—Ñ–µ—Ä
            if side_u in ("LONG", "BUY"):
                cur_buf = (mark_price - liq) / mark_price
            else:
                cur_buf = (liq - mark_price) / mark_price

            ok_now = (cur_buf >= thr)
            log_message(f"[liq] side={side_u} cur_buf={cur_buf:.4f} vs thr={thr:.4f} ‚Üí {ok_now}")

            if ok_now:
                return True

            # –Ø–∫—â–æ –Ω–µ –ø—Ä–æ–π—à–ª–∏ –ø–æ—Ä—ñ–≥ ‚Äî —Å–ø—Ä–æ–±—É—î–º–æ —Å–∏–º—É–ª—è—Ü—ñ—é ¬´–ø—ñ—Å–ª—è –¥–æ–∫—É–ø–∫–∏¬ª
            if (cur_avg is None) or (not math.isfinite(cur_avg)) or (cur_avg <= 0.0):
                log_message("[liq] no valid cur_avg ‚Üí conservative False")
                return False

            cur_qty = float(size)
            ex_qty = float(extra_qty or 0.0)
            if ex_qty <= 0.0:
                log_message("[liq] extra_qty<=0 ‚Üí conservative False")
                return False

            # –õ–æ–≥ –¥–ª—è –ø—Ä–æ–∑–æ—Ä–æ—Å—Ç—ñ —Å–∏–º—É–ª—è—Ü—ñ—ó
            log_message(
                f"[liq] sim input: side={side_u} cur_avg={cur_avg:.6f} cur_qty={cur_qty:.6f} "
                f"extra_qty={ex_qty:.6f} mark={mark_price:.6f}"
            )

            new_qty = cur_qty + ex_qty
            if new_qty <= 0:
                log_message("[liq] new_qty<=0 ‚Üí conservative False")
                return False

            new_avg = (cur_avg * cur_qty + mark_price * ex_qty) / new_qty
            # –º–∞—Å—à—Ç–∞–±—É—î–º–æ liq –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π–Ω–æ –∑–º—ñ–Ω—ñ —Å–µ—Ä–µ–¥–Ω—å–æ—ó, –∞–ª–µ –∫–ª–∞–º–ø–∏–º–æ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
            ratio = new_avg / max(cur_avg, 1e-12)
            ratio = min(max(ratio, 0.5), 1.5)  # –∫–ª–∞–º–ø 0.5‚Äì1.5 —è–∫ –æ–±–º–µ–∂–µ–Ω–Ω—è –µ–≤—Ä–∏—Å—Ç–∏–∫–∏
            new_liq = liq * ratio

            if side_u in ("LONG", "BUY"):
                new_buf = (mark_price - new_liq) / mark_price
            else:
                new_buf = (new_liq - mark_price) / mark_price

            ok_sim = (new_buf >= thr)
            log_message(
                f"[liq] what-if: new_avg={new_avg:.6f}, new_liq‚âà{new_liq:.6f}, "
                f"new_buf={new_buf:.4f} vs thr={thr:.4f} ‚Üí {ok_sim}"
            )

            return bool(ok_sim)

        # –Ø–∫—â–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π—à–ª–∏ ‚Äî –ø–æ–±–ª–∞–∂–ª–∏–≤–æ –¥–æ–∑–≤–æ–ª—è—î–º–æ
        log_message("[liq] no matching side position ‚Üí allow add (permissive)")
        return True

    except Exception as e:
        log_error(f"[liq] has_liq_buffer_after_add error: {e}")
        # –ü–µ—Ä–µ–±–æ—ó –∑ API/–¥–∞–Ω–∏–º–∏ ‚Äî –∫—Ä–∞—â–µ –Ω–µ –ª–∞–º–∞—Ç–∏ DCA-–ø–æ—Ç—ñ–∫: –∑–∞–ª–∏—à–∞—î–º–æ permissive True
        return True


def quick_scan_coin(symbol: str) -> dict | None:
    """
    ‚ö° Fast screening –º–æ–Ω–µ—Ç–∏ –¥–ª—è pre-—Ñ—ñ–ª—å—Ç—Ä—É
    """
    try:
        df = get_klines_clean_bybit(symbol, interval="1h", limit=150)
        if df is None or df.empty or len(df) < 50:
            return None

        df["close"] = df["close"].astype(float)
        close_mean = df["close"].mean()
        close_std = df["close"].std()
        volatility = round((close_std / max(close_mean, 1e-8)) * 100, 2)

        volume_category = analyze_volume(symbol)
        if isinstance(volume_category, dict):
            volume_category = volume_category.get("level", "low")

        volume_score = {
            "very_low": 0,
            "low": 1,
            "normal": 2,
            "high": 3,
            "very_high": 4
        }.get(volume_category, 0)

        return {
            "volume_score": volume_score,
            "volatility": volatility
        }

    except Exception as e:
        log_error(f"‚ùå quick_scan_coin –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
        return None


WATCHLIST_LOG_PATH = "logs/watchlist_debug.json"
WATCHLIST_PATH = "data/watchlist.json"
MONITOR_INTERVAL = 5  # —Å–µ–∫—É–Ω–¥

def load_watchlist() -> list:
    try:
        if not os.path.exists(WATCHLIST_PATH):
            with open(WATCHLIST_PATH, "w", encoding="utf-8") as f:
                json.dump([], f)
            return []

        with open(WATCHLIST_PATH, "r", encoding="utf-8") as f:
            data = json.load(f)
            if not isinstance(data, list):
                log_error("‚ùå Watchlist JSON –Ω–µ —î —Å–ø–∏—Å–∫–æ–º! –°–∫–∏–¥–∞—é —Ñ–∞–π–ª.")
                return []
            return data

    except Exception as e:
        log_error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ watchlist.json: {e}")
        return []

def save_watchlist(watchlist):
    try:
        os.makedirs(os.path.dirname(WATCHLIST_PATH), exist_ok=True)
        log_message(f"üìã [WATCHLIST] –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è {len(watchlist)} –º–æ–Ω–µ—Ç —É {WATCHLIST_PATH}")
        with open(WATCHLIST_PATH, "w", encoding="utf-8") as f:
            json.dump(watchlist, f, indent=2, ensure_ascii=False)
    except Exception as e:
        log_error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É Watchlist: {e}")

def add_to_watchlist(symbol, support_position, current_price,side="LONG"):
    try:
        watchlist = load_watchlist()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–Ω–µ—Ç–∞ –≤–∂–µ –≤ —Å–ø–∏—Å–∫—É
        if any(item["symbol"] == symbol for item in watchlist):
            log_message(f"‚ÑπÔ∏è [WATCHLIST] {symbol} –≤–∂–µ —É —Å–ø–∏—Å–∫—É ‚Äî –ø—Ä–æ–ø—É—Å–∫")
            return

        watchlist.append({
            "symbol": symbol,
            "support_position": support_position,
            "current_price": current_price,
            "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
            "side": side
        })

        save_watchlist(watchlist)
        log_message(f"üì• [WATCHLIST] {symbol} –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ watchlist.json")

    except Exception as e:
        log_error(f"‚ùå [WATCHLIST] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ {symbol}: {e}")


def _canonicalize_patterns_for_log(patterns):
    """
    –ö–∞–Ω–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥ —Ç–≤–æ—ó fast-lane –ø–∞—Ç–µ—Ä–Ω–∏:
    bullish_engulfing / bearish_engulfing / hammer / shooting_star / evening_star / morning_star / doji
    """
    out = []
    if isinstance(patterns, list):
        for p in patterns:
            if isinstance(p, dict):
                t = str(p.get("type", "")).lower()
                d = str(p.get("direction", "")).lower()
                if t == "engulfing" and d in ("bullish", "bearish"):
                    out.append(f"{d}_engulfing")
                elif t in ("hammer", "shooting_star", "evening_star", "morning_star", "doji"):
                    out.append(t)
            elif isinstance(p, str):
                out.append(p.lower())
    return sorted(set(out))


def log_watchlist_reason(symbol, side, reason, conditions=None):
    """
    –õ–æ–≥—É—î —Ä—ñ–≤–Ω–æ —Ç—ñ –∫–ª—é—á—ñ, —è–∫—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –Ω–æ–≤—ñ check_trade_conditions_long/short,
    —ñ –¥–æ–¥–∞—î list 'blockers' –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏, —á–æ–º—É —â–µ –ù–ï –≤—ñ–¥–∫—Ä–∏—Ç–æ.
    """
    try:
        import os, json
        from datetime import datetime

        os.makedirs("logs", exist_ok=True)
        filepath = "logs/watchlist_debug.json"
        timestamp = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")

        def safe(val):
            if isinstance(val, (int, float, str, bool)) or val is None:
                return val
            if isinstance(val, list):
                return [safe(v) for v in val]
            if isinstance(val, dict):
                return {str(k): safe(v) for k, v in val.items()}
            return str(val)

        minimal = {}
        blockers = []

        if isinstance(conditions, dict):
            # === –ø–æ–ª—è, —è–∫—ñ —Ä–µ–∞–ª—å–Ω–æ —á–∏—Ç–∞—é—Ç—å —Ç–≤–æ—ó check_* ===
            keys = [
                "support_position", "global_trend", "volume_category",
                "macd_trend", "macd_hist_direction", "macd_crossed",
                "rsi_value", "rsi_trend", "rsi_signal",
                "stoch_signal", "stoch_k", "stoch_d",
                "bollinger_position", "bollinger_signal",
                "cci_signal", "cci_value",
                "microtrend_1m", "microtrend_5m", "delta_1m",
                "patterns"
            ]
            for k in keys:
                minimal[k] = safe(conditions.get(k))

            # –∫–∞–Ω–æ–Ω—ñ–∑–æ–≤–∞–Ω—ñ –ø–∞—Ç–µ—Ä–Ω–∏ –¥–ª—è fast-lane
            minimal["patterns_canon"] = _canonicalize_patterns_for_log(conditions.get("patterns", []))

            # === —Ñ–æ—Ä–º—É—î–º–æ blockers –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –¢–û–ß–ù–ò–• –ø—Ä–∞–≤–∏–ª —É check_* ===
            side = str(side or "").upper()

            sp = str(minimal.get("support_position", "")).lower()
            gt = str(minimal.get("global_trend", "unknown")).lower()
            vol = str(minimal.get("volume_category", "unknown")).lower()

            macd_trend = minimal.get("macd_trend", "neutral")
            macd_hist  = minimal.get("macd_hist_direction", "flat")
            macd_cross = minimal.get("macd_crossed", "none")

            try:
                rsi_val = float(minimal.get("rsi_value", 0) or 0)
            except Exception:
                rsi_val = 0.0
            rsi_trend  = str(minimal.get("rsi_trend", "flat")).lower()
            rsi_signal = minimal.get("rsi_signal", "neutral")

            stoch_signal = minimal.get("stoch_signal", "neutral")
            try:
                k_val = float(minimal.get("stoch_k")) if minimal.get("stoch_k") is not None else None
            except Exception:
                k_val = None
            try:
                d_val = float(minimal.get("stoch_d")) if minimal.get("stoch_d") is not None else None
            except Exception:
                d_val = None

            try:
                bb_pos = float(minimal.get("bollinger_position", 50) or 50)
            except Exception:
                bb_pos = 50.0
            bb_sig = minimal.get("bollinger_signal", "neutral")

            cci_sig = minimal.get("cci_signal", "neutral")
            try:
                cci_val = float(minimal.get("cci_value", 0) or 0)
            except Exception:
                cci_val = 0.0

            micro1m = str(minimal.get("microtrend_1m", "neutral")).lower()
            try:
                delta_1m = float(minimal.get("delta_1m", 0) or 0)
            except Exception:
                delta_1m = 0.0

            # --- –∑–∞–≥–∞–ª—å–Ω—ñ –±–ª–æ–∫–µ—Ä–∏ ---
            if vol == "very_low":
                blockers.append("volume_category=very_low")

            if side == "LONG":
                # support/global
                if sp not in ("near_support", "between"):
                    blockers.append(f"support_position={sp} (need near_support/between)")
                if gt not in ("bullish", "strong_bullish", "flat"):
                    blockers.append(f"global_trend={gt} (need bullish/strong_bullish/flat)")

                # MACD
                if not ((macd_trend == "bullish") or (macd_hist == "up")):
                    blockers.append("MACD: need trend=bullish or hist=up")
                if macd_cross not in ("none", "bullish"):
                    blockers.append(f"macd_crossed={macd_cross} (need none/bullish)")

                # RSI
                if not (30 <= rsi_val <= 62):
                    blockers.append(f"RSI out of 30..62 ({rsi_val})")
                if rsi_trend not in ("up", "neutral"):
                    blockers.append(f"rsi_trend={rsi_trend} (need up/neutral)")
                if rsi_signal not in ("oversold", "neutral", "bullish_momentum"):
                    blockers.append(f"rsi_signal={rsi_signal} (need oversold/neutral/bullish_momentum)")

                # Stoch
                if stoch_signal not in ("oversold", "oversold_cross_up", "neutral"):
                    blockers.append(f"stoch_signal={stoch_signal} (need oversold/oversold_cross_up/neutral)")
                if k_val is not None and d_val is not None:
                    if not (k_val <= 40 or d_val <= 40):
                        blockers.append(f"stoch too high (K={k_val}, D={d_val}, need any‚â§40)")

                # Bollinger
                if not (bb_pos <= 60):
                    blockers.append(f"bollinger_position={bb_pos} (need ‚â§60)")
                if bb_sig not in ("neutral", "bullish_momentum"):
                    blockers.append(f"bollinger_signal={bb_sig} (need neutral/bullish_momentum)")

                # Micro
                if micro1m == "bearish" and delta_1m < 0:
                    blockers.append(f"microtrend_1m=bearish with delta_1m={delta_1m}")

            elif side == "SHORT":
                # support/global
                if sp not in ("near_resistance", "between"):
                    blockers.append(f"support_position={sp} (need near_resistance/between)")
                if gt not in ("bullish", "strong_bullish", "flat", "bearish"):
                    blockers.append(f"global_trend={gt} (need bullish/strong_bullish/flat/bearish)")

                # MACD
                if not ((macd_trend == "bearish") or (macd_hist == "down")):
                    blockers.append("MACD: need trend=bearish or hist=down")
                if macd_cross not in ("none", "bearish"):
                    blockers.append(f"macd_crossed={macd_cross} (need none/bearish)")

                # RSI
                if not (55 <= rsi_val <= 78):
                    blockers.append(f"RSI out of 55..78 ({rsi_val})")
                if rsi_trend not in ("down", "neutral", "up"):
                    blockers.append(f"rsi_trend={rsi_trend} (invalid)")
                if rsi_signal not in ("neutral", "bullish_momentum", "overbought"):
                    blockers.append(f"rsi_signal={rsi_signal} (need neutral/bullish_momentum/overbought)")

                # Stoch
                if stoch_signal not in ("overbought", "neutral"):
                    blockers.append(f"stoch_signal={stoch_signal} (need overbought/neutral)")
                if k_val is not None and d_val is not None:
                    if not (k_val >= 70 or d_val >= 70):
                        blockers.append(f"stoch too low (K={k_val}, D={d_val}, need any‚â•70)")

                # CCI
                if not ((cci_sig in ("overbought", "neutral")) and (cci_val >= 60)):
                    blockers.append(f"CCI weak: {cci_sig} {cci_val} (need sig overbought/neutral and value‚â•60)")

                # Bollinger
                if not (bb_pos >= 65):
                    blockers.append(f"bollinger_position={bb_pos} (need ‚â•65)")
                if bb_sig not in ("neutral", "bearish_momentum", "bullish_momentum"):
                    blockers.append(f"bollinger_signal={bb_sig} (invalid)")

                # Micro
                if micro1m == "bullish" and delta_1m > 0:
                    blockers.append(f"microtrend_1m=bullish with delta_1m={delta_1m}")

            # –Ø–∫—â–æ blockers –ø–æ—Ä–æ–∂–Ω—ñ–π, –∞ —É–≥–æ–¥–∏ –Ω–µ–º–∞ ‚Äî –∑–Ω–∞—á–∏—Ç—å –∞–±–æ —â–µ –Ω–µ –≤—Å—ñ –¥–∞–Ω—ñ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ,
            # –∞–±–æ fast-lane –ø–∞—Ç–µ—Ä–Ω –Ω–µ –∑‚Äô—è–≤–∏–≤—Å—è ‚Äî —Ü–µ —Ç–µ–∂ –∫–æ—Ä–∏—Å–Ω–æ –±–∞—á–∏—Ç–∏ –≤ –ª–æ–≥–∞—Ö.
            if not blockers:
                blockers.append("no hard blockers; waiting for confirmation/fast-lane")

        # —Ñ–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Å
        entry = {
            "timestamp": timestamp,
            "symbol": symbol,
            "side": (str(side).upper() if side else side),
            "reason": safe(reason),
            "blockers": blockers,
            "conditions": minimal
        }

        # –±–µ–∑–ø–µ—á–Ω–µ —á–∏—Ç–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –ª–æ–≥—É
        try:
            existing = []
            if os.path.exists(filepath):
                with open(filepath, "r", encoding="utf-8") as f:
                    existing = json.load(f)
                    if not isinstance(existing, list):
                        existing = []
        except Exception:
            existing = []

        existing.append(entry)

        # –∞—Ç–æ–º–∞—Ä–Ω–∏–π –∑–∞–ø–∏—Å
        tmp = filepath + ".tmp"
        with open(tmp, "w", encoding="utf-8") as f:
            json.dump(existing, f, indent=2, ensure_ascii=False)
        os.replace(tmp, filepath)

    except Exception as e:
        log_error(f"‚ùå log_watchlist_reason (new) –ø–æ–º–∏–ª–∫–∞: {e}")



def monitor_watchlist_candidate():
    import concurrent.futures

    log_debug("–°—Ç–∞—Ä—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Watchlist Candidates")

    def is_open_signal(res: dict) -> bool:
        return isinstance(res, dict) and res.get("open_trade") in ("LONG", "SHORT")

    def process_candidate(item):
        try:
            symbol = item["symbol"]
            side = item["side"]

            snapshot = build_monitor_snapshot(symbol)
            if not snapshot:
                log_watchlist_reason(symbol, side, "‚ùå snapshot is None", {})
                return None

            conditions = convert_snapshot_to_conditions(snapshot)
            if not conditions:
                log_watchlist_reason(symbol, side, "‚ùå conditions is None", {})
                return None

            # –í–∏–∫–ª–∏–∫ —Ñ—ñ–ª—å—Ç—Ä–∞ –∑–∞ –Ω–∞–ø—Ä—è–º–∫–æ–º
            if side == "LONG":
                result = check_trade_conditions_long(conditions)
            elif side == "SHORT":
                result = check_trade_conditions_short(conditions)
            else:
                result = None

            # –ù–µ–º–∞—î —Å–∏–≥–Ω–∞–ª—É ‚Äî —á–µ–∫–∞—î–º–æ –¥–∞–ª—ñ
            if not is_open_signal(result):
                log_debug(f"{symbol}: —â–µ –Ω–µ–º–∞—î —Å–∏–≥–Ω–∞–ª—É {side}")
                log_watchlist_reason(symbol, side, "still waiting for full signal confirmation", conditions)
                return None

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–∑–≥–æ–¥–∂–µ–Ω–æ—Å—Ç—ñ –Ω–∞–ø—Ä—è–º–∫—É
            detected_side = result["open_trade"]
            if detected_side != side:
                log_debug(f"{symbol}: –Ω–∞–ø—Ä—è–º–æ–∫ –Ω–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è ‚Üí {detected_side} ‚â† {side}")
                log_watchlist_reason(symbol, side, "side mismatch", conditions)
                return None

            # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —É–≥–æ–¥—É
            log_message(f"üéØ Watchlist: —É–º–æ–≤–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ –¥–ª—è {symbol} ‚Üí –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ {side}")
            balance = get_usdt_balance()

            behavior_summary = {
                "entry_reason": f"WATCHLIST_TRIGGER_{side}",
                "signals": conditions,
                "volume": conditions.get("volume")  # –º–æ–∂–µ –±—É—Ç–∏ None ‚Äî –æ–∫
            }

            # –û–±–∏—Ä–∞—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—É —Ü—ñ–Ω—É
            price = (
                conditions.get("price")
                or conditions.get("current_price")
                or snapshot.get("price")
                or snapshot.get("current_price")
            )

            target_data = {
                "symbol": symbol,
                "target_price": price,  # –≤–∞–∂–ª–∏–≤–æ —Å–∞–º–µ target_price
                "price": price,
                "volume": conditions.get("volume"),
                "recommended_leverage": None,
                "source": "watchlist"
            }

            execute_scalping_trade(
                target=target_data,
                balance=balance,
                position_side=side,
                behavior_summary=behavior_summary
            )

            log_debug(f"–í–∏–¥–∞–ª–µ–Ω–Ω—è {symbol} –∑ Watchlist")
            return symbol  # –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–∏–º–≤–æ–ª –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è

        except Exception as e:
            log_error(f"‚ùå [monitor_watchlist_candidates] –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {item}: {e}")
            log_watchlist_reason(item.get("symbol", "UNKNOWN"), item.get("side", "UNKNOWN"), f"–ü–æ–º–∏–ª–∫–∞: {e}", {})
            return None

    # === –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É ===
    while True:
        watchlist = load_watchlist() or []
        if not watchlist:
            time.sleep(MONITOR_INTERVAL)
            continue

        with concurrent.futures.ThreadPoolExecutor(max_workers=3) as executor:
            futures = [executor.submit(process_candidate, item) for item in watchlist]
            results = [f.result() for f in futures]
            to_remove = [sym for sym in results if sym]

        if to_remove:
            updated_watchlist = [item for item in watchlist if item["symbol"] not in to_remove]
            save_watchlist(updated_watchlist)

        time.sleep(MONITOR_INTERVAL)


def find_best_scalping_targets():
    """
    üöÄ –ë–æ–π–æ–≤–∏–π —Ä–µ–∂–∏–º:
    - –í—ñ–¥–±—ñ—Ä –º–æ–Ω–µ—Ç –±—ñ–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏/–æ–ø–æ—Ä—É, –∞ —Ç–∞–∫–æ–∂ —É —Å—Ç–∞–Ω—ñ between (–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è –∑–∞ –≥–ª–æ–±–∞–ª—å–Ω–∏–º —Ç—Ä–µ–Ω–¥–æ–º).
    - –Ø–∫—â–æ –ø—Ä–æ–π—à–ª–∞ check_trade_conditions() ‚Üí –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —É–≥–æ–¥–∏.
    - –Ø–∫—â–æ –Ω–µ –ø—Ä–æ–π—à–ª–∞ ‚Üí –¥–æ–¥–∞—î–º–æ –≤ watchlist.json –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.
    - monitor_watchlist_candidate –ø–∏—à–µ –≤ logs/watchlist_debug.json –∫–æ–∂–Ω—ñ 5 —Å–µ–∫.
    - ‚õî –ê–Ω—Ç–∏-—ñ–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä: Innovation/–º–æ–ª–æ–¥—ñ/—Ç–æ–Ω–∫—ñ —Å–∏–º–≤–æ–ª–∏ ‚Äî —Å–∫—ñ–ø–∞—î–º–æ –ø–æ–≤–Ω—ñ—Å—Ç—é.
    """
    try:
        log_message("üö¶ –°—Ç–∞—Ä—Ç find_best_scalping_targets()")

        # ---------------- BG monitors ----------------
        if "monitor_all_open_trades" not in bg_threads:
            t = threading.Thread(target=monitor_all_open_trades, daemon=True)
            t.start()
            bg_threads["monitor_all_open_trades"] = t
            log_debug("monitor_all_open_trades –∑–∞–ø—É—â–µ–Ω–æ")

        if "monitor_watchlist_candidate" not in bg_threads:
            t = threading.Thread(target=monitor_watchlist_candidate, daemon=True)
            t.start()
            bg_threads["monitor_watchlist_candidate"] = t
            log_debug("monitor_watchlist_candidate –∑–∞–ø—É—â–µ–Ω–æ")

        # ---------------- Innovation cache (best-effort) ----------------
        # –û–Ω–æ–≤–ª—é—î–º–æ 1 —Ä–∞–∑ –Ω–∞ –∑–∞–ø—É—Å–∫. –Ø–∫—â–æ –Ω–µ–º–∞—î API/–∫–µ—à—É ‚Äî —Ç–∏—Ö–æ —ñ–¥e–º–æ –¥–∞–ª—ñ.
        try:
            from utils.tools import build_innovation_cache
            build_innovation_cache()
            log_debug("Innovation cache updated")
        except Exception as _e:
            log_debug(f"Innovation cache not updated: {_e}")

        # –§—É–Ω–∫—Ü—ñ—ó/–ø—Ä–∞–ø–æ—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞ –∑ –±–µ–∑–ø–µ—á–Ω–∏–º–∏ –¥–µ—Ñ–æ–ª—Ç–∞–º–∏
        try:
            from config import BLOCK_INNOVATION
            from utils.tools import is_innovation_or_risky_symbol
        except Exception:
            BLOCK_INNOVATION = True
            def is_innovation_or_risky_symbol(symbol, turnover_24h_usd=None, listed_days=None):
                # —Ñ–µ–π–∫–æ–≤–∏–π safe-—Å—Ç–∞–±, –Ω—ñ—á–æ–≥–æ –Ω–µ –±–ª–æ–∫—É—î
                return {"innovation": False, "young": False, "thin": False, "risky": False, "days_listed": None}

        # ---------------- Universe ----------------
        symbols = get_top_symbols(limit=15)
        random.shuffle(symbols)
        log_debug(f"–ú–æ–Ω–µ—Ç–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É: {symbols}")

        watchlist_data = load_watchlist() or []

        for symbol in symbols:
            # ---------- –§—ñ–ª—å—Ç—Ä 1: —à–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ snapshot ----------
            # –ö–æ—Ä–∏—Å—Ç—É—î–º–æ—Å—å –∫–µ—à–µ–º Bybit: innovation / young listing / thin turnover (—è–∫—â–æ –±—É–¥–µ).
            flags = is_innovation_or_risky_symbol(symbol)
            if flags.get("risky") and BLOCK_INNOVATION:
                log_message(f"üßØ [SKIP] {symbol}: innovation={flags.get('innovation')}, "
                            f"young_days={flags.get('days_listed')}, thin={flags.get('thin')}")
                continue

            log_message(f"üéØ –ê–Ω–∞–ª—ñ–∑ {symbol}")

            # ---------- Snapshot ----------
            snapshot = build_monitor_snapshot(symbol)
            if not snapshot:
                log_message(f"‚ö†Ô∏è [SKIP] {symbol} ‚Üí snapshot None")
                continue

            # ---------- –§—ñ–ª—å—Ç—Ä 2: —É—Ç–æ—á–Ω–µ–Ω–Ω—è –ø—ñ—Å–ª—è snapshot (—è–∫—â–æ –∑'—è–≤–∏–≤—Å—è turnover) ----------
            # –í snapshot/conditions —á–∞—Å—Ç–æ —î –æ–±–æ—Ä–æ—Ç. –Ø–∫—â–æ —î ‚Äî —É—Ç–æ—á–Ω—é—î–º–æ thin-—Ñ–ª–∞–≥.
            turnover_24h = (snapshot.get("turnover24hUsd")
                            or snapshot.get("turnover_usd")
                            or snapshot.get("turnover")  # –ø—Ä–æ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫
                            or None)
            try:
                flags = is_innovation_or_risky_symbol(symbol, turnover_24h_usd=turnover_24h)
                if flags.get("risky") and BLOCK_INNOVATION:
                    log_message(f"üßØ [SKIP] {symbol}: risky after snapshot "
                                f"(innovation={flags.get('innovation')}, young_days={flags.get('days_listed')}, thin={flags.get('thin')})")
                    continue
            except Exception:
                pass

            log_debug(f"Snapshot OK –¥–ª—è {symbol}")
            conditions = convert_snapshot_to_conditions(snapshot)
            if not conditions:
                log_message(f"‚ö†Ô∏è [SKIP] {symbol} ‚Üí conditions None")
                continue

            log_debug(f"Conditions OK –¥–ª—è {symbol}")

            # ‚úÖ –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è support_position
            support_position = str(conditions.get("support_position", "unknown")).lower()
            if support_position in {"null", "unknown", ""}:
                support_position = "between"

            global_trend = str(conditions.get("global_trend", "unknown")).lower()

            # ‚úÖ –û–±—Ä–æ–±–ª—è—î–º–æ near_support / near_resistance / between
            result = None
            side = None

            if support_position == "near_support":
                side = "LONG"
                result = check_trade_conditions_long(conditions)

            elif support_position == "near_resistance":
                side = "SHORT"
                result = check_trade_conditions_short(conditions)

            elif support_position == "between":
                # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è –∑–∞ –≥–ª–æ–±–∞–ª—å–Ω–∏–º —Ç—Ä–µ–Ω–¥–æ–º ‚Äî –º‚Äô—è–∫–æ, —è–∫ –¥–æ–º–æ–≤–ª—è–ª–∏—Å—å
                if global_trend in ("bullish", "strong_bullish", "flat"):
                    side = "LONG"
                    result = check_trade_conditions_long(conditions)
                elif global_trend == "bearish":
                    side = "SHORT"
                    result = check_trade_conditions_short(conditions)
                else:
                    log_message(f"‚õî [SKIP] {symbol} ‚Üí BETWEEN, –∞–ª–µ global_trend={global_trend}")
                    side = "LONG"  # –¥–µ—Ñ–æ–ª—Ç, —â–æ–± –≤—ñ–¥–¥–∞—Ç–∏ —É watchlist –∑ –Ω–∞–ø—Ä—è–º–∫–æ–º
                    result = {"add_to_watchlist": True, "watch_reason": f"between + unknown global_trend"}

            else:
                log_message(f"‚õî [SKIP] {symbol} ‚Üí support_position={support_position}")
                continue

            log_message(f"[TRACE] check_trade_conditions({side}) ‚Üí {result}")

            if isinstance(result, dict) and result.get("open_trade") in ["LONG", "SHORT"]:
                # ‚úÖ –í—Å—ñ —É–º–æ–≤–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ ‚Äî –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —É–≥–æ–¥—É
                position_side = result.get("open_trade")
                price = conditions.get("price") or conditions.get("current_price") or snapshot.get("price")
                balance = get_usdt_balance()
                execute_scalping_trade(
                    target={
                        "symbol": symbol,
                        "target_price": price,  # üëà –∫–ª—é—á —Å–∞–º–µ target_price
                        "price": price
                    },
                    balance=balance,
                    position_side=position_side,
                    behavior_summary=None
                )
                log_message(f"üöÄ [TRADE] –í—ñ–¥–∫—Ä–∏—Ç–æ —É–≥–æ–¥—É –ø–æ {symbol} ({position_side})")

            else:
                # ‚è≥ –£–º–æ–≤–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ñ ‚Äî –¥–æ–¥–∞—î–º–æ —É watchlist –∑ –ø—Ä–∏—á–∏–Ω–æ—é
                reason = ""
                if isinstance(result, dict) and result.get("add_to_watchlist"):
                    reason = result.get("watch_reason", "")
                    log_message(f"‚ÑπÔ∏è [WATCH] {symbol} ‚Üí {reason}")

                already_exists = any((item.get("symbol") == symbol) for item in watchlist_data)
                if not already_exists:
                    direction = side if side in ("LONG", "SHORT") else ("LONG" if support_position == "near_support" else "SHORT")
                    add_to_watchlist(
                        symbol=symbol,
                        support_position=support_position,
                        current_price=conditions.get("current_price"),
                        side=direction
                    )
                    # üîÑ –æ–¥—Ä–∞–∑—É –æ–Ω–æ–≤–∏–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫, —â–æ–± –Ω–µ –ø–µ—Ä–µ—Ç–µ—Ä—Ç–∏ —Ñ–∞–π–ª —Å—Ç–∞—Ä–∏–º–∏ –¥–∞–Ω–∏–º–∏
                    watchlist_data.append({
                        "symbol": symbol,
                        "support_position": support_position,
                        "current_price": conditions.get("current_price"),
                        "side": direction
                    })
                    log_message(f"üì• [WATCHLIST] {symbol} –¥–æ–¥–∞–Ω–æ ({support_position}/{direction})")
                else:
                    log_message(f"‚ÑπÔ∏è [WATCHLIST] {symbol} –≤–∂–µ —É —Å–ø–∏—Å–∫—É ‚Üí –ø—Ä–æ–ø—É—Å–∫")

    except Exception as e:
        log_error(f"‚ùå [find_best_scalping_targets] –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        traceback.print_exc()


def execute_scalping_trade(target, balance, position_side, behavior_summary, manual_amount=None, manual_leverage=None):
    """
    üöÄ –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ä–µ–∞–ª—å–Ω—É —É–≥–æ–¥—É —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ Smart Averaging (DCA)
    - –ù–Ü–Ø–ö–ò–• –¥—É–±–ª—é—é—á–∏—Ö –±—ñ—Ä–∂–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π —É —Ü—å–æ–º—É —Ñ–∞–π–ª—ñ
    - –í—Å—ñ –±—ñ—Ä–∂–æ–≤—ñ –¥—ñ—ó ‚Äî —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ executor.OrderExecutor
    """
    try:
        symbol = target["symbol"]
        log_debug(f"–°—Ç–∞—Ä—Ç execute_scalping_trade –¥–ª—è {symbol}")

        # ‚õî –∞–Ω—Ç–∏–¥—É–±–ª—å: —è–∫—â–æ —ñ–Ω—à–∏–π –ø–æ—Ç—ñ–∫ –≤–∂–µ –≤—ñ–¥–∫—Ä–∏–≤–∞—î —Ü–µ–π —Å–∏–º–≤–æ–ª ‚Äî –≤–∏—Ö–æ–¥–∏–º–æ
        if symbol in opening_symbols:
            log_message(f"‚è≥ {symbol} –≤–∂–µ –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è —ñ–Ω—à–∏–º –ø–æ—Ç–æ–∫–æ–º ‚Üí –ø—Ä–æ–ø—É—Å–∫")
            return
        opening_symbols.add(symbol)

        def make_json_safe(obj):
            if isinstance(obj, dict):
                return {str(k): make_json_safe(v) for k, v in obj.items()}
            elif isinstance(obj, list):
                return [make_json_safe(v) for v in obj]
            elif isinstance(obj, (np.integer, np.floating)):
                return float(obj)
            elif isinstance(obj, (np.ndarray, pd.Series, pd.DataFrame)):
                return obj.tolist()
            elif isinstance(obj, (datetime, pd.Timestamp)):
                return obj.isoformat()
            elif isinstance(obj, (int, float, str, bool)) or obj is None:
                return obj
            else:
                return str(obj)

        try:
            # üîÅ —Ñ–æ–ª–±–µ–∫ –±–∞–ª–∞–Ω—Å—É (–¥–ª—è –ª–æ–≥—ñ–≤/–¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏; –Ω–∞ —Ä–æ–∑–º—ñ—Ä –≤—Ö–æ–¥—É —Ü–µ –Ω–µ –≤–ø–ª–∏–≤–∞—î)
            if balance is None:
                balance = get_usdt_balance()

            # üõ° –ª—ñ–º—ñ—Ç –∞–∫—Ç–∏–≤–Ω–∏—Ö —É–≥–æ–¥ (–≥—Ä—É–±–∏–π –≥–µ–π—Ç; –¥–µ—Ç–∞–ª—å–Ω–∏–π ‚Äî –≤ –∞–ª–ª–æ–∫–∞—Ç–æ—Ä—ñ)
            open_now = get_open_trades_count()
            if open_now >= MAX_ACTIVE_TRADES:
                log_message(f"üõë [SAFEGUARD] –õ—ñ–º—ñ—Ç –¥–æ—Å—è–≥–Ω—É—Ç–æ: {open_now} ‚â• {MAX_ACTIVE_TRADES}")
                return

            # üõ° –∞–Ω—Ç–∏–¥—É–±–ª—å –ø–æ —Å–∏–º–≤–æ–ª—É (—è–∫—â–æ –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∞ —É–≥–æ–¥–∞ –ø–æ —Ü—å–æ–º—É —Å–∏–º–≤–æ–ª—É)
            if has_open_trade_for(symbol):
                log_message(f"‚è≥ [SAFEGUARD] –í–∂–µ —î –≤—ñ–¥–∫—Ä–∏—Ç–∞ —É–≥–æ–¥–∞ –ø–æ {symbol} ‚Üí –ø—Ä–æ–ø—É—Å–∫")
                return

            # ======================= [ALLOCATOR] —Ä–µ–∑–µ—Ä–≤ –ø—ñ–¥ –ø–æ–≤–Ω—É DCA-–¥—Ä–∞–±–∏–Ω—É =======================
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –∞–ª–ª–æ–∫–∞—Ç–æ—Ä: —è–∫—â–æ –Ω–µ —Ç—è–≥–Ω–µ–º–æ –ø–æ–≤–Ω–∏–π –ø–ª–∞–Ω ‚Äî –ù–ï –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ.
            alloc = plan_allocation_for_new_trade(symbol)
            if not alloc or not alloc.get("allow"):
                log_message(f"üõë [ALLOCATOR] Blocked {symbol}: {alloc.get('reason') if isinstance(alloc, dict) else 'no_alloc'}")
                return

            allocated_base_margin = float(alloc.get("amount_to_use", 0.0))
            # –î–ª—è –ø—Ä–æ–∑–æ—Ä–æ—Å—Ç—ñ –ª–æ–≥—ñ–≤ ‚Äî —è–∫ –º–∏ –≤–∏–≥–ª—è–¥–∞—î–º–æ –≤—ñ–¥–Ω–æ—Å–Ω–æ –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É
            if "effective_limit" in alloc and "open_trades" in alloc:
                log_message(
                    f"üìä [ALLOCATOR] capacity: open={alloc.get('open_trades')}/{alloc.get('effective_limit')} "
                    f"(desired={alloc.get('desired')}, capacity={alloc.get('capacity_total')})"
                )
            # =========================================================================================

            # üß≠ –Ω–∞–ø—Ä—è–º–æ–∫
            side_norm = (position_side or "").upper()
            if side_norm == "LONG":
                side = "Buy"
            elif side_norm == "SHORT":
                side = "Sell"
            else:
                log_error(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –Ω–∞–ø—Ä—è–º–æ–∫ position_side={position_side} ‚Üí –ø—Ä–æ–ø—É—Å–∫")
                return

            # üß± signals/conditions
            conditions = None
            if isinstance(behavior_summary, dict):
                maybe_signals = behavior_summary.get("signals")
                if isinstance(maybe_signals, dict) and maybe_signals:
                    conditions = maybe_signals

            if not conditions:
                snapshot = build_monitor_snapshot(symbol)
                if not snapshot:
                    log_error(f"‚ùå Snapshot –¥–ª—è {symbol} –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ ‚Üí –ø—Ä–æ–ø—É—Å–∫")
                    return
                conditions = convert_snapshot_to_conditions(snapshot)
                if not conditions:
                    log_error(f"‚ùå Conditions –¥–ª—è {symbol} –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ ‚Üí –ø—Ä–æ–ø—É—Å–∫")
                    return

            # üéØ SCORE ‚Üí —Ç—ñ–ª—å–∫–∏ –¥–ª—è sizing —É —Ç–≤–æ—ó—Ö –ª–æ–≥–∞—Ö (–Ω–∞ —Å—É–º—É –≤–∂–µ –Ω–µ –≤–ø–ª–∏–≤–∞—î)
            score = 0.0
            if isinstance(behavior_summary, dict):
                try:
                    score = float(behavior_summary.get("score", 0.0) or 0.0)
                except Exception:
                    score = 0.0
            if score == 0.0:
                score = 6.0  # –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π –¥–µ—Ñ–æ–ª—Ç

            # ‚öôÔ∏è –ø–ª–µ—áe/—Å—É–º–∞
            try:
                from config import SMART_AVG
            except Exception:
                SMART_AVG = {}

            leverage = (
                manual_leverage
                if manual_leverage is not None
                else (MANUAL_LEVERAGE if USE_MANUAL_LEVERAGE else SMART_AVG.get("leverage", 5))
            )

            # ======================= [ALLOCATOR] –¥–∂–µ—Ä–µ–ª–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ—ó —Å—É–º–∏ =======================
            # manual_amount –º–∞—î –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç, –∞–ª–µ —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è allow=True –≤—ñ–¥ –∞–ª–ª–æ–∫–∞—Ç–æ—Ä–∞
            amount = float(manual_amount) if manual_amount is not None else float(allocated_base_margin)
            if amount <= 0:
                log_message(f"üõë [ALLOCATOR] {symbol}: non-positive amount (amount={amount}) ‚Üí –ø—Ä–æ–ø—É—Å–∫")
                return
            # –ü—ñ–¥—Å—Ç—Ä–∞—Ö—É—î–º–æ—Å—å –≤—ñ–¥ –º—ñ–∫—Ä–æ-–≤—Ö–æ–¥—ñ–≤ –Ω–∏–∂—á–µ –±—ñ—Ä–∂–æ–≤–∏—Ö –º—ñ–Ω—ñ–º—É–º—ñ–≤
            if amount < 5:
                log_message(f"‚ö†Ô∏è –°—É–º–∞ {amount} < $5 ‚Üí –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ $5")
                amount = 5.0
            # =================================================================================

            # üéØ –¶—ñ–ª—å–æ–≤–∞ —Ü—ñ–Ω–∞
            target_price = target.get("target_price")
            if target_price is None:
                target_price = (
                    conditions.get("price")
                    or conditions.get("current_price")
                    or get_current_futures_price(symbol)
                )
            if target_price is None:
                log_error(f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ target_price –¥–ª—è {symbol} ‚Üí –ø—Ä–æ–ø—É—Å–∫")
                return

            log_message(
                f"üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞: {symbol} | –°—É–º–∞(–º–∞—Ä–∂–∞): {amount} | "
                f"–ü–ª–µ—á–µ: {leverage} | Side: {side} | PositionSide: {side_norm}"
            )
            log_message(
                f"üßÆ [ALLOCATOR] reserved_per_trade‚âà{alloc.get('reserved_per_trade'):.2f} USDT | "
                f"slots_left={alloc.get('slots_left', 'n/a')}"
            )

            # ‚ùó –í—Å—ñ –±—ñ—Ä–∂–æ–≤—ñ –¥—ñ—ó ‚Äî —á–µ—Ä–µ–∑ OrderExecutor
            executor = OrderExecutor(
                symbol=symbol,
                side=side,
                amount_to_use=amount,
                target_price=target_price,
                position_side=side_norm,
                leverage=leverage,
                bypass_price_check=True
            )
            result = executor.execute()
            if not result or "entry_price" not in result:
                log_error(f"‚ùå –û—Ä–¥–µ—Ä –Ω–µ –≤—ñ–¥–∫—Ä–∏–≤—Å—è –¥–ª—è {symbol}")
                return

            entry_price = float(result["entry_price"])
            filled_qty = float(result.get("quantity") or 0.0)
            if filled_qty <= 0:
                # –æ—Ü—ñ–Ω–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —á–∏—Å—Ç–æ –¥–ª—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ—ó DCA-—Å—Ç–µ–π—Ç-–º–∞—à–∏–Ω–∏
                try:
                    filled_qty = amount * leverage / max(entry_price, 1e-8)
                except Exception:
                    filled_qty = 0.0

            send_telegram_message(
                f"üöÄ <b>–£–≥–æ–¥–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞:</b> {symbol}\n"
                f"‚û°Ô∏è –ù–∞–ø—Ä—è–º–æ–∫: {side_norm}\n"
                f"üí∏ –°—É–º–∞ (–º–∞—Ä–∂–∞): {amount}\n"
                f"‚ö° –ü–ª–µ—á–µ: {leverage}x\n"
                f"üéØ –¶—ñ–Ω–∞ –≤—Ö–æ–¥—É: {entry_price}\n"
                f"üìà SCORE: {round(score, 2)}"
            )
            log_message(f"‚úÖ –û—Ä–¥–µ—Ä –≤—ñ–¥–∫—Ä–∏—Ç–æ –¥–ª—è {symbol} @ {entry_price}")

            # üóÉÔ∏è trade_id
            ts = datetime.utcnow().strftime('%Y%m%dT%H%M%S%f')
            trade_id = f"{symbol}_{ts}_{uuid4().hex[:6]}"

            decision_summary = {
                "score": float(score),
                "source": ("watchlist" if isinstance(behavior_summary, dict) and str(behavior_summary.get("entry_reason", "")).startswith("WATCHLIST") else "finbest"),
                "note": "No TradeScore; amount derived from allocator/manual",
            }

            # ====================== SMART AVERAGING (DCA) INIT ======================
            dca_enabled = bool(SMART_AVG.get("enabled", True))
            max_adds = int(SMART_AVG.get("max_adds", 5))
            dca_step_pct = float(SMART_AVG.get("dca_step_pct", 0.045))
            dca_mode = str(SMART_AVG.get("dca_mode", "equal"))
            dca_factor = float(SMART_AVG.get("dca_factor", 1.2))
            tp_from_avg_pct = float(SMART_AVG.get("tp_from_avg_pct", 0.01))
            alt_tp_from_avg_pct = float(SMART_AVG.get("alt_tp_from_avg_pct", 0.02))
            max_margin_per_trade = float(SMART_AVG.get("max_margin_per_trade", 600.0))
            min_liq_buffer = float(SMART_AVG.get("min_liq_buffer", 0.40))
            atr_pause_pct = float(SMART_AVG.get("atr_pause_pct", 0.10))
            trend_flip_cut_pct = float(SMART_AVG.get("trend_flip_cut_pct", 0.40))
            cooldown_min = int(SMART_AVG.get("cooldown_min", 20))

            avg_entry = entry_price
            adds_done = 0
            total_margin_used = float(amount)
            total_qty = filled_qty

            # –ü–µ—Ä—à–∏–π TP (–¥–ª—è –ª–æ–≥—ñ–∫–∏; –±—ñ—Ä–∂—É –Ω–µ —á—ñ–ø–∞—î–º–æ)
            tp_price = avg_entry * (1.0 + tp_from_avg_pct) if side_norm == "LONG" else avg_entry * (1.0 - tp_from_avg_pct)

            trade_record = {
                "trade_id": trade_id,
                "symbol": symbol,
                "side": side_norm,
                "entry_price": entry_price,
                "amount": amount,                 # —Å—Ç–∞—Ä—Ç–æ–≤–∞ –º–∞—Ä–∂–∞
                "leverage": leverage,
                "opened": datetime.utcnow().isoformat(),
                "closed": False,
                "signals": make_json_safe(decision_summary),
                "conditions": make_json_safe(conditions),
                "behavior_summary": make_json_safe(behavior_summary),
                "result_percent": None,
                "peak_pnl_percent": None,
                "worst_pnl_percent": None,
                "exit_reason": None,
                "duration": None,

                # >>> DCA state <<<
                "smart_avg": {
                    "enabled": dca_enabled,
                    "avg_entry": avg_entry,
                    "adds_done": adds_done,
                    "max_adds": max_adds,
                    "dca_step_pct": dca_step_pct,
                    "dca_mode": dca_mode,
                    "dca_factor": dca_factor,
                    "tp_from_avg_pct": tp_from_avg_pct,
                    "alt_tp_from_avg_pct": alt_tp_from_avg_pct,
                    "tp_price": tp_price,
                    "tp_order_id": None,
                    "total_margin_used": total_margin_used,
                    "total_qty": total_qty,
                    "max_margin_per_trade": max_margin_per_trade,
                    "min_liq_buffer": min_liq_buffer,
                    "atr_pause_pct": atr_pause_pct,
                    "trend_flip_cut_pct": trend_flip_cut_pct,
                    "cooldown_min": cooldown_min
                }
            }

            # ‚úÖ –∞–∫—Ç–∏–≤–Ω—ñ —Ç—Ä–µ–π–¥–∏ + –ª–æ–≥
            from utils.logger import append_active_trade
            append_active_trade(trade_record)

            from utils.signal_logger import append_signal_record
            append_signal_record(trade_record)

            try:
                if 'update_active_trade' in globals():
                    update_active_trade(trade_id, trade_record)
            except Exception:
                pass

        finally:
            opening_symbols.discard(symbol)

    except Exception as e:
        log_error(f"‚ùå [execute_scalping_trade] –ü–æ–º–∏–ª–∫–∞: {e}\n{traceback.format_exc()}")


def manage_open_trade(symbol, entry_price, side, amount, leverage, behavior_summary,
                      trade_id=None, sessions=None, check_interval=1, entry_time=None, signals=None):
    """
    üëÅ Smart Averaging (DCA) –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤—ñ–¥–∫—Ä–∏—Ç–æ—ó —É–≥–æ–¥–∏ ‚Äî BOT-ONLY TP:
    - –ë–µ–∑ SL.
    - TP —Ä–∞—Ö—É—î—Ç—å—Å—è –≤—ñ–¥ –°–ï–†–ï–î–ù–¨–û–á (avg_entry) –Ω–∞ +tp_from_avg_pct (LONG) / -tp_from_avg_pct (SHORT)
    - –î–æ–∫—É–ø–∫–∏: –∑–∞ "–¥—Ä–∞–±–∏–Ω–æ—é" (ladder) –∫–æ–∂–Ω—ñ dca_step_pct –≤—ñ–¥ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è
      –∞–±–æ, –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, –≤—ñ–¥ avg ("avg") —á–∏ –≤—ñ–¥ entry0 –∫–æ–º–ø–∞—É–Ω–¥–æ–º ("entry0").
    - –ù—ñ—è–∫–∏—Ö –ø—Ä—è–º–∏—Ö bybit-–≤–∏–∫–ª–∏–∫—ñ–≤ —É —Ü—å–æ–º—É —Ñ–∞–π–ª—ñ ‚Äî –ª–∏—à–µ OrderExecutor –∑ executor.py
    """
    log_message(f"üëÅ [DCA] –°—Ç–∞—Ä—Ç manage_open_trade –¥–ª—è {symbol} ({side}) @ {entry_price}")

    symbol_clean = str(symbol).split("_")[0]
    if entry_time is None:
        entry_time = datetime.now()

    is_long = side.upper() in ["LONG", "BUY"]
    entry_price = Decimal(str(entry_price))

    # ===== –ö–æ–Ω—Ñ—ñ–≥ =====
    try:
        from config import SMART_AVG, TP_EPSILON, USE_EXCHANGE_TP
    except Exception:
        SMART_AVG = {}
        TP_EPSILON = 0.0007
        USE_EXCHANGE_TP = False  # –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º ‚Äî BOT-only

    dca_enabled           = bool(SMART_AVG.get("enabled", True))
    base_margin           = float(SMART_AVG.get("base_margin", float(amount or 0.0) or 100.0))
    max_adds              = int(SMART_AVG.get("max_adds", 5))
    dca_step_pct          = float(SMART_AVG.get("dca_step_pct", 0.045))  # 0.035 = 3.5%
    dca_mode              = str(SMART_AVG.get("dca_mode", "equal"))
    dca_factor            = float(SMART_AVG.get("dca_factor", 1.2))
    tp_from_avg_pct       = float(SMART_AVG.get("tp_from_avg_pct", 0.01))
    alt_tp_from_avg_pct   = float(SMART_AVG.get("alt_tp_from_avg_pct", 0.02))
    max_margin_per_trade  = float(SMART_AVG.get("max_margin_per_trade", (float(amount or 0.0) + 500.0)))
    min_liq_buffer        = float(SMART_AVG.get("min_liq_buffer", 0.40))
    atr_pause_pct         = float(SMART_AVG.get("atr_pause_pct", 0.10))
    trend_flip_cut_pct    = float(SMART_AVG.get("trend_flip_cut_pct", 0.0))
    cooldown_min          = int(SMART_AVG.get("cooldown_min", 20))
    anchor_default        = str(SMART_AVG.get("anchor", "ladder")).lower()  # "ladder" | "avg" | "entry0"

    # ===== –°—Ç–∞–Ω DCA –∑ ActiveTrades (—è–∫—â–æ —î) =====
    smart = None
    try:
        if trade_id and 'get_active_trade' in globals():
            tr = get_active_trade(trade_id)
            if tr and isinstance(tr, dict):
                smart = tr.get("smart_avg")
    except Exception as e:
        log_error(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ active_trade –¥–ª—è {trade_id}: {e}")

    if not smart:
        try:
            init_qty = (float(amount) * float(leverage)) / float(entry_price)
        except Exception:
            init_qty = 0.0

        # --- —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è "–¥—Ä–∞–±–∏–Ω–∏" ---
        entry0_init = float(entry_price)
        step_init = float(dca_step_pct)
        if is_long:
            ladder_next_init = entry0_init * (1.0 - step_init)
        else:
            ladder_next_init = entry0_init * (1.0 + step_init)

        smart = {
            "enabled": dca_enabled,
            "avg_entry": float(entry_price),
            "adds_done": 0,
            "max_adds": max_adds,
            "dca_step_pct": dca_step_pct,
            "dca_mode": dca_mode,
            "dca_factor": dca_factor,
            "tp_from_avg_pct": tp_from_avg_pct,
            "alt_tp_from_avg_pct": alt_tp_from_avg_pct,
            "tp_price": float(entry_price * (Decimal("1")+Decimal(str(tp_from_avg_pct)) if is_long else Decimal("1")-Decimal(str(tp_from_avg_pct)))),
            "tp_order_id": None,  # –±—ñ—Ä–∂–æ–≤–∏–π TP –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ (—è–∫—â–æ USE_EXCHANGE_TP=False)
            "total_margin_used": float(amount or 0.0),
            "total_qty": init_qty,
            "max_margin_per_trade": max_margin_per_trade,
            "min_liq_buffer": min_liq_buffer,
            "atr_pause_pct": atr_pause_pct,
            "trend_flip_cut_pct": trend_flip_cut_pct,
            "cooldown_min": cooldown_min,

            # --- –Ω–æ–≤—ñ –∫–ª—é—á—ñ –¥–ª—è "–¥—Ä–∞–±–∏–Ω–∏" ---
            "anchor": anchor_default,                 # "ladder" | "avg" | "entry0"
            "entry0": entry0_init,                    # –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –≤—Ö—ñ–¥
            "ladder_next_price": float(ladder_next_init)  # –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –¥–ª—è add
        }

    # –õ–æ–∫–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
    avg_entry = Decimal(str(smart.get("avg_entry", float(entry_price))))
    adds_done = int(smart.get("adds_done", 0))
    total_margin_used = float(smart.get("total_margin_used", float(amount or 0.0)))
    total_qty = float(smart.get("total_qty", 0.0))
    tp_price = Decimal(str(smart.get("tp_price", float(avg_entry * (Decimal("1")+Decimal(str(tp_from_avg_pct)) if is_long else Decimal("1")-Decimal(str(tp_from_avg_pct)))))))
    tp_order_id = smart.get("tp_order_id")

    # –Ω–æ–≤—ñ –ø–æ–ª—è —Å—Ç–∞–Ω—É (–±–µ–∫–≤–∞—Ä–¥-—Å—É–º—ñ—Å–Ω–æ)
    anchor_mode = str(smart.get("anchor", anchor_default)).lower()
    entry0 = Decimal(str(smart.get("entry0", float(entry_price))))
    ladder_next_price = Decimal(str(smart.get("ladder_next_price", float(entry_price * (Decimal("1")-Decimal(str(dca_step_pct))) if is_long else entry_price * (Decimal("1")+Decimal(str(dca_step_pct)))))))

    # --- –∞–Ω—Ç–∏-—Å–ø–∞–º –º—ñ–∂ –¥–æ–∫—É–ø–∫–∞–º–∏ (—Å–µ–∫) ---
    MIN_SECONDS_BETWEEN_ADDS = int(SMART_AVG.get("min_seconds_between_adds", 45))
    _last_add_ts = 0.0

    # --- –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ API-–ø–æ–º–∏–ª–æ–∫ ---
    _api_fail_streak = 0

    peak_pnl_percent = -9999.0
    worst_pnl_percent =  9999.0
    trade_closed = False

    def save_state():
        if not trade_id:
            return
        smart["avg_entry"] = float(avg_entry)
        smart["adds_done"] = int(adds_done)
        smart["total_margin_used"] = float(total_margin_used)
        smart["total_qty"] = float(total_qty)
        smart["tp_price"] = float(tp_price)
        smart["tp_order_id"] = tp_order_id
        # –Ω–æ–≤—ñ
        smart["anchor"] = anchor_mode
        smart["entry0"] = float(entry0)
        smart["ladder_next_price"] = float(ladder_next_price)
        try:
            if 'update_active_trade' in globals():
                update_active_trade(trade_id, {"smart_avg": smart})
        except Exception as e:
            log_error(f"‚ö†Ô∏è update_active_trade failed –¥–ª—è {trade_id}: {e}")

    def calc_tp_from_avg():
        return avg_entry * (Decimal("1")+Decimal(str(tp_from_avg_pct)) if is_long else Decimal("1")-Decimal(str(tp_from_avg_pct)))

    # === –ü–æ—Ä—ñ–≥ –¥–æ–∫—É–ø–∫–∏ ===
    def next_dca_price():
        s = Decimal(str(dca_step_pct))  # 0.035 = 3.5%
        if anchor_mode == "avg":
            return avg_entry * (Decimal("1")-s if is_long else Decimal("1")+s)
        elif anchor_mode == "entry0":
            # –∫–æ–º–ø–∞—É–Ω–¥ –≤—ñ–¥ –ø–µ—Ä—à–æ–≥–æ –≤—Ö–æ–¥—É: entry0 * (1¬±s)^(adds_done+1)
            power = Decimal(str(adds_done + 1))
            factor = (Decimal("1")-s) if is_long else (Decimal("1")+s)
            return entry0 * (factor ** power)
        else:
            # "ladder" ‚Äî –≤—ñ–¥ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è, —â–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —É —Å—Ç–∞–Ω—ñ
            return ladder_next_price

    def price_ok_for_dca(cur):
        target = next_dca_price()
        return (cur <= target) if is_long else (cur >= target)

    # === PNL —Ç–∞ TP-–≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä–∏—Ç—Ç—è–º ===
    def _get_taker_fee_rate():
        return 0.0006  # ‚âà0.06% Bybit Taker

    def compute_break_even_with_fees(avg_entry_d: Decimal) -> Decimal:
        fee = _get_taker_fee_rate()
        be = float(avg_entry_d) * (1.0 + fee * 2.0 + 1e-4)
        return Decimal(str(be))

    def get_safe_price(symbol_str: str) -> Decimal:
        return Decimal(str(get_current_futures_price(symbol_str)))

    def finalize_trade(reason, final_price):
        nonlocal peak_pnl_percent, worst_pnl_percent, trade_closed, total_qty

        if trade_closed:
            log_debug(f"‚è≠ finalize_trade –≤–∂–µ –≤–∏–∫–ª–∏–∫–∞–Ω–æ —Ä–∞–Ω—ñ—à–µ –¥–ª—è {symbol_clean} ‚Üí —Å–∫—ñ–ø")
            return

        be = compute_break_even_with_fees(avg_entry)
        if is_long:
            pnl_ratio = (Decimal(str(final_price)) - be) / be
        else:
            pnl_ratio = (be - Decimal(str(final_price))) / be
        pnl_percent = float(pnl_ratio * Decimal(str(leverage)) * Decimal("100"))

        duration_seconds = (datetime.now() - entry_time).total_seconds()
        duration_str = str(timedelta(seconds=int(duration_seconds)))
        result = "WIN" if pnl_percent > 0 else "LOSS" if pnl_percent < 0 else "BREAKEVEN"

        executor = OrderExecutor(
            symbol=symbol_clean,
            side=("Sell" if is_long else "Buy"),
            position_side=side,
            leverage=leverage,
            amount_to_use=0.0,
            bypass_price_check=True
        )
        closed_ok = False
        try:
            closed_ok = bool(executor.close_position())
        except Exception as e:
            log_error(f"‚ùå close_position exception –¥–ª—è {symbol_clean}: {e}")
            closed_ok = False

        if not closed_ok:
            log_error(f"‚ùå –ù–ï –í–î–ê–õ–û–°–Ø –∑–∞–∫—Ä–∏—Ç–∏ {symbol_clean} ({reason}) ‚Üí –∑–∞–ª–∏—à–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥")
            return

        trade_closed = True
        total_qty = 0.0

        try:
            update_signal_record(trade_id, {
                "closed": True,
                "close_time": datetime.utcnow().isoformat(),
                "exit_reason": reason,
                "result_percent": round(pnl_percent, 2),
                "peak_pnl_percent": round(peak_pnl_percent, 2),
                "worst_pnl_percent": round(worst_pnl_percent, 2),
                "duration": duration_str,
                "result": result
            })
        except Exception:
            pass

        try:
            if signals:
                log_final_trade_result(
                    symbol=symbol_clean,
                    trade_id=trade_id,
                    entry_price=float(avg_entry),
                    exit_price=float(final_price),
                    result=result,
                    peak_pnl=round(peak_pnl_percent, 2),
                    worst_pnl=round(worst_pnl_percent, 2),
                    duration=duration_str,
                    exit_reason=reason,
                    snapshot=signals
                )
        except Exception as e:
            log_message(f"üìä –ó–∞–ø–∏—Å —Ç—Ä–µ–π–¥—É {trade_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É signal_stats.json (fallback ok)")
            log_error(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–∏—Å–∞—Ç–∏ —É signal_stats: {e}")

        send_telegram_message(
            f"üì¥ <b>–£–≥–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:</b> {symbol_clean}\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            f"–ü–ª–µ—á–µ: {leverage}x\n"
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result} | PnL: {round(pnl_percent, 2)}%"
        )

        try:
            if trade_id:
                mark_trade_closed(trade_id, {
                    "exit_reason": reason,
                    "result_percent": round(pnl_percent, 2),
                    "closed": True,
                    "close_time": datetime.utcnow().isoformat()
                })
                remove_active_trade(trade_id)
        except Exception as e:
            log_error(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ ActiveTrades –¥–ª—è {trade_id}: {e}")

    # ===== –ü–æ—á–∞—Ç–∫–æ–≤–∏–π TP ‚Äî –¢–Ü–õ–¨–ö–ò –ª–æ–≥ =====
    if not tp_order_id:
        try:
            tp_price = calc_tp_from_avg()
            if USE_EXCHANGE_TP and 'place_or_update_tp' in globals() and float(total_qty) > 0:
                tp_order_id = place_or_update_tp(
                    symbol=symbol_clean,
                    side=side,
                    quantity=total_qty,
                    avg_entry=float(avg_entry),
                    tp_from_avg_pct=float(tp_from_avg_pct)
                )
                log_message(f"üéØ [DCA] –ë—ñ—Ä–∂–æ–≤–∏–π TP –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {symbol_clean} {side}: {float(tp_price):.6f} (qty‚âà{total_qty:.6f})")
            else:
                log_message(f"‚ÑπÔ∏è [DCA] –ü–ª–∞–Ω–æ–≤–∏–π TP (bot-only) {symbol_clean} {side}: {float(tp_price):.6f} (qty‚âà{total_qty:.6f})")
        except Exception as _tp_err:
            log_message(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ TP: {type(_tp_err).__name__}: {_tp_err}")
    save_state()

    # ===== –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª =====
    try:
        while True:
            current_price = Decimal(str(get_current_futures_price(symbol_clean)))

            # üåê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–∑–∏—Ü—ñ—ó
            exists = None
            try:
                exists = check_position_with_retry(symbol_clean, side, retries=3, delay=2)
            except Exception as _chk_err:
                exists = None
                log_error(f"[DCA] check_position error for {symbol_clean}: {type(_chk_err).__name__}: {_chk_err}")

            if exists is None:
                _api_fail_streak += 1
                if _api_fail_streak >= 3:
                    log_message(f"‚è∏ [DCA] API unstable (streak={_api_fail_streak}) ‚Üí –ø–∞—É–∑–∞ –±–µ–∑ –¥—ñ–π")
                time.sleep(max(3, check_interval))
                continue
            else:
                _api_fail_streak = 0

            if exists is False:
                log_message(f"‚ÑπÔ∏è [DCA] –ü–æ–∑–∏—Ü—ñ—è {symbol_clean} –≤—ñ–¥—Å—É—Ç–Ω—è (0 qty) ‚Üí –≤–∏—Ö—ñ–¥ –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –±–µ–∑ –∑–∞–∫—Ä–∏—Ç—Ç—è.")
                break

            # PnL –≤—ñ–¥ —Å–µ—Ä–µ–¥–Ω—å–æ—ó
            pnl = ((current_price - avg_entry) / avg_entry)
            if not is_long:
                pnl *= -1
            pnl_percent = float(pnl * Decimal(str(leverage)) * Decimal("100"))

            if pnl_percent > peak_pnl_percent:
                peak_pnl_percent = pnl_percent
            if pnl_percent < worst_pnl_percent:
                worst_pnl_percent = pnl_percent

            log_message(
                f"üì° [DCA] {symbol_clean} Px: {current_price}, PnL(avg): {round(pnl_percent, 2)}% "
                f"(Peak: {round(peak_pnl_percent, 2)}%, Worst: {round(worst_pnl_percent, 2)}%) "
                f"| avg={float(avg_entry):.6f}, adds={adds_done}/{max_adds}"
            )

            # –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Ä–æ–≥—É –¥–æ–∫—É–ø–∫–∏
            need_px = next_dca_price()
            log_message(f"[DCA] need {'<=' if is_long else '>='} {float(need_px):.6f}; cur={float(current_price):.6f}; "
                        f"anchor={anchor_mode}; step={dca_step_pct*100:.2f}%; adds={adds_done}/{max_adds}")

            # ====== BOT-ONLY TP –∑ Œµ-–¥–æ–ø—É—Å–∫–æ–º + –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è PnL ======
            tp_price = calc_tp_from_avg()
            eps = Decimal(str(TP_EPSILON))
            hit_tp = ((is_long and current_price >= (tp_price * (Decimal("1") - eps)))
                      or ((not is_long) and current_price <= (tp_price * (Decimal("1") + eps))))
            if hit_tp:
                px1 = get_safe_price(symbol_clean)
                time.sleep(0.5)
                px2 = get_safe_price(symbol_clean)
                cond_second = ((is_long and px2 >= tp_price) or ((not is_long) and px2 <= tp_price))
                if not cond_second:
                    log_message(f"‚è∏ [TP-VERIFY] {symbol_clean} —É–º–æ–≤–∞ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –≤–¥—Ä—É–≥–µ: {float(px1):.6f}->{float(px2):.6f} vs TP {float(tp_price):.6f}")
                    time.sleep(check_interval); continue

                be = compute_break_even_with_fees(avg_entry)
                px_eff = px2
                pnl_ratio = ((px_eff - be) / be) if is_long else ((be - px_eff) / be)
                pnl_percent_est = float(pnl_ratio * Decimal(str(leverage)) * Decimal("100"))
                if pnl_percent_est <= 0.0:
                    log_message(f"‚è∏ [TP-VERIFY] {symbol_clean} –æ—á—ñ–∫—É–≤–∞–Ω–∏–π PnL‚â§0 ({pnl_percent_est:.2f}%) ‚Üí –Ω–µ –∑–∞–∫—Ä–∏–≤–∞—î–º–æ —è–∫ TP")
                    time.sleep(check_interval); continue

                log_message(f"‚úÖ [TP-VERIFY] {symbol_clean} TP –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ: px={float(px_eff):.6f} vs TP={float(tp_price):.6f} | estPnL={pnl_percent_est:.2f}%")
                finalize_trade("Take Profit (verified)", px_eff)
                break

            # ====== DCA: –¥–æ–∫—É–ø–∫–∞ ======
            if dca_enabled and adds_done < max_adds and price_ok_for_dca(current_price):
                # –∫—É–ª–¥–∞—É–Ω –º—ñ–∂ –¥–æ–∫—É–ø–∫–∞–º–∏
                now_ts = time.time()
                if now_ts - _last_add_ts < MIN_SECONDS_BETWEEN_ADDS:
                    log_debug(f"[DCA] skip add: {now_ts - _last_add_ts:.1f}s < {MIN_SECONDS_BETWEEN_ADDS}s")
                    time.sleep(check_interval); continue

                # ATR-–ø–∞—É–∑–∞
                if atr_pause_pct > 0:
                    try:
                        snapshot = build_monitor_snapshot(symbol_clean)
                        cond = convert_snapshot_to_conditions(snapshot) if snapshot else {}
                        atrp = float(cond.get("atr_percent") or 0.0)
                        if atrp and atrp >= (atr_pause_pct * 100.0):
                            log_message(f"‚è∏ [DCA] ATR%={atrp:.2f} ‚â• {atr_pause_pct*100:.0f}% ‚Üí –ø–∞—É–∑–∞ –¥–æ–∫—É–ø–∫–∏")
                            time.sleep(check_interval); continue
                    except Exception:
                        pass

                # –†–æ–∑–º—ñ—Ä –¥–æ–¥–∞—Ç–∫—É
                add_margin = base_margin * (dca_factor ** adds_done) if dca_mode == "progressive" else base_margin

                # –°—Ç–µ–ª—è –º–∞—Ä–∂—ñ
                if (total_margin_used + add_margin) > max_margin_per_trade:
                    log_message(f"üõë [DCA] max_margin_per_trade –¥–æ—Å—è–≥–Ω—É—Ç–æ ({total_margin_used + add_margin:.2f} > {max_margin_per_trade:.2f}) ‚Üí –¥–æ–∫—É–ø–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞")
                    time.sleep(check_interval); continue

                # –ë—É—Ñ–µ—Ä –¥–æ –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó
                can_add = True
                if min_liq_buffer > 0 and 'has_liq_buffer_after_add' in globals():
                    try:
                        approx_qty = float(add_margin) * float(leverage) / float(current_price)
                        can_add = bool(has_liq_buffer_after_add(symbol_clean, side, approx_qty, min_liq_buffer, leverage))
                    except Exception:
                        can_add = True
                if not can_add:
                    log_message(f"üõë [DCA] –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π –±—É—Ñ–µ—Ä –¥–æ –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ—ó ‚Üí –¥–æ–∫—É–ø–∫–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞")
                    time.sleep(check_interval); continue

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–æ–∫—É–ø–∫—É
                executor = OrderExecutor(
                    symbol=symbol_clean,
                    side=("Buy" if is_long else "Sell"),
                    position_side=side,
                    amount_to_use=float(add_margin),
                    leverage=leverage,
                    target_price=float(current_price)
                )
                ok = False
                fill_price = float(current_price)
                filled_qty = 0.0
                try:
                    res = executor.execute()
                    ok = bool(res and res.get("entry_price"))
                    if ok:
                        fill_price = float(res["entry_price"])
                        filled_qty = float(res.get("quantity") or (add_margin * leverage / fill_price))
                except Exception as e:
                    log_error(f"‚ùå [DCA] execute() –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol_clean}: {e}")

                if not ok:
                    log_message(f"‚ö†Ô∏è [DCA] –î–æ–∫—É–ø–∫–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞ –¥–ª—è {symbol_clean}")
                    time.sleep(check_interval); continue

                # –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ —Å–µ—Ä–µ–¥–Ω—å–æ—ó
                prev_qty = total_qty
                prev_avg = float(avg_entry)
                total_qty = prev_qty + filled_qty
                if total_qty <= 0:
                    log_error(f"‚ùå [DCA] –ê–Ω–æ–º–∞–ª—ñ—è total_qty <= 0 –ø—ñ—Å–ª—è –¥–æ–∫—É–ø–∫–∏")
                    time.sleep(check_interval); continue
                avg_entry = Decimal(str((prev_avg * prev_qty + fill_price * filled_qty) / total_qty))
                total_margin_used += float(add_margin)
                adds_done += 1
                _last_add_ts = now_ts

                # –ó—Ä—É—à—É—î–º–æ "–¥—Ä–∞–±–∏–Ω—É" –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–≤–µ–Ω—å
                s = Decimal(str(dca_step_pct))
                if anchor_mode == "ladder":
                    ladder_next_price = ladder_next_price * ((Decimal("1") - s) if is_long else (Decimal("1") + s))
                # –¥–ª—è "entry0" —Ä—ñ–≤–µ–Ω—å —Ä–∞—Ö—É—î—Ç—å—Å—è –ø–æ adds_done, –¥–ª—è "avg" ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ —Ç—Ä–µ–±–∞

                # –û–Ω–æ–≤–ª–µ–Ω–µ TP
                tp_price = calc_tp_from_avg()
                if USE_EXCHANGE_TP and 'place_or_update_tp' in globals():
                    try:
                        tp_order_id = place_or_update_tp(
                            symbol=symbol_clean,
                            side=side,
                            quantity=total_qty,
                            avg_entry=float(avg_entry),
                            tp_from_avg_pct=float(tp_from_avg_pct)
                        )
                        log_message(f"üéØ [DCA] –ë—ñ—Ä–∂–æ–≤–∏–π TP –æ–Ω–æ–≤–ª–µ–Ω–æ {symbol_clean} {side}: {float(tp_price):.6f} (qty‚âà{total_qty:.6f})")
                    except Exception as _tp_err:
                        log_message(f"‚ö†Ô∏è [DCA] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ TP: {type(_tp_err).__name__}: {_tp_err}")
                else:
                    log_message(f"‚ÑπÔ∏è [DCA] –ù–æ–≤–∏–π –ø–ª–∞–Ω–æ–≤–∏–π TP (bot-only): {float(tp_price):.6f}")

                save_state()

                send_telegram_message(
                    f"‚ûï <b>DCA –¥–æ–¥–∞–Ω–æ</b> {symbol_clean}\n"
                    f"–°—Ö–æ–¥–∏–Ω–∫–∞: {adds_done}/{max_adds}\n"
                    f"Fill: {fill_price}\n"
                    f"–ù–æ–≤–∞ —Å–µ—Ä–µ–¥–Ω—è: {float(avg_entry):.6f}\n"
                    f"–ù–æ–≤–∏–π TP: {float(tp_price):.6f}\n"
                    f"üéØ –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–≤–µ–Ω—å: {float(next_dca_price()):.6f} (anchor={anchor_mode})"
                )

            # ===== –û–ø—Ü—ñ–π–Ω–∏–π cut –ø—Ä–∏ —Ä–æ–∑–≤–æ—Ä–æ—Ç—ñ —Ç—Ä–µ–Ω–¥—É (—á–∞—Å—Ç–∫–æ–≤–∏–π) =====
            if trend_flip_cut_pct > 0:
                try:
                    snapshot = build_monitor_snapshot(symbol_clean)
                    cond = convert_snapshot_to_conditions(snapshot) if snapshot else {}
                    gtrend = str(cond.get("global_trend", "")).lower()
                    flip_bad = (is_long and gtrend in {"bearish", "strong_bearish"}) or ((not is_long) and gtrend in {"bullish", "strong_bullish"})
                    if flip_bad and total_qty > 0:
                        cut_qty = total_qty * float(trend_flip_cut_pct)
                        try:
                            ex = OrderExecutor(
                                symbol=symbol_clean,
                                side=("Sell" if is_long else "Buy"),
                                position_side=side,
                                leverage=leverage,
                                amount_to_use=0.0,
                                bypass_price_check=True
                            )
                            if hasattr(ex, "close_position_qty"):
                                ok_cut = bool(ex.close_position_qty(cut_qty))
                                if ok_cut:
                                    total_qty -= cut_qty
                                    if USE_EXCHANGE_TP and 'place_or_update_tp' in globals():
                                        tp_order_id = place_or_update_tp(
                                            symbol=symbol_clean,
                                            side=side,
                                            quantity=total_qty,
                                            avg_entry=float(avg_entry),
                                            tp_from_avg_pct=float(tp_from_avg_pct)
                                        )
                                    save_state()
                                    log_message(f"‚úÇÔ∏è [DCA] Trend-flip cut: —Å–∫–æ—Ä–æ—á–µ–Ω–æ {cut_qty:.6f} {symbol_clean}. –ó–∞–ª–∏—à–æ–∫ qty={total_qty:.6f}")
                            else:
                                log_message("‚ÑπÔ∏è close_position_qty –≤—ñ–¥—Å—É—Ç–Ω—è –≤ executor.py ‚Üí –ø—Ä–æ–ø—É—Å–∫–∞—é —á–∞—Å—Ç–∫–æ–≤–∏–π cut")
                        except Exception as e:
                            log_error(f"‚ö†Ô∏è [DCA] Trend-flip cut –ø–æ–º–∏–ª–∫–∞: {e}")
                except Exception:
                    pass

            time.sleep(check_interval)

    except Exception as e:
        log_error(f"‚ùå [manage_open_trade] –ü–æ–º–∏–ª–∫–∞: {e}")



def adjust_risk_by_volatility(symbol, base_leverage=50):
    """
    üõ°Ô∏è –ê–¥–∞–ø—Ç–∏–≤–Ω–µ –ø–ª–µ—á–µ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ:
    - –ù–∏–∑—å–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å ‚Üí –±—ñ–ª—å—à–µ –ø–ª–µ—á–µ
    - –í–∏—Å–æ–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å ‚Üí –º–µ–Ω—à–µ –ø–ª–µ—á–µ
    """
    try:
        volatility = get_volatility(symbol)

        if volatility == "very_low":
            adjusted_leverage = min(base_leverage + 20, 75)  # –î–æ–¥–∞—î–º–æ –ø–ª–µ—á–µ –Ω–∞ —Ç–∏—Ö–æ–º—É —Ä–∏–Ω–∫—É
        elif volatility == "high":
            adjusted_leverage = max(base_leverage - 20, 10)  # –ó–º–µ–Ω—à—É—î–º–æ –ø–ª–µ—á–µ –Ω–∞ –≤–∏—Å–æ–∫—ñ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
        else:
            adjusted_leverage = base_leverage  # –ù–æ—Ä–º–∞–ª—å–Ω–µ –ø–ª–µ—á–µ

        log_message(f"‚öôÔ∏è –ê–¥–∞–ø—Ç–∏–≤–Ω–µ –ø–ª–µ—á–µ –¥–ª—è {symbol}: {adjusted_leverage}x (–≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: {volatility})")
        return adjusted_leverage

    except Exception as e:
        log_error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É adjust_risk_by_volatility –¥–ª—è {symbol}: {e}")
        return base_leverage



def monitor_all_open_trades():
    """
    üîÑ –ë–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å –≤—Å—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ —É–≥–æ–¥–∏ –Ω–∞–ø—Ä—è–º—É –∑ –±—ñ—Ä–∂—ñ (Bybit API).
    ‚ö†Ô∏è –ù–µ –ø–µ—Ä–µ—Ç–∏—Ä–∞—î –ø–æ–≤–Ω–∏–π ActiveTrades.json; —Å–ø—Ä–æ—â–µ–Ω–∏–π —Å—Ç–∞–Ω –ø–∏—à–µ –≤ ACTIVE_TRADES_FILE_SIMPLE.
    """
    log_message("üö¶ [DEBUG] –°—Ç–∞—Ä—Ç monitor_all_open_trades() (LIVE API)")

    def monitor_trade_thread(trade_id, trade):
        try:
            symbol = trade.get("symbol")
            entry_price = trade.get("entry_price")
            side = trade.get("side", "LONG")
            amount = trade.get("amount", 0.0)
            leverage = trade.get("leverage", 10)
            summary = trade.get("behavior_summary", {})
            sessions = trade.get("monitoring_sessions", [])

            log_message(f"üëÅ [DEBUG] –°—Ç–∞—Ä—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —É–≥–æ–¥–∏ {trade_id} ({symbol})")

            manage_open_trade(
                symbol, entry_price, side, amount, leverage, summary, trade_id, sessions
            )

        except Exception as e:
            log_error(f"‚ùå monitor_trade_thread({trade_id}): {e}")
        finally:
            active_threads.pop(trade_id, None)
            log_message(f"üßπ –ü–æ—Ç—ñ–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É {trade_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ active_threads")

    while True:
        try:
            # üõ°Ô∏è –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó –∑ –±—ñ—Ä–∂—ñ
            response = bybit.get_positions(category="linear", settleCoin="USDT")
            positions = response.get("result", {}).get("list", []) or []

            # ‚è≥ –Ø–∫—â–æ –ø—É—Å—Ç–æ ‚Äî –∫—ñ–ª—å–∫–∞ —Ä–µ—Ç—Ä–∞—ó–≤
            if not positions:
                for attempt in range(1, 4):
                    time.sleep(2)
                    response = bybit.get_positions(category="linear", settleCoin="USDT")
                    positions = response.get("result", {}).get("list", []) or []
                    if positions:
                        log_debug(f"–ü–æ–∑–∏—Ü—ñ—ó –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–ø—Ä–æ–±—ñ {attempt}")
                        break

            live_trades = {}
            simple_trades = {}
            current_time = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")

            for pos in positions:
                try:
                    size = float(pos.get("size", 0) or 0)
                except Exception:
                    size = 0.0
                if size <= 0:
                    continue

                symbol = pos.get("symbol")
                # –°—Ç–æ—Ä–æ–Ω–∞: –∑ positionSide –∞–±–æ –∑ side
                raw_ps = str(pos.get("positionSide", "")).upper()
                if raw_ps in ("LONG", "SHORT"):
                    side = raw_ps
                else:
                    side = "LONG" if str(pos.get("side", "")).upper() == "BUY" else "SHORT"

                # –¶—ñ–Ω–∞ –≤—Ö–æ–¥—É: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ avgEntryPrice, —Ñ–æ–ª–±–µ–∫ –Ω–∞ avgPrice
                try:
                    entry_price = float(pos.get("avgEntryPrice") or pos.get("avgPrice") or 0.0)
                except Exception:
                    entry_price = 0.0

                # –ü–ª–µ—á–µ
                try:
                    leverage = int(float(pos.get("leverage", 1)))
                except Exception:
                    leverage = 1

                # üîë –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø—ñ–¥—Ö–æ–ø–∏—Ç–∏ –Ω–∞—à –ª–æ–∫–∞–ª—å–Ω–∏–π trade_id
                trade_id = resolve_trade_id(symbol, side)
                if not trade_id:
                    # –†–µ–∑–µ—Ä–≤–Ω–∏–π –±—ñ—Ä–∂–æ–≤–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (–ù–ï –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è stats, —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∫–ª—é—á–∞ –ø–æ—Ç–æ–∫—É)

                    local_id = resolve_trade_id(symbol, side)     # üëà —Å–ø—Ä–æ–±—É—î –∑–Ω–∞–π—Ç–∏ –Ω–∞—à trade_id —É ActiveTrades
                    trade_id = local_id or f"{symbol}_{pos.get('positionIdx', '0')}"

                live_trades[trade_id] = {
                    "symbol": symbol,
                    "entry_price": entry_price,
                    "side": side,
                    "amount": size,
                    "leverage": leverage,
                    "behavior_summary": {
                        "entry_reason": "LIVE_MONITOR",
                        "score": 0,
                        "signals": {}
                    },
                    "monitoring_sessions": []
                }

                # üìù –°–ø—Ä–æ—â–µ–Ω–∏–π –∑–∞–ø–∏—Å (–æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª, –Ω–µ —á—ñ–ø–∞—î –ø–æ–≤–Ω–∏–π ActiveTrades.json)
                simple_trades[trade_id] = {
                    "symbol": symbol,
                    "side": side,
                    "opened_at": current_time
                }

            # üîπ –ü–∏—à–µ–º–æ —Å–ø—Ä–æ—â–µ–Ω–∏–π —Ñ–∞–π–ª –æ–∫—Ä–µ–º–æ, —â–æ–± –Ω–µ –∑–Ω–æ—Å–∏—Ç–∏ –ø–æ–≤–Ω—ñ –∑–∞–ø–∏—Å–∏
            try:
                with open(ACTIVE_TRADES_FILE_SIMPLE, "w", encoding="utf-8") as f:
                    json.dump(simple_trades, f, indent=2, ensure_ascii=False)
                    prune_inactive_trades(set(live_trades.keys()))

                log_debug(f"ActiveTradesSimple.json –æ–Ω–æ–≤–ª–µ–Ω–æ ({len(simple_trades)} —É–≥–æ–¥)")
            except Exception as e:
                log_error(f"‚ùå [monitor_all_open_trades] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ ActiveTradesSimple.json: {e}")

            # üöÄ –°—Ç–∞—Ä—Ç—É—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∫–æ–∂–Ω–æ—ó —É–≥–æ–¥–∏ (–ø–æ –Ω–∞—à–æ–º—É –∞–±–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É trade_id)
            for trade_id, trade in live_trades.items():
                if trade_id not in active_threads:
                    log_debug(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –¥–ª—è {trade_id} (API)")
                    t = threading.Thread(
                        target=monitor_trade_thread,
                        args=(trade_id, trade),
                        daemon=True
                    )
                    t.start()
                    active_threads[trade_id] = t
                else:
                    # –≤–∂–µ –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å—Å—è ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
                    pass

        except Exception as e:
            log_error(f"‚ùå monitor_all_open_trades (API): {e}")

        time.sleep(2)



