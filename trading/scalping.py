# scalping.py

import time
from analysis.indicators import get_volatility,analyze_support_resistance
import traceback
from utils.tools import check_position_with_retry
from datetime import datetime, timedelta
from trading.executor import get_current_futures_price
from utils.logger import log_message, log_error, log_debug
from trading.executor import OrderExecutor
from trading.risk import calculate_amount_to_use
from config import bybit
is_trade_open = False
import pandas as pd
from analysis.market import analyze_volume
from utils.get_klines_bybit import get_klines_clean_bybit
import json
import re
from datetime import datetime
from analysis.monitor_coin_behavior import build_monitor_snapshot 
import os
from utils.telegram_bot import send_telegram_message
import random  
from config import MAX_ACTIVE_TRADES
from config import ACTIVE_TRADES_FILE
from utils.logger import append_active_trade
import threading
from config import USE_MANUAL_BALANCE, MANUAL_BALANCE, USE_MANUAL_LEVERAGE, MANUAL_LEVERAGE
from utils.tools import get_usdt_balance
from analysis.market import get_top_symbols
from decimal import Decimal, getcontext
getcontext().prec = 10  # –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –±–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω—å
from analysis.monitor_coin_behavior import convert_snapshot_to_conditions
from utils.signal_logger import update_signal_record
from trading.executor import OrderExecutor
from ai.decision import check_trade_conditions_long, check_trade_conditions_short
from config import (PARTIAL_CLOSE_PERCENT, PARTIAL_CLOSE_TRIGGER,
                        TRAILING_STOP_OFFSET, MANAGE_TP_PERCENT, MANAGE_SL_PERCENT)
import random
import numpy as np
from utils.signal_logger import log_final_trade_result
from uuid import uuid4
ACTIVE_TRADES_FILE_SIMPLE = "data/ActiveTradesSimple.json"

# === —Ä–µ—î—Å—Ç—Ä–∏ –ø–æ—Ç–æ–∫—ñ–≤ ===
active_threads = {}   # –ø–æ—Ç–æ–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö —É–≥–æ–¥ (–∫–ª—é—á = trade_id)
bg_threads = {}       # —Ñ–æ–Ω–æ–≤—ñ –¥–µ–º–æ–Ω–∏: monitor_all_open_trades, monitor_watchlist_candidate



SIDE_BUY = "Buy"
SIDE_SELL = "Sell"
# üîí –ù–∞–±—ñ—Ä —Å–∏–º–≤–æ–ª—ñ–≤, —è–∫—ñ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑ –≤—ñ–¥–∫—Ä–∏–≤–∞—é—Ç—å—Å—è (–∞–Ω—Ç–∏–¥—É–±–ª—å)
opening_symbols = set()


RECENT_SCALPING_FILE = "data/recent_scalping.json"

def quick_scan_coin(symbol: str) -> dict | None:
    """
    ‚ö° Fast screening –º–æ–Ω–µ—Ç–∏ –¥–ª—è pre-—Ñ—ñ–ª—å—Ç—Ä—É
    """
    try:
        df = get_klines_clean_bybit(symbol, interval="1h", limit=150)
        if df is None or df.empty or len(df) < 50:
            return None

        df["close"] = df["close"].astype(float)
        close_mean = df["close"].mean()
        close_std = df["close"].std()
        volatility = round((close_std / max(close_mean, 1e-8)) * 100, 2)

        volume_category = analyze_volume(symbol)
        if isinstance(volume_category, dict):
            volume_category = volume_category.get("level", "low")

        volume_score = {
            "very_low": 0,
            "low": 1,
            "normal": 2,
            "high": 3,
            "very_high": 4
        }.get(volume_category, 0)

        return {
            "volume_score": volume_score,
            "volatility": volatility
        }

    except Exception as e:
        log_error(f"‚ùå quick_scan_coin –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
        return None


WATCHLIST_LOG_PATH = "logs/watchlist_debug.json"
WATCHLIST_PATH = "data/watchlist.json"
MONITOR_INTERVAL = 5  # —Å–µ–∫—É–Ω–¥

def load_watchlist() -> list:
    try:
        if not os.path.exists(WATCHLIST_PATH):
            with open(WATCHLIST_PATH, "w", encoding="utf-8") as f:
                json.dump([], f)
            return []

        with open(WATCHLIST_PATH, "r", encoding="utf-8") as f:
            data = json.load(f)
            if not isinstance(data, list):
                log_error("‚ùå Watchlist JSON –Ω–µ —î —Å–ø–∏—Å–∫–æ–º! –°–∫–∏–¥–∞—é —Ñ–∞–π–ª.")
                return []
            return data

    except Exception as e:
        log_error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ watchlist.json: {e}")
        return []

def save_watchlist(watchlist):
    try:
        os.makedirs(os.path.dirname(WATCHLIST_PATH), exist_ok=True)
        log_message(f"üìã [WATCHLIST] –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è {len(watchlist)} –º–æ–Ω–µ—Ç —É {WATCHLIST_PATH}")
        with open(WATCHLIST_PATH, "w", encoding="utf-8") as f:
            json.dump(watchlist, f, indent=2, ensure_ascii=False)
    except Exception as e:
        log_error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É Watchlist: {e}")

def add_to_watchlist(symbol, support_position, current_price,side="LONG"):
    try:
        watchlist = load_watchlist()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–Ω–µ—Ç–∞ –≤–∂–µ –≤ —Å–ø–∏—Å–∫—É
        if any(item["symbol"] == symbol for item in watchlist):
            log_message(f"‚ÑπÔ∏è [WATCHLIST] {symbol} –≤–∂–µ —É —Å–ø–∏—Å–∫—É ‚Äî –ø—Ä–æ–ø—É—Å–∫")
            return

        watchlist.append({
            "symbol": symbol,
            "support_position": support_position,
            "current_price": current_price,
            "time": datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
            "side": side
        })

        save_watchlist(watchlist)
        log_message(f"üì• [WATCHLIST] {symbol} –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ watchlist.json")

    except Exception as e:
        log_error(f"‚ùå [WATCHLIST] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ {symbol}: {e}")


def _canonicalize_patterns_for_log(patterns):
    """
    –ö–∞–Ω–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥ —Ç–≤–æ—ó fast-lane –ø–∞—Ç–µ—Ä–Ω–∏:
    bullish_engulfing / bearish_engulfing / hammer / shooting_star / evening_star / morning_star / doji
    """
    out = []
    if isinstance(patterns, list):
        for p in patterns:
            if isinstance(p, dict):
                t = str(p.get("type", "")).lower()
                d = str(p.get("direction", "")).lower()
                if t == "engulfing" and d in ("bullish", "bearish"):
                    out.append(f"{d}_engulfing")
                elif t in ("hammer", "shooting_star", "evening_star", "morning_star", "doji"):
                    out.append(t)
            elif isinstance(p, str):
                out.append(p.lower())
    return sorted(set(out))


def log_watchlist_reason(symbol, side, reason, conditions=None):
    """
    –õ–æ–≥—É—î —Ä—ñ–≤–Ω–æ —Ç—ñ –∫–ª—é—á—ñ, —è–∫—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –Ω–æ–≤—ñ check_trade_conditions_long/short,
    —ñ –¥–æ–¥–∞—î list 'blockers' –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏, —á–æ–º—É —â–µ –ù–ï –≤—ñ–¥–∫—Ä–∏—Ç–æ.
    """
    try:
        import os, json
        from datetime import datetime

        os.makedirs("logs", exist_ok=True)
        filepath = "logs/watchlist_debug.json"
        timestamp = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")

        def safe(val):
            if isinstance(val, (int, float, str, bool)) or val is None:
                return val
            if isinstance(val, list):
                return [safe(v) for v in val]
            if isinstance(val, dict):
                return {str(k): safe(v) for k, v in val.items()}
            return str(val)

        minimal = {}
        blockers = []

        if isinstance(conditions, dict):
            # === –ø–æ–ª—è, —è–∫—ñ —Ä–µ–∞–ª—å–Ω–æ —á–∏—Ç–∞—é—Ç—å —Ç–≤–æ—ó check_* ===
            keys = [
                "support_position", "global_trend", "volume_category",
                "macd_trend", "macd_hist_direction", "macd_crossed",
                "rsi_value", "rsi_trend", "rsi_signal",
                "stoch_signal", "stoch_k", "stoch_d",
                "bollinger_position", "bollinger_signal",
                "cci_signal", "cci_value",
                "microtrend_1m", "microtrend_5m", "delta_1m",
                "patterns"
            ]
            for k in keys:
                minimal[k] = safe(conditions.get(k))

            # –∫–∞–Ω–æ–Ω—ñ–∑–æ–≤–∞–Ω—ñ –ø–∞—Ç–µ—Ä–Ω–∏ –¥–ª—è fast-lane
            minimal["patterns_canon"] = _canonicalize_patterns_for_log(conditions.get("patterns", []))

            # === —Ñ–æ—Ä–º—É—î–º–æ blockers –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –¢–û–ß–ù–ò–• –ø—Ä–∞–≤–∏–ª —É check_* ===
            side = str(side or "").upper()

            sp = str(minimal.get("support_position", "")).lower()
            gt = str(minimal.get("global_trend", "unknown")).lower()
            vol = str(minimal.get("volume_category", "unknown")).lower()

            macd_trend = minimal.get("macd_trend", "neutral")
            macd_hist  = minimal.get("macd_hist_direction", "flat")
            macd_cross = minimal.get("macd_crossed", "none")

            try:
                rsi_val = float(minimal.get("rsi_value", 0) or 0)
            except Exception:
                rsi_val = 0.0
            rsi_trend  = str(minimal.get("rsi_trend", "flat")).lower()
            rsi_signal = minimal.get("rsi_signal", "neutral")

            stoch_signal = minimal.get("stoch_signal", "neutral")
            try:
                k_val = float(minimal.get("stoch_k")) if minimal.get("stoch_k") is not None else None
            except Exception:
                k_val = None
            try:
                d_val = float(minimal.get("stoch_d")) if minimal.get("stoch_d") is not None else None
            except Exception:
                d_val = None

            try:
                bb_pos = float(minimal.get("bollinger_position", 50) or 50)
            except Exception:
                bb_pos = 50.0
            bb_sig = minimal.get("bollinger_signal", "neutral")

            cci_sig = minimal.get("cci_signal", "neutral")
            try:
                cci_val = float(minimal.get("cci_value", 0) or 0)
            except Exception:
                cci_val = 0.0

            micro1m = str(minimal.get("microtrend_1m", "neutral")).lower()
            try:
                delta_1m = float(minimal.get("delta_1m", 0) or 0)
            except Exception:
                delta_1m = 0.0

            # --- –∑–∞–≥–∞–ª—å–Ω—ñ –±–ª–æ–∫–µ—Ä–∏ ---
            if vol == "very_low":
                blockers.append("volume_category=very_low")

            if side == "LONG":
                # support/global
                if sp not in ("near_support", "between"):
                    blockers.append(f"support_position={sp} (need near_support/between)")
                if gt not in ("bullish", "strong_bullish", "flat"):
                    blockers.append(f"global_trend={gt} (need bullish/strong_bullish/flat)")

                # MACD
                if not ((macd_trend == "bullish") or (macd_hist == "up")):
                    blockers.append("MACD: need trend=bullish or hist=up")
                if macd_cross not in ("none", "bullish"):
                    blockers.append(f"macd_crossed={macd_cross} (need none/bullish)")

                # RSI
                if not (30 <= rsi_val <= 62):
                    blockers.append(f"RSI out of 30..62 ({rsi_val})")
                if rsi_trend not in ("up", "neutral"):
                    blockers.append(f"rsi_trend={rsi_trend} (need up/neutral)")
                if rsi_signal not in ("oversold", "neutral", "bullish_momentum"):
                    blockers.append(f"rsi_signal={rsi_signal} (need oversold/neutral/bullish_momentum)")

                # Stoch
                if stoch_signal not in ("oversold", "oversold_cross_up", "neutral"):
                    blockers.append(f"stoch_signal={stoch_signal} (need oversold/oversold_cross_up/neutral)")
                if k_val is not None and d_val is not None:
                    if not (k_val <= 40 or d_val <= 40):
                        blockers.append(f"stoch too high (K={k_val}, D={d_val}, need any‚â§40)")

                # Bollinger
                if not (bb_pos <= 60):
                    blockers.append(f"bollinger_position={bb_pos} (need ‚â§60)")
                if bb_sig not in ("neutral", "bullish_momentum"):
                    blockers.append(f"bollinger_signal={bb_sig} (need neutral/bullish_momentum)")

                # Micro
                if micro1m == "bearish" and delta_1m < 0:
                    blockers.append(f"microtrend_1m=bearish with delta_1m={delta_1m}")

            elif side == "SHORT":
                # support/global
                if sp not in ("near_resistance", "between"):
                    blockers.append(f"support_position={sp} (need near_resistance/between)")
                if gt not in ("bullish", "strong_bullish", "flat", "bearish"):
                    blockers.append(f"global_trend={gt} (need bullish/strong_bullish/flat/bearish)")

                # MACD
                if not ((macd_trend == "bearish") or (macd_hist == "down")):
                    blockers.append("MACD: need trend=bearish or hist=down")
                if macd_cross not in ("none", "bearish"):
                    blockers.append(f"macd_crossed={macd_cross} (need none/bearish)")

                # RSI
                if not (55 <= rsi_val <= 78):
                    blockers.append(f"RSI out of 55..78 ({rsi_val})")
                if rsi_trend not in ("down", "neutral", "up"):
                    blockers.append(f"rsi_trend={rsi_trend} (invalid)")
                if rsi_signal not in ("neutral", "bullish_momentum", "overbought"):
                    blockers.append(f"rsi_signal={rsi_signal} (need neutral/bullish_momentum/overbought)")

                # Stoch
                if stoch_signal not in ("overbought", "neutral"):
                    blockers.append(f"stoch_signal={stoch_signal} (need overbought/neutral)")
                if k_val is not None and d_val is not None:
                    if not (k_val >= 70 or d_val >= 70):
                        blockers.append(f"stoch too low (K={k_val}, D={d_val}, need any‚â•70)")

                # CCI
                if not ((cci_sig in ("overbought", "neutral")) and (cci_val >= 60)):
                    blockers.append(f"CCI weak: {cci_sig} {cci_val} (need sig overbought/neutral and value‚â•60)")

                # Bollinger
                if not (bb_pos >= 65):
                    blockers.append(f"bollinger_position={bb_pos} (need ‚â•65)")
                if bb_sig not in ("neutral", "bearish_momentum", "bullish_momentum"):
                    blockers.append(f"bollinger_signal={bb_sig} (invalid)")

                # Micro
                if micro1m == "bullish" and delta_1m > 0:
                    blockers.append(f"microtrend_1m=bullish with delta_1m={delta_1m}")

            # –Ø–∫—â–æ blockers –ø–æ—Ä–æ–∂–Ω—ñ–π, –∞ —É–≥–æ–¥–∏ –Ω–µ–º–∞ ‚Äî –∑–Ω–∞—á–∏—Ç—å –∞–±–æ —â–µ –Ω–µ –≤—Å—ñ –¥–∞–Ω—ñ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ,
            # –∞–±–æ fast-lane –ø–∞—Ç–µ—Ä–Ω –Ω–µ –∑‚Äô—è–≤–∏–≤—Å—è ‚Äî —Ü–µ —Ç–µ–∂ –∫–æ—Ä–∏—Å–Ω–æ –±–∞—á–∏—Ç–∏ –≤ –ª–æ–≥–∞—Ö.
            if not blockers:
                blockers.append("no hard blockers; waiting for confirmation/fast-lane")

        # —Ñ–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Å
        entry = {
            "timestamp": timestamp,
            "symbol": symbol,
            "side": (str(side).upper() if side else side),
            "reason": safe(reason),
            "blockers": blockers,
            "conditions": minimal
        }

        # –±–µ–∑–ø–µ—á–Ω–µ —á–∏—Ç–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –ª–æ–≥—É
        try:
            existing = []
            if os.path.exists(filepath):
                with open(filepath, "r", encoding="utf-8") as f:
                    existing = json.load(f)
                    if not isinstance(existing, list):
                        existing = []
        except Exception:
            existing = []

        existing.append(entry)

        # –∞—Ç–æ–º–∞—Ä–Ω–∏–π –∑–∞–ø–∏—Å
        tmp = filepath + ".tmp"
        with open(tmp, "w", encoding="utf-8") as f:
            json.dump(existing, f, indent=2, ensure_ascii=False)
        os.replace(tmp, filepath)

    except Exception as e:
        log_error(f"‚ùå log_watchlist_reason (new) –ø–æ–º–∏–ª–∫–∞: {e}")



def monitor_watchlist_candidate():
    import concurrent.futures

    log_debug("–°—Ç–∞—Ä—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Watchlist Candidates")

    def is_open_signal(res: dict) -> bool:
        return isinstance(res, dict) and res.get("open_trade") in ("LONG", "SHORT")

    def process_candidate(item):
        try:
            symbol = item["symbol"]
            side = item["side"]

            snapshot = build_monitor_snapshot(symbol)
            if not snapshot:
                log_watchlist_reason(symbol, side, "‚ùå snapshot is None", {})
                return None

            conditions = convert_snapshot_to_conditions(snapshot)
            if not conditions:
                log_watchlist_reason(symbol, side, "‚ùå conditions is None", {})
                return None

            # –í–∏–∫–ª–∏–∫ —Ñ—ñ–ª—å—Ç—Ä–∞ –∑–∞ –Ω–∞–ø—Ä—è–º–∫–æ–º
            if side == "LONG":
                result = check_trade_conditions_long(conditions)
            elif side == "SHORT":
                result = check_trade_conditions_short(conditions)
            else:
                result = None

            # –ù–µ–º–∞—î —Å–∏–≥–Ω–∞–ª—É ‚Äî —á–µ–∫–∞—î–º–æ –¥–∞–ª—ñ
            if not is_open_signal(result):
                log_debug(f"{symbol}: —â–µ –Ω–µ–º–∞—î —Å–∏–≥–Ω–∞–ª—É {side}")
                log_watchlist_reason(symbol, side, "still waiting for full signal confirmation", conditions)
                return None

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–∑–≥–æ–¥–∂–µ–Ω–æ—Å—Ç—ñ –Ω–∞–ø—Ä—è–º–∫—É
            detected_side = result["open_trade"]
            if detected_side != side:
                log_debug(f"{symbol}: –Ω–∞–ø—Ä—è–º–æ–∫ –Ω–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è ‚Üí {detected_side} ‚â† {side}")
                log_watchlist_reason(symbol, side, "side mismatch", conditions)
                return None

            # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —É–≥–æ–¥—É
            log_message(f"üéØ Watchlist: —É–º–æ–≤–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ –¥–ª—è {symbol} ‚Üí –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ {side}")
            balance = get_usdt_balance()

            behavior_summary = {
                "entry_reason": f"WATCHLIST_TRIGGER_{side}",
                "signals": conditions,
                "volume": conditions.get("volume")  # –º–æ–∂–µ –±—É—Ç–∏ None ‚Äî –æ–∫
            }

            # –û–±–∏—Ä–∞—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω—É —Ü—ñ–Ω—É
            price = (
                conditions.get("price")
                or conditions.get("current_price")
                or snapshot.get("price")
                or snapshot.get("current_price")
            )

            target_data = {
                "symbol": symbol,
                "target_price": price,  # –≤–∞–∂–ª–∏–≤–æ —Å–∞–º–µ target_price
                "price": price,
                "volume": conditions.get("volume"),
                "recommended_leverage": None,
                "source": "watchlist"
            }

            execute_scalping_trade(
                target=target_data,
                balance=balance,
                position_side=side,
                behavior_summary=behavior_summary
            )

            log_debug(f"–í–∏–¥–∞–ª–µ–Ω–Ω—è {symbol} –∑ Watchlist")
            return symbol  # –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–∏–º–≤–æ–ª –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è

        except Exception as e:
            log_error(f"‚ùå [monitor_watchlist_candidates] –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {item}: {e}")
            log_watchlist_reason(item.get("symbol", "UNKNOWN"), item.get("side", "UNKNOWN"), f"–ü–æ–º–∏–ª–∫–∞: {e}", {})
            return None

    # === –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É ===
    while True:
        watchlist = load_watchlist() or []
        if not watchlist:
            time.sleep(MONITOR_INTERVAL)
            continue

        with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
            futures = [executor.submit(process_candidate, item) for item in watchlist]
            results = [f.result() for f in futures]
            to_remove = [sym for sym in results if sym]

        if to_remove:
            updated_watchlist = [item for item in watchlist if item["symbol"] not in to_remove]
            save_watchlist(updated_watchlist)

        time.sleep(MONITOR_INTERVAL)


def find_best_scalping_targets():
    """
    üöÄ –ë–æ–π–æ–≤–∏–π —Ä–µ–∂–∏–º:
    - –í—ñ–¥–±—ñ—Ä –º–æ–Ω–µ—Ç –±—ñ–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏/–æ–ø–æ—Ä—É, –∞ —Ç–∞–∫–æ–∂ —É —Å—Ç–∞–Ω—ñ between (–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è –∑–∞ –≥–ª–æ–±–∞–ª—å–Ω–∏–º —Ç—Ä–µ–Ω–¥–æ–º).
    - –Ø–∫—â–æ –ø—Ä–æ–π—à–ª–∞ check_trade_conditions() ‚Üí –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —É–≥–æ–¥–∏.
    - –Ø–∫—â–æ –Ω–µ –ø—Ä–æ–π—à–ª–∞ ‚Üí –¥–æ–¥–∞—î–º–æ –≤ watchlist.json –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.
    - monitor_watchlist_candidate –ø–∏—à–µ –≤ logs/watchlist_debug.json –∫–æ–∂–Ω—ñ 5 —Å–µ–∫.
    """
    try:
        log_message("üö¶ –°—Ç–∞—Ä—Ç find_best_scalping_targets()")

        if "monitor_all_open_trades" not in bg_threads:
            t = threading.Thread(target=monitor_all_open_trades, daemon=True)
            t.start()
            bg_threads["monitor_all_open_trades"] = t
            log_debug("monitor_all_open_trades –∑–∞–ø—É—â–µ–Ω–æ")

        if "monitor_watchlist_candidate" not in bg_threads:
            t = threading.Thread(target=monitor_watchlist_candidate, daemon=True)
            t.start()
            bg_threads["monitor_watchlist_candidate"] = t
            log_debug("monitor_watchlist_candidate –∑–∞–ø—É—â–µ–Ω–æ")


        symbols = get_top_symbols(limit=50)
        random.shuffle(symbols)
        log_debug(f"–ú–æ–Ω–µ—Ç–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É: {symbols}")

        watchlist_data = load_watchlist() or []

        for symbol in symbols:
            log_message(f"üéØ –ê–Ω–∞–ª—ñ–∑ {symbol}")
            snapshot = build_monitor_snapshot(symbol)
            if not snapshot:
                log_message(f"‚ö†Ô∏è [SKIP] {symbol} ‚Üí snapshot None")
                continue

            log_debug(f"Snapshot OK –¥–ª—è {symbol}")
            conditions = convert_snapshot_to_conditions(snapshot)
            if not conditions:
                log_message(f"‚ö†Ô∏è [SKIP] {symbol} ‚Üí conditions None")
                continue

            log_debug(f"Conditions OK –¥–ª—è {symbol}")

            # ‚úÖ –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è support_position
            support_position = str(conditions.get("support_position", "unknown")).lower()
            if support_position in {"null", "unknown", ""}:
                support_position = "between"

            global_trend = str(conditions.get("global_trend", "unknown")).lower()

            # ‚úÖ –û–±—Ä–æ–±–ª—è—î–º–æ near_support / near_resistance / between
            result = None
            side = None

            if support_position == "near_support":
                side = "LONG"
                result = check_trade_conditions_long(conditions)

            elif support_position == "near_resistance":
                side = "SHORT"
                result = check_trade_conditions_short(conditions)

            elif support_position == "between":
                # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è –∑–∞ –≥–ª–æ–±–∞–ª—å–Ω–∏–º —Ç—Ä–µ–Ω–¥–æ–º ‚Äî –º‚Äô—è–∫–æ, —è–∫ –¥–æ–º–æ–≤–ª—è–ª–∏—Å—å
                if global_trend in ("bullish", "strong_bullish", "flat"):
                    side = "LONG"
                    result = check_trade_conditions_long(conditions)
                elif global_trend == "bearish":
                    side = "SHORT"
                    result = check_trade_conditions_short(conditions)
                else:
                    log_message(f"‚õî [SKIP] {symbol} ‚Üí BETWEEN, –∞–ª–µ global_trend={global_trend}")
                    side = "LONG"  # –¥–µ—Ñ–æ–ª—Ç, —â–æ–± –≤—ñ–¥–¥–∞—Ç–∏ —É watchlist –∑ –Ω–∞–ø—Ä—è–º–∫–æ–º
                    result = {"add_to_watchlist": True, "watch_reason": f"between + unknown global_trend"}

            else:
                log_message(f"‚õî [SKIP] {symbol} ‚Üí support_position={support_position}")
                continue

            log_message(f"[TRACE] check_trade_conditions({side}) ‚Üí {result}")

            if isinstance(result, dict) and result.get("open_trade") in ["LONG", "SHORT"]:
                # ‚úÖ –í—Å—ñ —É–º–æ–≤–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ ‚Äî –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —É–≥–æ–¥—É
                position_side = result.get("open_trade")
                price = conditions.get("price") or conditions.get("current_price") or snapshot.get("price")
                balance = get_usdt_balance()
                execute_scalping_trade(
                    target={
                        "symbol": symbol,
                        "target_price": price,  # üëà –∫–ª—é—á —Å–∞–º–µ target_price
                        "price": price
                    },
                    balance=balance,
                    position_side=position_side,
                    behavior_summary=None
                )
                log_message(f"üöÄ [TRADE] –í—ñ–¥–∫—Ä–∏—Ç–æ —É–≥–æ–¥—É –ø–æ {symbol} ({position_side})")

            else:
                # ‚è≥ –£–º–æ–≤–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ñ ‚Äî –¥–æ–¥–∞—î–º–æ —É watchlist –∑ –ø—Ä–∏—á–∏–Ω–æ—é
                reason = ""
                if isinstance(result, dict) and result.get("add_to_watchlist"):
                    reason = result.get("watch_reason", "")
                    log_message(f"‚ÑπÔ∏è [WATCH] {symbol} ‚Üí {reason}")

                already_exists = any((item.get("symbol") == symbol) for item in watchlist_data)
                if not already_exists:
                    direction = side if side in ("LONG", "SHORT") else ("LONG" if support_position == "near_support" else "SHORT")
                    add_to_watchlist(
                        symbol=symbol,
                        support_position=support_position,
                        current_price=conditions.get("current_price"),
                        side=direction
                    )
                    # üîÑ –æ–¥—Ä–∞–∑—É –æ–Ω–æ–≤–∏–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫, —â–æ–± –Ω–µ –ø–µ—Ä–µ—Ç–µ—Ä—Ç–∏ —Ñ–∞–π–ª —Å—Ç–∞—Ä–∏–º–∏ –¥–∞–Ω–∏–º–∏
                    watchlist_data.append({
                        "symbol": symbol,
                        "support_position": support_position,
                        "current_price": conditions.get("current_price"),
                        "side": direction
                    })
                    log_message(f"üì• [WATCHLIST] {symbol} –¥–æ–¥–∞–Ω–æ ({support_position}/{direction})")
                else:
                    log_message(f"‚ÑπÔ∏è [WATCHLIST] {symbol} –≤–∂–µ —É —Å–ø–∏—Å–∫—É ‚Üí –ø—Ä–æ–ø—É—Å–∫")

    except Exception as e:
        log_error(f"‚ùå [find_best_scalping_targets] –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        traceback.print_exc()


def execute_scalping_trade(target, balance, position_side, behavior_summary, manual_amount=None, manual_leverage=None):
    """
    üöÄ –í–∏–∫–æ–Ω—É—î —Ä–µ–∞–ª—å–Ω—É —É–≥–æ–¥—É, –∑–∞–ø–∏—Å—É—î —Å–∏–≥–Ω–∞–ª –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ —Ç–∞ –≤—ñ–¥–¥–∞—î monitor_all_open_trades —É –∫–æ–Ω—Ç—Ä–æ–ª—å
    - –ë–µ–∑ calculate_trade_score
    - –ë–µ–∑ –¥—É–±–ª—å-–ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –ø—Ä–∞–≤–∏–ª (—Ñ—ñ–ª—å—Ç—Ä —É–∂–µ –≤ find_best_scalping_targets / watchlist)
    """
    try:
        symbol = target["symbol"]
        log_debug(f"–°—Ç–∞—Ä—Ç execute_scalping_trade –¥–ª—è {symbol}")

        # ‚õî –∞–Ω—Ç–∏–¥—É–±–ª—å: —è–∫—â–æ —ñ–Ω—à–∏–π –ø–æ—Ç—ñ–∫ –≤–∂–µ –≤—ñ–¥–∫—Ä–∏–≤–∞—î —Ü–µ–π —Å–∏–º–≤–æ–ª ‚Äî –≤–∏—Ö–æ–¥–∏–º–æ
        if symbol in opening_symbols:
            log_message(f"‚è≥ {symbol} –≤–∂–µ –≤—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è —ñ–Ω—à–∏–º –ø–æ—Ç–æ–∫–æ–º ‚Üí –ø—Ä–æ–ø—É—Å–∫")
            return
        opening_symbols.add(symbol)

        def make_json_safe(obj):
            if isinstance(obj, dict):
                return {str(k): make_json_safe(v) for k, v in obj.items()}
            elif isinstance(obj, list):
                return [make_json_safe(v) for v in obj]
            elif isinstance(obj, (np.integer, np.floating)):
                return float(obj)
            elif isinstance(obj, (np.ndarray, pd.Series, pd.DataFrame)):
                return obj.tolist()
            elif isinstance(obj, (datetime, pd.Timestamp)):
                return obj.isoformat()
            elif isinstance(obj, (int, float, str, bool)) or obj is None:
                return obj
            else:
                return str(obj)

        try:
            # üîÅ —Ñ–æ–ª–±–µ–∫ –±–∞–ª–∞–Ω—Å—É
            if balance is None:
                balance = get_usdt_balance()

            # üõ° –ª—ñ–º—ñ—Ç –∞–∫—Ç–∏–≤–Ω–∏—Ö —É–≥–æ–¥
            active_trades = load_active_trades()
            if len(active_trades) >= MAX_ACTIVE_TRADES:
                log_message(f"üõë [SAFEGUARD] –ü–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é –æ—Ä–¥–µ—Ä–∞ ‚Üí –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–æ {len(active_trades)} —É–≥–æ–¥")
                return

            # üß≠ –Ω–∞–ø—Ä—è–º–æ–∫
            side_norm = (position_side or "").upper()
            if side_norm == "LONG":
                side = "Buy"
            elif side_norm == "SHORT":
                side = "Sell"
            else:
                log_error(f"‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –Ω–∞–ø—Ä—è–º–æ–∫ position_side={position_side} ‚Üí –ø—Ä–æ–ø—É—Å–∫")
                return

            # üß± conditions: –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç ‚Äî –∑ behavior_summary["signals"], —ñ–Ω–∞–∫—à–µ ‚Äî –∑—ñ–±—Ä–∞—Ç–∏ —Å–≤—ñ–∂—ñ
            conditions = None
            if isinstance(behavior_summary, dict):
                maybe_signals = behavior_summary.get("signals")
                if isinstance(maybe_signals, dict) and maybe_signals:
                    conditions = maybe_signals

            if not conditions:
                snapshot = build_monitor_snapshot(symbol)
                if not snapshot:
                    log_error(f"‚ùå Snapshot –¥–ª—è {symbol} –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ ‚Üí –ø—Ä–æ–ø—É—Å–∫")
                    return
                conditions = convert_snapshot_to_conditions(snapshot)
                if not conditions:
                    log_error(f"‚ùå Conditions –¥–ª—è {symbol} –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ ‚Üí –ø—Ä–æ–ø—É—Å–∫")
                    return

            # üéØ SCORE: –±–µ—Ä–µ–º–æ –∑ behavior_summary –∞–±–æ —Å—Ç–∞–≤–∏–º–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π –¥–µ—Ñ–æ–ª—Ç
            score = 0.0
            if isinstance(behavior_summary, dict):
                try:
                    score = float(behavior_summary.get("score", 0.0) or 0.0)
                except Exception:
                    score = 0.0
            if score == 0.0:
                score = 6.0  # –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π –¥–µ—Ñ–æ–ª—Ç, —â–æ–± amount –Ω–µ –≤–ø–∞–≤ –¥–æ –Ω—É–ª—è

            # ‚öôÔ∏è –ü–ª–µ—á–µ —Ç–∞ —Å—É–º–∞
            leverage = manual_leverage if manual_leverage is not None else (MANUAL_LEVERAGE if USE_MANUAL_LEVERAGE else 5)
            amount = (
                manual_amount
                if manual_amount is not None
                else (MANUAL_BALANCE if USE_MANUAL_BALANCE else calculate_amount_to_use(score, balance, leverage))
            )
            if amount < 5:
                log_message(f"‚ö†Ô∏è –°—É–º–∞ {amount} < $5 ‚Üí –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ $5")
                amount = 5

            # üéØ –¶—ñ–ª—å–æ–≤–∞ —Ü—ñ–Ω–∞
            target_price = target.get("target_price")
            if target_price is None:
                target_price = (
                    conditions.get("price")
                    or conditions.get("current_price")
                    or get_current_futures_price(symbol)
                )

            log_message(
                f"üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ—Ä–¥–µ—Ä–∞: {symbol} | –°—É–º–∞: {amount} | "
                f"–ü–ª–µ—á–µ: {leverage} | Side: {side} | PositionSide: {side_norm}"
            )

            executor = OrderExecutor(
                symbol=symbol,
                side=side,
                amount_to_use=amount,
                target_price=target_price,
                position_side=side_norm,
                leverage=leverage,
                bypass_price_check=True
            )
            result = executor.execute()
            if not result or "entry_price" not in result:
                log_error(f"‚ùå –û—Ä–¥–µ—Ä –Ω–µ –≤—ñ–¥–∫—Ä–∏–≤—Å—è –¥–ª—è {symbol}")
                return

            entry_price = result["entry_price"]
            send_telegram_message(
                f"üöÄ <b>–£–≥–æ–¥–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞:</b> {symbol}\n"
                f"‚û°Ô∏è –ù–∞–ø—Ä—è–º–æ–∫: {side_norm}\n"
                f"üí∏ –°—É–º–∞: {amount}\n"
                f"‚ö° –ü–ª–µ—á–µ: {leverage}x\n"
                f"üéØ –¶—ñ–Ω–∞ –≤—Ö–æ–¥—É: {entry_price}\n"
                f"üìà SCORE: {round(score, 2)}"
            )

            log_message(f"‚úÖ –û—Ä–¥–µ—Ä –≤—ñ–¥–∫—Ä–∏—Ç–æ –¥–ª—è {symbol} @ {entry_price}")

            # üóÉÔ∏è —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π trade_id (–º—ñ–∫—Ä–æ—Å–µ–∫—É–Ω–¥–∏ + –∫–æ—Ä–æ—Ç–∫–∏–π UUID)
            ts = datetime.utcnow().strftime('%Y%m%dT%H%M%S%f')
            trade_id = f"{symbol}_{ts}_{uuid4().hex[:6]}"

            decision_summary = {
                "score": float(score),
                "source": ("watchlist" if isinstance(behavior_summary, dict) and str(behavior_summary.get("entry_reason", "")).startswith("WATCHLIST") else "finbest"),
                "note": "No TradeScore; amount derived from decision score/default",
            }

            trade_record = {
                "trade_id": trade_id,
                "symbol": symbol,
                "side": side_norm,
                "entry_price": entry_price,
                "amount": amount,
                "leverage": leverage,
                "opened": datetime.utcnow().isoformat(),
                "closed": False,
                "signals": make_json_safe(decision_summary),
                "conditions": make_json_safe(conditions),
                "behavior_summary": make_json_safe(behavior_summary),
                "result_percent": None,
                "peak_pnl_percent": None,
                "worst_pnl_percent": None,
                "exit_reason": None,
                "duration": None
            }

            log_debug(f"Trade Record –¥–ª—è {trade_id}: {json.dumps(trade_record, indent=2, ensure_ascii=False)}")
            append_active_trade(trade_record)  # ‚úÖ —É ActiveTrades

            # ‚úÖ —É signal_stats.json
            from utils.signal_logger import append_signal_record
            append_signal_record(trade_record)

        finally:
            opening_symbols.discard(symbol)

    except Exception as e:
        log_error(f"‚ùå [execute_scalping_trade] –ü–æ–º–∏–ª–∫–∞: {e}\n{traceback.format_exc()}")


def manage_open_trade(symbol, entry_price, side, amount, leverage, behavior_summary,
                      trade_id=None, sessions=None, check_interval=1, entry_time=None, signals=None):

    """
    üëÅ –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤—ñ–¥–∫—Ä–∏—Ç–æ—ó —É–≥–æ–¥–∏:
    - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π TP/SL
    - –ß–∞—Å—Ç–∫–æ–≤–µ –∑–∞–∫—Ä–∏—Ç—Ç—è –Ω–∞ –ø—ñ–∫—É
    - –¢—Ä–µ–π–ª—ñ–Ω–≥-—Å—Ç–æ–ø –¥–ª—è –∑–∞–ª–∏—à–∫—É
    """
    
    log_message(f"üëÅ [DEBUG] –°—Ç–∞—Ä—Ç manage_open_trade –¥–ª—è {symbol} ({side}) @ {entry_price}")

    symbol_clean = symbol.split("_")[0]
    if entry_time is None:
        entry_time = datetime.now()

    is_long = side.upper() in ["LONG", "BUY"]
    entry_price = Decimal(str(entry_price))
    tp_target = Decimal(str(MANAGE_TP_PERCENT))
    sl_target = Decimal(str(MANAGE_SL_PERCENT))

    if is_long:
        take_profit = entry_price * (Decimal("1") + tp_target / Decimal(leverage))
        stop_loss = entry_price * (Decimal("1") - sl_target / Decimal(leverage))
    else:
        take_profit = entry_price * (Decimal("1") - tp_target / Decimal(leverage))
        stop_loss = entry_price * (Decimal("1") + sl_target / Decimal(leverage))

    log_message(f"üéØ TP={take_profit:.4f}, SL={stop_loss:.4f}")

    partial_closed = False
    trailing_stop_active = False
    trailing_stop_price = None
    remaining_amount = amount

    peak_pnl_percent = -9999.0
    worst_pnl_percent = 9999.0

    def finalize_trade(reason, final_price, close_amount,signals=None):
        nonlocal peak_pnl_percent, worst_pnl_percent, remaining_amount
        pnl = ((final_price - entry_price) / entry_price)
        if not is_long:
            pnl *= -1
        pnl_percent = float(pnl * leverage * 100)
        duration_seconds = (datetime.now() - entry_time).total_seconds()
        duration_str = str(timedelta(seconds=int(duration_seconds)))
        result = "WIN" if pnl_percent > 0 else "LOSS" if pnl_percent < 0 else "BREAKEVEN"

        executor = OrderExecutor(
            symbol=symbol_clean,
            side="Sell" if is_long else "Buy",
            position_side=side,
            amount_to_use=close_amount,
            leverage=leverage
        )
        if executor.close_position():
            log_message(f"‚úÖ –ß–∞—Å—Ç–∫–æ–≤–µ –∑–∞–∫—Ä–∏—Ç—Ç—è {symbol_clean} ({reason}) –Ω–∞ –±—ñ—Ä–∂—ñ")
        else:
            log_error(f"‚ùå –ù–ï –í–î–ê–õ–û–°–Ø –∑–∞–∫—Ä–∏—Ç–∏ {symbol_clean} ({reason}) –Ω–∞ –±—ñ—Ä–∂—ñ")

        remaining_amount -= close_amount 

        if remaining_amount <= 0:
            update_signal_record(trade_id, {
                "closed": True,
                "close_time": datetime.utcnow().isoformat(),
                "exit_reason": reason,
                "result_percent": round(pnl_percent, 2),
                "peak_pnl_percent": round(peak_pnl_percent, 2),
                "worst_pnl_percent": round(worst_pnl_percent, 2),
                "duration": duration_str,
                "result": result
            })

            if signals:
                try:
                    log_final_trade_result(
                        symbol=symbol_clean,
                        trade_id=trade_id,
                        entry_price=float(entry_price),
                        exit_price=float(final_price),
                        result=result,
                        peak_pnl=round(peak_pnl_percent, 2),
                        worst_pnl=round(worst_pnl_percent, 2),
                        duration=duration_str,
                        exit_reason=reason,
                        snapshot=signals  # signals ‚Äî —Ü–µ –ø–æ–≤–Ω–∏–π snapshot –∑ conditions
                    )
                except Exception as e:
                    log_message(f"üìä –ó–∞–ø–∏—Å —Ç—Ä–µ–π–¥—É {trade_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É signal_stats.json")

                    log_error(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø–∏—Å–∞—Ç–∏ —É signal_stats: {e}")

            send_telegram_message(
                f"üì¥ <b>–£–≥–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:</b> {symbol_clean}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                f"–ü–ª–µ—á–µ: {leverage}x\n"
                f"–°—É–º–∞: {close_amount}\n"
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result} | PnL: {round(pnl_percent, 2)}%"
            )

    try:
        while True:
            current_price = Decimal(str(get_current_futures_price(symbol_clean)))
            if not check_position_with_retry(symbol_clean, side, retries=3, delay=2):
                log_message(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü—ñ—è {symbol_clean} –∑–∞–∫—Ä–∏—Ç–∞ –≤—Ä—É—á–Ω—É –Ω–∞ –±—ñ—Ä–∂—ñ ‚Üí –∑–∞–≤–µ—Ä—à—É—é –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥")
                finalize_trade("Manual Close", current_price, remaining_amount,signals=signals)
                break

            pnl = ((current_price - entry_price) / entry_price)
            if not is_long:
                pnl *= -1
            pnl_percent = float(pnl * leverage * 100)

            if pnl_percent > peak_pnl_percent:
                peak_pnl_percent = pnl_percent
            if pnl_percent < worst_pnl_percent:
                worst_pnl_percent = pnl_percent

            log_message(f"üì° {symbol_clean} –¶—ñ–Ω–∞: {current_price}, PnL: {round(pnl_percent, 2)}% "
                        f"(Peak: {round(peak_pnl_percent, 2)}%, Worst: {round(worst_pnl_percent, 2)}%)")

            # üéØ –ß–∞—Å—Ç–∫–æ–≤–µ –∑–∞–∫—Ä–∏—Ç—Ç—è
            if not partial_closed and pnl_percent >= PARTIAL_CLOSE_TRIGGER * MANAGE_TP_PERCENT * 100:
                partial_close_amount = amount * (PARTIAL_CLOSE_PERCENT / 100)
                finalize_trade("Partial Take Profit", current_price, partial_close_amount,signals=signals)

                trailing_stop_price = current_price * (1 - TRAILING_STOP_OFFSET if is_long else 1 + TRAILING_STOP_OFFSET)
                trailing_stop_active = True
                partial_closed = True
                log_message(f"üîí –ß–∞—Å—Ç–∫–æ–≤–µ –∑–∞–∫—Ä–∏—Ç—Ç—è {PARTIAL_CLOSE_PERCENT}% @ {current_price}, "
                            f"–¢—Ä–µ–π–ª—ñ–Ω–≥-—Å—Ç–æ–ø –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ @ {trailing_stop_price}")

            # üèÅ –¢—Ä–µ–π–ª—ñ–Ω–≥-—Å—Ç–æ–ø
            if trailing_stop_active:
                if (is_long and current_price <= trailing_stop_price) or (not is_long and current_price >= trailing_stop_price):
                    finalize_trade("Trailing Stop", current_price, remaining_amount,signals=signals)
                    break
                if (is_long and current_price > trailing_stop_price) or (not is_long and current_price < trailing_stop_price):
                    trailing_stop_price = current_price * (1 - TRAILING_STOP_OFFSET if is_long else 1 + TRAILING_STOP_OFFSET)
                    log_message(f"üìà –¢—Ä–µ–π–ª—ñ–Ω–≥-—Å—Ç–æ–ø –æ–Ω–æ–≤–ª–µ–Ω–æ @ {trailing_stop_price}")

            # üéØ Take Profit
            if (is_long and current_price >= take_profit) or (not is_long and current_price <= take_profit):
                finalize_trade("Take Profit", current_price, remaining_amount,signals=signals)
                break

            # ‚õî Stop Loss
            if (is_long and current_price <= stop_loss) or (not is_long and current_price >= stop_loss):
                finalize_trade("Stop Loss", current_price, remaining_amount,signals=signals)
                break

            time.sleep(check_interval)

    except Exception as e:
        log_error(f"‚ùå [manage_open_trade] –ü–æ–º–∏–ª–∫–∞: {e}")


def adjust_risk_by_volatility(symbol, base_leverage=50):
    """
    üõ°Ô∏è –ê–¥–∞–ø—Ç–∏–≤–Ω–µ –ø–ª–µ—á–µ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ:
    - –ù–∏–∑—å–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å ‚Üí –±—ñ–ª—å—à–µ –ø–ª–µ—á–µ
    - –í–∏—Å–æ–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å ‚Üí –º–µ–Ω—à–µ –ø–ª–µ—á–µ
    """
    try:
        volatility = get_volatility(symbol)

        if volatility == "very_low":
            adjusted_leverage = min(base_leverage + 20, 75)  # –î–æ–¥–∞—î–º–æ –ø–ª–µ—á–µ –Ω–∞ —Ç–∏—Ö–æ–º—É —Ä–∏–Ω–∫—É
        elif volatility == "high":
            adjusted_leverage = max(base_leverage - 20, 10)  # –ó–º–µ–Ω—à—É—î–º–æ –ø–ª–µ—á–µ –Ω–∞ –≤–∏—Å–æ–∫—ñ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—ñ
        else:
            adjusted_leverage = base_leverage  # –ù–æ—Ä–º–∞–ª—å–Ω–µ –ø–ª–µ—á–µ

        log_message(f"‚öôÔ∏è –ê–¥–∞–ø—Ç–∏–≤–Ω–µ –ø–ª–µ—á–µ –¥–ª—è {symbol}: {adjusted_leverage}x (–≤–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: {volatility})")
        return adjusted_leverage

    except Exception as e:
        log_error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É adjust_risk_by_volatility –¥–ª—è {symbol}: {e}")
        return base_leverage


def load_active_trades():
    """
    üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î ActiveTrades –∑ JSON —É —Ñ–æ—Ä–º–∞—Ç—ñ dict (–∫–ª—é—á trade_id).
    –Ø–∫—â–æ —Ñ–∞–π–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –ø—É—Å—Ç–∏–π –∞–±–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î {}
    """
    try:
        if not os.path.exists(ACTIVE_TRADES_FILE):
            log_message("üìÇ ActiveTrades —Ñ–∞–π–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî —Å—Ç–≤–æ—Ä—é—é –Ω–æ–≤–∏–π.")
            return {}

        with open(ACTIVE_TRADES_FILE, "r", encoding="utf-8") as f:
            active_trades = json.load(f)

        if isinstance(active_trades, list):
            log_error("‚ùå ActiveTrades —É —Ñ–æ—Ä–º–∞—Ç—ñ list ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç—É—é —É dict –∑–∞ trade_id.")
            dict_trades = {}
            for trade in active_trades:
                trade_id = trade.get("trade_id") or f"{trade.get('symbol', 'UNKNOWN')}_{datetime.utcnow().timestamp()}"
                dict_trades[trade_id] = trade
            return dict_trades

        if not isinstance(active_trades, dict):
            log_error("‚ùå ActiveTrades –º–∞—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç (–æ—á—ñ–∫—É—î—Ç—å—Å—è dict). –°–∫–∏–¥–∞–Ω–Ω—è.")
            return {}

        return active_trades

    except Exception as e:
        log_error(f"‚ùå load_active_trades: –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ‚Üí {e}")
        return {}


def resolve_trade_id(symbol: str, side: str) -> str | None:
    """
    –ü—ñ–¥—Ö–æ–ø–ª—é—î –Ω–∞—à –ª–æ–∫–∞–ª—å–Ω–∏–π trade_id (—Ç–æ–π —Å–∞–º–∏–π, —â–æ –∑–∞–ø–∏—Å–∞–ª–∏ —É signal_stats/ActiveTrades)
    –¥–ª—è –ø–∞—Ä–∏ symbol+side. –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î None.
    """
    try:
        local_active = load_active_trades()  # –æ—á—ñ–∫—É—î–º–æ dict {trade_id: rec}
        if isinstance(local_active, dict):
            side_u = (side or "").upper()
            for tid, rec in local_active.items():
                if rec.get("symbol") == symbol and str(rec.get("side", "")).upper() == side_u:
                    return tid
    except Exception as e:
        log_error(f"resolve_trade_id: {e}")
    return None


def monitor_all_open_trades():
    """
    üîÑ –ë–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å –≤—Å—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ —É–≥–æ–¥–∏ –Ω–∞–ø—Ä—è–º—É –∑ –±—ñ—Ä–∂—ñ (Bybit API).
    ‚ö†Ô∏è –ù–µ –ø–µ—Ä–µ—Ç–∏—Ä–∞—î –ø–æ–≤–Ω–∏–π ActiveTrades.json; —Å–ø—Ä–æ—â–µ–Ω–∏–π —Å—Ç–∞–Ω –ø–∏—à–µ –≤ ACTIVE_TRADES_FILE_SIMPLE.
    """
    log_message("üö¶ [DEBUG] –°—Ç–∞—Ä—Ç monitor_all_open_trades() (LIVE API)")

    def monitor_trade_thread(trade_id, trade):
        try:
            symbol = trade.get("symbol")
            entry_price = trade.get("entry_price")
            side = trade.get("side", "LONG")
            amount = trade.get("amount", 0.0)
            leverage = trade.get("leverage", 10)
            summary = trade.get("behavior_summary", {})
            sessions = trade.get("monitoring_sessions", [])

            log_message(f"üëÅ [DEBUG] –°—Ç–∞—Ä—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —É–≥–æ–¥–∏ {trade_id} ({symbol})")

            manage_open_trade(
                symbol, entry_price, side, amount, leverage, summary, trade_id, sessions
            )

        except Exception as e:
            log_error(f"‚ùå monitor_trade_thread({trade_id}): {e}")
        finally:
            active_threads.pop(trade_id, None)
            log_message(f"üßπ –ü–æ—Ç—ñ–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É {trade_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ active_threads")

    while True:
        try:
            # üõ°Ô∏è –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó –∑ –±—ñ—Ä–∂—ñ
            response = bybit.get_positions(category="linear", settleCoin="USDT")
            positions = response.get("result", {}).get("list", []) or []

            # ‚è≥ –Ø–∫—â–æ –ø—É—Å—Ç–æ ‚Äî –∫—ñ–ª—å–∫–∞ —Ä–µ—Ç—Ä–∞—ó–≤
            if not positions:
                for attempt in range(1, 4):
                    time.sleep(2)
                    response = bybit.get_positions(category="linear", settleCoin="USDT")
                    positions = response.get("result", {}).get("list", []) or []
                    if positions:
                        log_debug(f"–ü–æ–∑–∏—Ü—ñ—ó –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–ø—Ä–æ–±—ñ {attempt}")
                        break

            live_trades = {}
            simple_trades = {}
            current_time = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")

            for pos in positions:
                try:
                    size = float(pos.get("size", 0) or 0)
                except Exception:
                    size = 0.0
                if size <= 0:
                    continue

                symbol = pos.get("symbol")
                # –°—Ç–æ—Ä–æ–Ω–∞: –∑ positionSide –∞–±–æ –∑ side
                raw_ps = str(pos.get("positionSide", "")).upper()
                if raw_ps in ("LONG", "SHORT"):
                    side = raw_ps
                else:
                    side = "LONG" if str(pos.get("side", "")).upper() == "BUY" else "SHORT"

                # –¶—ñ–Ω–∞ –≤—Ö–æ–¥—É: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ avgEntryPrice, —Ñ–æ–ª–±–µ–∫ –Ω–∞ avgPrice
                try:
                    entry_price = float(pos.get("avgEntryPrice") or pos.get("avgPrice") or 0.0)
                except Exception:
                    entry_price = 0.0

                # –ü–ª–µ—á–µ
                try:
                    leverage = int(float(pos.get("leverage", 1)))
                except Exception:
                    leverage = 1

                # üîë –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø—ñ–¥—Ö–æ–ø–∏—Ç–∏ –Ω–∞—à –ª–æ–∫–∞–ª—å–Ω–∏–π trade_id
                trade_id = resolve_trade_id(symbol, side)
                if not trade_id:
                    # –†–µ–∑–µ—Ä–≤–Ω–∏–π –±—ñ—Ä–∂–æ–≤–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä (–ù–ï –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è stats, —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∫–ª—é—á–∞ –ø–æ—Ç–æ–∫—É)
                    trade_id = f"{symbol}_{pos.get('positionIdx', '0')}"

                live_trades[trade_id] = {
                    "symbol": symbol,
                    "entry_price": entry_price,
                    "side": side,
                    "amount": size,
                    "leverage": leverage,
                    "behavior_summary": {
                        "entry_reason": "LIVE_MONITOR",
                        "score": 0,
                        "signals": {}
                    },
                    "monitoring_sessions": []
                }

                # üìù –°–ø—Ä–æ—â–µ–Ω–∏–π –∑–∞–ø–∏—Å (–æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª, –Ω–µ —á—ñ–ø–∞—î –ø–æ–≤–Ω–∏–π ActiveTrades.json)
                simple_trades[trade_id] = {
                    "symbol": symbol,
                    "side": side,
                    "opened_at": current_time
                }

            # üîπ –ü–∏—à–µ–º–æ —Å–ø—Ä–æ—â–µ–Ω–∏–π —Ñ–∞–π–ª –æ–∫—Ä–µ–º–æ, —â–æ–± –Ω–µ –∑–Ω–æ—Å–∏—Ç–∏ –ø–æ–≤–Ω—ñ –∑–∞–ø–∏—Å–∏
            try:
                with open(ACTIVE_TRADES_FILE_SIMPLE, "w", encoding="utf-8") as f:
                    json.dump(simple_trades, f, indent=2, ensure_ascii=False)
                log_debug(f"ActiveTradesSimple.json –æ–Ω–æ–≤–ª–µ–Ω–æ ({len(simple_trades)} —É–≥–æ–¥)")
            except Exception as e:
                log_error(f"‚ùå [monitor_all_open_trades] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ ActiveTradesSimple.json: {e}")

            # üöÄ –°—Ç–∞—Ä—Ç—É—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∫–æ–∂–Ω–æ—ó —É–≥–æ–¥–∏ (–ø–æ –Ω–∞—à–æ–º—É –∞–±–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º—É trade_id)
            for trade_id, trade in live_trades.items():
                if trade_id not in active_threads:
                    log_debug(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –¥–ª—è {trade_id} (API)")
                    t = threading.Thread(
                        target=monitor_trade_thread,
                        args=(trade_id, trade),
                        daemon=True
                    )
                    t.start()
                    active_threads[trade_id] = t
                else:
                    # –≤–∂–µ –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å—Å—è ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
                    pass

        except Exception as e:
            log_error(f"‚ùå monitor_all_open_trades (API): {e}")

        time.sleep(2)
