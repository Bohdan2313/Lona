# utils/get_klines_bybit.py

import time
import pandas as pd
from utils.logger import log_message, log_error,log_debug
from config import bybit


# --- –∫–µ—à—ñ –Ω–∞ —Ä—ñ–≤–Ω—ñ –º–æ–¥—É–ª—è ---
import time
import pandas as pd

# ‚îÄ‚îÄ –ö–µ—à –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤ / deny-list ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
_SUPPORTED = {"ts": 0.0, "linear": set(), "spot": set()}
_UNSUPPORTED = {}  # symbol -> ts
_SUPPORTED_TTL = 900        # 15 —Ö–≤
_UNSUPPORTED_TTL = 3600     # 60 —Ö–≤

# –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –º–∞–ø–∞ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ –¥–ª—è v5 (–≤–∏–º–∞–≥–∞—î —Ö–≤–∏–ª–∏–Ω–∏ —è–∫ —Ä—è–¥–æ–∫)
_INTERVAL_MAP = {"1h": "60", "15m": "15", "5m": "5", "1m": "1"}

def _refresh_supported_sets():
    """–û–Ω–æ–≤–ª—é—î –º–Ω–æ–∂–∏–Ω–∏ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è linear/spot –∑ –∫–µ—à–µ–º –Ω–∞ 15 —Ö–≤."""
    now = time.time()
    if now - _SUPPORTED["ts"] < _SUPPORTED_TTL:
        return

    try:
        linear = bybit.get_instruments_info(category="linear").get("result", {}).get("list", []) or []
        spot   = bybit.get_instruments_info(category="spot").get("result", {}).get("list", []) or []
        _SUPPORTED["linear"] = {x.get("symbol") for x in linear if x.get("symbol")}
        _SUPPORTED["spot"]   = {x.get("symbol") for x in spot if x.get("symbol")}
        _SUPPORTED["ts"] = now
        log_debug(f"‚úÖ Supported sets refreshed: linear={len(_SUPPORTED['linear'])}, spot={len(_SUPPORTED['spot'])}")
    except Exception as e:
        try:
            lin_t  = bybit.get_tickers(category="linear").get("result", {}).get("list", []) or []
            spot_t = bybit.get_tickers(category="spot").get("result", {}).get("list", []) or []
            _SUPPORTED["linear"] = {x.get("symbol") for x in lin_t if x.get("symbol")}
            _SUPPORTED["spot"]   = {x.get("symbol") for x in spot_t if x.get("symbol")}
            _SUPPORTED["ts"] = now
            log_debug(f"‚ôªÔ∏è Supported sets via tickers: linear={len(_SUPPORTED['linear'])}, spot={len(_SUPPORTED['spot'])}")
        except Exception as e2:
            log_error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å –æ–Ω–æ–≤–∏—Ç–∏ supported sets: {e2}")

def _resolve_category(symbol: str):
    """–ü–æ–≤–µ—Ä—Ç–∞—î 'linear' –∞–±–æ 'spot' —è–∫—â–æ —Å–∏–º–≤–æ–ª –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è; —ñ–Ω–∞–∫—à–µ None."""
    _refresh_supported_sets()
    if symbol in _SUPPORTED["linear"]:
        return "linear"
    if symbol in _SUPPORTED["spot"]:
        return "spot"
    return None

def get_klines_clean_bybit(symbol, interval="1h", limit=200, category=None):
    """
    üì¶ –û—Ç—Ä–∏–º—É—î Kline-–¥–∞–Ω—ñ –≤—ñ–¥ Bybit —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —á–∏—Å—Ç–∏–π DataFrame.
    - –ë–µ–∑ —Å–ª—ñ–ø–æ–≥–æ fallback –∑ linear ‚Üí spot (–∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–ø–µ—Ä–µ–¥).
    - –ü–æ–∑–Ω–∞—á–∞—î–º–æ 'unsupported' (retCode 10001) —É deny-list –Ω–∞ 60 —Ö–≤.
    - –¢–∏—Ö–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ None, —è–∫—â–æ —Å–∏–º–≤–æ–ª –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –∞–±–æ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞.
    """
    try:
        # deny-list: —è–∫—â–æ –Ω–µ—â–æ–¥–∞–≤–Ω–æ –±—É–ª–æ 10001 ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
        ts = _UNSUPPORTED.get(symbol)
        if ts and (time.time() - ts) < _UNSUPPORTED_TTL:
            log_debug(f"‚õî {symbol} —É deny-list (unsupported) ‚Äî skip –¥–æ TTL")
            return None

        # –≤–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é (—è–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ —è–≤–Ω–æ)
        cat = category or _resolve_category(symbol)
        if cat is None:
            log_debug(f"‚õî {symbol} –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –Ω—ñ –≤ linear, –Ω—ñ –≤ spot ‚Äî skip")
            _UNSUPPORTED[symbol] = time.time()
            return None

        # –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —ñ–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è v5 (—ñ –¥–ª—è linear, —ñ –¥–ª—è spot)
        converted_interval = _INTERVAL_MAP.get(interval, str(interval))

        # –≤–∏–∫–ª–∏–∫ API
        resp = bybit.get_kline(category=cat, symbol=symbol, interval=converted_interval, limit=limit)

        # –æ–±—Ä–æ–±–∫–∞ –∫–æ–¥—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        ret_code = resp.get("retCode")
        if ret_code not in (None, 0):
            if int(ret_code) == 10001:  # Not supported symbols
                _UNSUPPORTED[symbol] = time.time()
                log_message(f"‚õî {symbol}: Not supported (retCode=10001) ‚Äî –¥–æ–¥–∞–Ω–æ –≤ deny-list –Ω–∞ 60 —Ö–≤")
                return None
            log_error(f"‚ùå get_kline retCode={ret_code} –¥–ª—è {symbol} ({cat}/{converted_interval})")
            return None

        result = resp.get("result", {}) or {}
        kline_data = result.get("list", []) or []
        if not kline_data:
            log_debug(f"‚ÑπÔ∏è –ü–æ—Ä–æ–∂–Ω—ñ klines –¥–ª—è {symbol} ({cat}/{converted_interval}) ‚Äî skip")
            return None

        # Bybit v5: –µ–ª–µ–º–µ–Ω—Ç–∏ ‚Äî –º–∞—Å–∏–≤–∏ [ts, open, high, low, close, volume, turnover]
        # —ñ–Ω–∫–æ–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –±–µ–∑ 'turnover' ‚Üí –ø—ñ–¥–ª–∞—à—Ç—É—î–º–æ—Å—å –ø—ñ–¥ —Ñ–∞–∫—Ç–∏—á–Ω—É –¥–æ–≤–∂–∏–Ω—É
        base_cols = ["timestamp", "open", "high", "low", "close", "volume", "turnover"]
        df = pd.DataFrame(kline_data, columns=base_cols[:len(kline_data[0])])

        # —Ç–∏–ø–∏ –∫–æ–ª–æ–Ω–æ–∫
        if "timestamp" in df.columns:
            df["timestamp"] = pd.to_datetime(pd.to_numeric(df["timestamp"], errors="coerce"), unit="ms", errors="coerce")

        for c in ("open", "high", "low", "close", "volume"):
            if c in df.columns:
                df[c] = pd.to_numeric(df[c], errors="coerce")

        # —á–∏—Å—Ç–∫–∞ —ñ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        if "timestamp" in df.columns:
            df = df.sort_values("timestamp").reset_index(drop=True)

        df = df.dropna(subset=[c for c in ("open", "high", "low", "close") if c in df.columns])

        if df.empty:
            return None

        log_debug(f"‚úÖ kline OK: {symbol} {cat} {interval}->{converted_interval} rows={len(df)}")
        return df

    except Exception as e:
        msg = str(e)
        if "10001" in msg and "Not supported" in msg:
            _UNSUPPORTED[symbol] = time.time()
            log_message(f"‚õî {symbol}: –ø–æ–∑–Ω–∞—á–µ–Ω–æ unsupported —á–µ—Ä–µ–∑ –≤–∏–Ω—è—Ç–æ–∫ 10001")
            return None

        log_error(f"‚ùå get_klines_clean_bybit –ø–æ–º–∏–ª–∫–∞ –¥–ª—è {symbol}: {e}")
        return None
