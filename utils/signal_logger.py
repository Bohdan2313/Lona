import os
import json
from datetime import datetime
from utils.logger import log_error, log_message
from utils.logger import sanitize_signals
import pandas as pd
import numpy as np

STATS_PATH = "data/signal_stats.json"


def safe_float(value, default=0.0):
    """
    üì¶ –ë–µ–∑–ø–µ—á–Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤ float. –Ø–∫—â–æ value –Ω–µ —á–∏—Å–ª–æ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î default.
    """
    try:
        if isinstance(value, (list, dict)):
            return default  # dict/list –Ω–µ –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ
        return float(value)
    except (TypeError, ValueError):
        return default


def categorize_signals(signals: dict) -> str:
    """
    üß† –§–æ—Ä–º—É—î –¥–µ—Ç–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∫–ª—é—á –¥–ª—è signal_stats.json
    """
    import json

    if not isinstance(signals, dict):
        log_error(f"‚ùå categorize_signals –æ—Ç—Ä–∏–º–∞–≤ {type(signals)} ‚Üí {signals}")
        return json.dumps({"fallback": True, "raw": str(signals)}, sort_keys=True, ensure_ascii=False)
    else:
        for k, v in signals.items():
            if isinstance(v, (pd.Series, pd.DataFrame, np.ndarray)):
                log_error(f"‚ö†Ô∏è Found NON-JSON SAFE value in signals: {k} ‚Üí {type(v)}")

    def rsi_category(rsi):
        rsi = safe_float(rsi, 50)
        if rsi < 30:
            return "oversold"
        if rsi < 45:
            return "low"
        if rsi <= 55:
            return "neutral"
        if rsi <= 70:
            return "high"
        return "overbought"

    def whale_category(score):
        score = safe_float(score, 0)
        if score < 30:
            return "weak"
        if score < 70:
            return "medium"
        if score < 90:
            return "strong"
        return "ultra"

    def delta_category(delta):
        delta = safe_float(delta, 0)
        if delta > 2:
            return "surge"
        if delta > 0.5:
            return "up"
        if delta < -2:
            return "crash"
        if delta < -0.5:
            return "down"
        return "flat"

    try:
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤—Å—ñ –≤–∫–ª–∞–¥–µ–Ω—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≤ string
        for k, v in signals.items():
            if isinstance(v, (dict, list)):
                signals[k] = json.dumps(v, ensure_ascii=False, sort_keys=True)

        signal_key = {
            "trend": signals.get("trend", "unknown"),
            "global_trend": signals.get("global_trend", "neutral"),
            "macd": signals.get("macd_trend", "neutral"),
            "macd_cross": signals.get("macd_crossed", "none"),
            "macd_hist": signals.get("macd_hist_direction", "flat"),
            "rsi": rsi_category(signals.get("rsi", 50)),
            "rsi_div": signals.get("rsi_divergence", "none"),
            "whale": whale_category(signals.get("whale_score", 0)),
            "volume": signals.get("volume", "normal"),
            "volatility": signals.get("volatility_level", "unknown"),
            "pattern": "yes" if safe_float(signals.get("pattern_score", 0)) > 0 else "none",
            "bollinger": signals.get("bollinger_signal", "neutral"),
            "side": signals.get("position_side", "LONG"),
            "lstm": "bullish" if safe_float(signals.get("lstm_score", 0)) > 0 else "bearish",
            "atr": safe_float(signals.get("atr_score", 0)),
            "microtrend_1m": signals.get("microtrend_1m", "NEUTRAL"),
            "microtrend_5m": signals.get("microtrend_5m", "flat"),
            "stoch": signals.get("stoch_signal", "neutral"),
            "cci": signals.get("cci_signal", "neutral"),
            "support": signals.get("support_position", "unknown"),
            "confidence": signals.get("confidence_tag", "weak"),
            "delta": delta_category(signals.get("delta_1m", 0)),
            "health": "ok" if signals.get("health_ok", True) else "bad"
        }
        return json.dumps(signal_key, sort_keys=True)

    except Exception as e:
        import traceback
        log_error(f"‚ùå categorize_signals –ø–æ–º–∏–ª–∫–∞: {e}\n{traceback.format_exc()}")
        return json.dumps({"error": "fallback", "signals": str(signals)}, sort_keys=True)


def log_signal_result(signals: dict, result: float, full_snapshot: dict = None):
    """
    üì¶ –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—ñ–≤ —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É STATS_PATH
    ‚úÖ –ó–±–µ—Ä—ñ–≥–∞—î –ø–æ–≤–Ω–∏–π snapshot —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–≥–æ–¥–∏.
    """
    try:
        result = safe_float(result, 0.0)
    except Exception as e:
        log_error(f"‚ùå log_signal_result: –Ω–µ–º–æ–∂–ª–∏–≤–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ result –¥–æ float ‚Üí {e}")
        return

    # üìÇ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
    if not os.path.exists(STATS_PATH):
        with open(STATS_PATH, "w", encoding="utf-8") as f:
            json.dump([], f)
        stats = []
        log_message("üìÑ STATS_PATH —Å—Ç–≤–æ—Ä–µ–Ω–æ")
    else:
        try:
            with open(STATS_PATH, "r", encoding="utf-8") as f:
                stats = json.load(f)
        except Exception as e:
            log_error(f"‚ö†Ô∏è STATS_PATH –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π, —Å—Ç–≤–æ—Ä—é—é –Ω–æ–≤–∏–π ‚Üí {e}")
            stats = []

    if not isinstance(stats, list):
        log_error("‚ùå STATS –Ω–µ —î —Å–ø–∏—Å–∫–æ–º! –°–∫–∏–¥–∞—é –¥–æ –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ —Å–ø–∏—Å–∫—É.")
        stats = []

    # ü©π Fallback –¥–ª—è signals
    if not signals and full_snapshot and "conditions" in full_snapshot:
        signals = full_snapshot.get("conditions", {})
        log_message("‚ö†Ô∏è signals –ø—É—Å—Ç—ñ ‚Üí fallback –Ω–∞ full_snapshot.conditions")

    signals = sanitize_signals(signals)

    # üóùÔ∏è –¢–∏–º—á–∞—Å–æ–≤–∏–π match_key
    match_key = "N/A"

    # üìà –î–æ–¥–∞—Ç–∫–æ–≤—ñ PnL
    peak_pnl = safe_float(full_snapshot.get("peak_pnl_percent"), result)
    worst_pnl = safe_float(full_snapshot.get("worst_pnl_percent"), result)

    # üìå –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ
    symbol = signals.get("symbol") or full_snapshot.get("symbol", "UNKNOWN")
    trade_id = (full_snapshot or {}).get("trade_id")
    entry_price = (signals.get("entry_price") or full_snapshot.get("entry_price") or 0.0)
    exit_price = (signals.get("exit_price") or full_snapshot.get("exit_price") or None)
    duration = (signals.get("duration_minutes") or full_snapshot.get("duration_minutes", 0))
    exit_reason = full_snapshot.get("exit_reason", "OPEN")
    trade_result = full_snapshot.get("result", "OPEN")
    active = True if trade_result == "OPEN" else False

    timestamp = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")

    # üÜï –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
    entry = {
        "key": match_key,
        "numeric_key": {},
        "signals": signals,
        "full_snapshot": {**(full_snapshot or {}), "active": active, "trade_id": trade_id},
        "pnl_percent": result,
        "peak_pnl_percent": peak_pnl,
        "worst_pnl_percent": worst_pnl,
        "symbol": symbol,
        "entry_price": entry_price,
        "exit_price": exit_price,
        "timestamp": timestamp,
        "duration": duration,
        "exit_reason": exit_reason,
        "result": trade_result,
        "active": active
    }

    # üìù –î–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è —Å—Ç–∞—Ä–∏—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
    for s in stats:
        if s.get("symbol", "").upper() == symbol.upper() \
           and s.get("active", False) \
           and (not trade_id or s.get("full_snapshot", {}).get("trade_id") == trade_id):
            s["active"] = False
            s["full_snapshot"]["active"] = False
            log_message(f"üü† –î–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ —Å—Ç–∞—Ä–∏–π –∑–∞–ø–∏—Å –¥–ª—è {symbol} (trade_id={trade_id})")

    # ‚ûï –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
    stats.append(entry)
    log_message(f"‚úÖ –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–ª—è {symbol} —É signal_stats.json (trade_id={trade_id})")

    # üíæ –ó–∞–ø–∏—Å —É —Ñ–∞–π–ª
    try:
        with open(STATS_PATH, "w", encoding="utf-8") as f:
            json.dump(stats[-500:], f, indent=2, ensure_ascii=False)
        log_message(
            f"üì¶ Passport –æ–Ω–æ–≤–ª–µ–Ω–æ ‚Üí PnL={result:.2f}% | üìà –ü—ñ–∫={peak_pnl:.2f}% | üìâ –ú—ñ–Ω={worst_pnl:.2f}% | üèÅ {trade_result}"
        )
    except Exception as e:
        log_error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –≤ STATS_PATH ‚Üí {e}")


def log_final_trade_result(symbol, trade_id, entry_price, exit_price, result,
                           peak_pnl, worst_pnl, duration, exit_reason, snapshot):
    """
    üì¶ –î–æ–¥–∞—î —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Å —É–≥–æ–¥–∏ —É signal_stats.json (append-only).
    –§–æ—Ä–º–∞—Ç ‚Üí –ø–æ–≤–Ω–∏–π signals –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ + —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    try:
        if not os.path.exists(STATS_PATH):
            log_message("üìÑ STATS_PATH –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—é –Ω–æ–≤–∏–π —Ñ–∞–π–ª.")
            stats = []
        else:
            with open(STATS_PATH, "r", encoding="utf-8") as f:
                try:
                    stats = json.load(f)
                except json.JSONDecodeError:
                    log_error("‚ùå STATS_PATH –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π ‚Äî —Å–∫–∏–¥–∞—é —É [].")
                    stats = []

        if not isinstance(stats, list):
            log_error("‚ùå STATS_PATH –º–∞—î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–∫–∏–¥–∞—é —É [].")
            stats = []

        # üóù –û—Ç—Ä–∏–º—É—î–º–æ signals –ø—Ä–∏ –≤—Ö–æ–¥—ñ
        entry_signals = snapshot.get("conditions") or snapshot.get("behavior_summary", {}).get("signals") or {}

        # üìã –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Å
        timestamp = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
        final_entry = {
            "key": snapshot.get("key", "N/A"),
            "numeric_key": snapshot.get("numeric_key", {}),
            "signals": sanitize_signals(entry_signals),
            "full_snapshot": {
                **snapshot,
                "symbol": symbol,
                "entry_price": entry_price,
                "exit_price": exit_price,
                "peak_pnl_percent": peak_pnl,
                "worst_pnl_percent": worst_pnl,
                "duration_minutes": duration,
                "result": result,
                "exit_reason": exit_reason,
                "active": False,
                "trade_id": trade_id,
                "timestamp": timestamp
            },
            # üìå –û—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ —É–≥–æ–¥–∏
            "pnl_percent": round(peak_pnl if result == "WIN" else worst_pnl, 2),
            "peak_pnl_percent": round(peak_pnl, 2),
            "worst_pnl_percent": round(worst_pnl, 2),
            "symbol": symbol,
            "entry_price": entry_price,
            "exit_price": exit_price,
            "timestamp": timestamp,
            "duration": duration,
            "exit_reason": exit_reason,
            "result": result,
            "active": False
        }

        stats.append(final_entry)

        # üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–∏—à–µ –æ—Å—Ç–∞–Ω–Ω—ñ 500 –∑–∞–ø–∏—Å—ñ–≤
        with open(STATS_PATH, "w", encoding="utf-8") as f:
            json.dump(stats[-500:], f, indent=2, ensure_ascii=False)

        log_message(
            f"‚úÖ –î–æ–¥–∞–Ω–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Å –¥–ª—è {symbol} —É signal_stats.json ‚Üí "
            f"PNL={final_entry['pnl_percent']}% | üèÅ {result}"
        )

    except Exception as e:
        log_error(f"‚ùå log_final_trade_result() ‚Äî –ø–æ–º–∏–ª–∫–∞: {e}")


def log_clean_open_signal(symbol, trade_id, entry_price, snapshot):
    """
    üì• –î–æ–¥–∞—î –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å —É signal_stats.json –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ —É–≥–æ–¥–∏ (–±–µ–∑ PnL —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤).
    """
    try:
        if not os.path.exists(STATS_PATH):
            log_message("üìÑ STATS_PATH –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—é –Ω–æ–≤–∏–π —Ñ–∞–π–ª.")
            stats = []
        else:
            with open(STATS_PATH, "r", encoding="utf-8") as f:
                try:
                    stats = json.load(f)
                except json.JSONDecodeError:
                    log_error("‚ùå STATS_PATH –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π ‚Äî —Å–∫–∏–¥–∞—é —É [].")
                    stats = []

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –∑–∞–ø–∏—Å
        timestamp = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
        open_entry = {
            "symbol": symbol,
            "trade_id": trade_id,
            "entry_price": entry_price,
            "signals": snapshot.get("conditions", {}),
            "timestamp": timestamp
        }

        stats.append(open_entry)

        with open(STATS_PATH, "w", encoding="utf-8") as f:
            json.dump(stats[-500:], f, indent=2, ensure_ascii=False)

        log_message(f"‚úÖ –î–æ–¥–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol} —É signal_stats.json")

    except Exception as e:
        log_error(f"‚ùå log_clean_open_signal() ‚Äî –ø–æ–º–∏–ª–∫–∞: {e}")



def append_signal_record(trade_record):
    """
    üìù –î–æ–¥–∞—î –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å —É signal_stats.json –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ —É–≥–æ–¥–∏.
    """
    try:
        if not os.path.exists(STATS_PATH):
            with open(STATS_PATH, "w", encoding="utf-8") as f:
                json.dump([], f)

        with open(STATS_PATH, "r", encoding="utf-8") as f:
            stats = json.load(f)

        stats.append(trade_record)

        with open(STATS_PATH, "w", encoding="utf-8") as f:
            json.dump(stats, f, indent=2, ensure_ascii=False)

        log_message(f"‚úÖ [signal_logger] –ù–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ —É signal_stats.json (trade_id={trade_record.get('trade_id')})")

    except Exception as e:
        log_error(f"‚ùå [signal_logger] append_signal_record: –ø–æ–º–∏–ª–∫–∞ ‚Üí {e}")

def update_signal_record(trade_id, updates):
    """
    üîÑ –û–Ω–æ–≤–ª—é—î —ñ—Å–Ω—É—é—á–∏–π –∑–∞–ø–∏—Å —É signal_stats.json –∑–∞ trade_id –∞–±–æ symbol+opened
    """
    try:
        if not os.path.exists(STATS_PATH):
            log_error("‚ùå [signal_logger] signal_stats.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        with open(STATS_PATH, "r", encoding="utf-8") as f:
            stats = json.load(f)

        updated = False
        for trade in stats:
            # –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –∑–∞ trade_id
            if trade.get("trade_id") == trade_id:
                trade.update(updates)
                updated = True
                break
            # –Ø–∫—â–æ trade_id –Ω–µ –∑–±—ñ–≥—Å—è ‚Üí fallback –Ω–∞ symbol+opened
            elif (trade.get("symbol") in trade_id and not trade.get("closed", False)):
                log_message(f"‚ö†Ô∏è [signal_logger] –ó–±—ñ–≥ –∑–∞ symbol={trade.get('symbol')} (–±–µ–∑ trade_id)")
                trade.update(updates)
                updated = True
                break

        if updated:
            with open(STATS_PATH, "w", encoding="utf-8") as f:
                json.dump(stats, f, indent=2, ensure_ascii=False)
            log_message(f"‚úÖ [signal_logger] –ó–∞–ø–∏—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è trade_id={trade_id}")
        else:
            log_error(f"‚ùå [signal_logger] trade_id={trade_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.")

    except Exception as e:
        log_error(f"‚ùå [signal_logger] update_signal_record: –ø–æ–º–∏–ª–∫–∞ ‚Üí {e}")
